/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class JavaParser */

#ifndef _Included_JavaParser
#define _Included_JavaParser
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     JavaParser
 * Method:    cactionTest
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionTest
  (JNIEnv *, jclass);

/*
 * Class:     JavaParser
 * Method:    cactionCompilationUnitList
 * Signature: (I[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionCompilationUnitList
  (JNIEnv *, jclass, jint, jobjectArray);

/*
 * Class:     JavaParser
 * Method:    cactionProcessObject
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionProcessObject
  (JNIEnv *, jclass);

/*
 * Class:     JavaParser
 * Method:    cactionCompilationUnitDeclaration
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionCompilationUnitDeclaration
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionCompilationUnitDeclarationEnd
 * Signature: (ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionCompilationUnitDeclarationEnd
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionTypeDeclaration
 * Signature: (Ljava/lang/String;ZZZZZZZZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionTypeDeclaration
  (JNIEnv *, jclass, jstring, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionTypeDeclarationHeader
 * Signature: (ZIILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionTypeDeclarationHeader
  (JNIEnv *, jclass, jboolean, jint, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionTypeDeclarationEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionTypeDeclarationEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionConstructorDeclaration
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionConstructorDeclaration
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionConstructorDeclarationHeader
 * Signature: (Ljava/lang/String;ZZIIILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionConstructorDeclarationHeader
  (JNIEnv *, jclass, jstring, jboolean, jboolean, jint, jint, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionConstructorDeclarationEnd
 * Signature: (ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionConstructorDeclarationEnd
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionExplicitConstructorCall
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionExplicitConstructorCall
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionExplicitConstructorCallEnd
 * Signature: (ZZZIILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionExplicitConstructorCallEnd
  (JNIEnv *, jclass, jboolean, jboolean, jboolean, jint, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionMethodDeclaration
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionMethodDeclaration
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionMethodDeclarationHeader
 * Signature: (Ljava/lang/String;ZZZZZZZZZIIILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionMethodDeclarationHeader
  (JNIEnv *, jclass, jstring, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jint, jint, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionMethodDeclarationEnd
 * Signature: (ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionMethodDeclarationEnd
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionTypeReference
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionTypeReference
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArgument
 * Signature: (Ljava/lang/String;ZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArgument
  (JNIEnv *, jclass, jstring, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArgumentEnd
 * Signature: (Ljava/lang/String;ZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArgumentEnd
  (JNIEnv *, jclass, jstring, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArrayTypeReference
 * Signature: (Ljava/lang/String;ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArrayTypeReference
  (JNIEnv *, jclass, jstring, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArrayTypeReferenceEnd
 * Signature: (Ljava/lang/String;ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArrayTypeReferenceEnd
  (JNIEnv *, jclass, jstring, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionMessageSend
 * Signature: (Ljava/lang/String;Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionMessageSend
  (JNIEnv *, jclass, jstring, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionMessageSendEnd
 * Signature: (IIZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionMessageSendEnd
  (JNIEnv *, jclass, jint, jint, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionQualifiedNameReference
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionQualifiedNameReference
  (JNIEnv *, jclass, jstring, jstring, jstring, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionStringLiteral
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionStringLiteral
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionAllocationExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionAllocationExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionAllocationExpressionEnd
 * Signature: (Ljava/lang/String;ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionAllocationExpressionEnd
  (JNIEnv *, jclass, jstring, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionANDANDExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionANDANDExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionANDANDExpressionEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionANDANDExpressionEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionAnnotationMethodDeclaration
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionAnnotationMethodDeclaration
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArgumentClassScope
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArgumentClassScope
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArrayAllocationExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArrayAllocationExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArrayAllocationExpressionEnd
 * Signature: (Ljava/lang/String;IZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArrayAllocationExpressionEnd
  (JNIEnv *, jclass, jstring, jint, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArrayInitializer
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArrayInitializer
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArrayInitializerEnd
 * Signature: (ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArrayInitializerEnd
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArrayQualifiedTypeReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArrayQualifiedTypeReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArrayQualifiedTypeReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArrayQualifiedTypeReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArrayReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArrayReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArrayReferenceEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArrayReferenceEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionArrayTypeReferenceClassScope
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArrayTypeReferenceClassScope
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionAssertStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionAssertStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionAssertStatementEnd
 * Signature: (ZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionAssertStatementEnd
  (JNIEnv *, jclass, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionAssignment
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionAssignment
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionAssignmentEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionAssignmentEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionBinaryExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionBinaryExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionBinaryExpressionEnd
 * Signature: (ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionBinaryExpressionEnd
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionBlock
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionBlock
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionBlockEnd
 * Signature: (ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionBlockEnd
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionBreakStatement
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionBreakStatement
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionCaseStatement
 * Signature: (ZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionCaseStatement
  (JNIEnv *, jclass, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionCaseStatementEnd
 * Signature: (ZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionCaseStatementEnd
  (JNIEnv *, jclass, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionCastExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionCastExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionCastExpressionEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionCastExpressionEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionCharLiteral
 * Signature: (CLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionCharLiteral
  (JNIEnv *, jclass, jchar, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionClassLiteralAccess
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionClassLiteralAccess
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionClinit
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionClinit
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionConditionalExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionConditionalExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionConditionalExpressionEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionConditionalExpressionEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionContinueStatement
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionContinueStatement
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionCompoundAssignment
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionCompoundAssignment
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionCompoundAssignmentEnd
 * Signature: (ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionCompoundAssignmentEnd
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionDoStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionDoStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionDoStatementEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionDoStatementEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionDoubleLiteral
 * Signature: (DLjava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionDoubleLiteral
  (JNIEnv *, jclass, jdouble, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionEmptyStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionEmptyStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionEmptyStatementEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionEmptyStatementEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionEqualExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionEqualExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionEqualExpressionEnd
 * Signature: (ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionEqualExpressionEnd
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionExtendedStringLiteral
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionExtendedStringLiteral
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionFalseLiteral
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionFalseLiteral
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionFieldDeclarationEnd
 * Signature: (Ljava/lang/String;ZZZZZZZZZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionFieldDeclarationEnd
  (JNIEnv *, jclass, jstring, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionFieldReference
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionFieldReference
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionFieldReferenceEnd
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionFieldReferenceEnd
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionFieldReferenceClassScope
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionFieldReferenceClassScope
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionFieldReferenceClassScopeEnd
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionFieldReferenceClassScopeEnd
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionFloatLiteral
 * Signature: (FLjava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionFloatLiteral
  (JNIEnv *, jclass, jfloat, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionForeachStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionForeachStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionForeachStatementEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionForeachStatementEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionForStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionForStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionForStatementEnd
 * Signature: (IZILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionForStatementEnd
  (JNIEnv *, jclass, jint, jboolean, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionIfStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionIfStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionIfStatementEnd
 * Signature: (ZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionIfStatementEnd
  (JNIEnv *, jclass, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionImportReference
 * Signature: (Ljava/lang/String;ZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionImportReference
  (JNIEnv *, jclass, jstring, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionInitializer
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionInitializer
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionInstanceOfExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionInstanceOfExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionInstanceOfExpressionEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionInstanceOfExpressionEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionIntLiteral
 * Signature: (ILjava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionIntLiteral
  (JNIEnv *, jclass, jint, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadoc
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadoc
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocAllocationExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocAllocationExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocAllocationExpressionClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocAllocationExpressionClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocArgumentExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocArgumentExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocArgumentExpressionClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocArgumentExpressionClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocArrayQualifiedTypeReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocArrayQualifiedTypeReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocArrayQualifiedTypeReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocArrayQualifiedTypeReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocArraySingleTypeReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocArraySingleTypeReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocArraySingleTypeReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocArraySingleTypeReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocFieldReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocFieldReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocFieldReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocFieldReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocImplicitTypeReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocImplicitTypeReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocImplicitTypeReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocImplicitTypeReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocMessageSend
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocMessageSend
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocMessageSendClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocMessageSendClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocQualifiedTypeReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocQualifiedTypeReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocQualifiedTypeReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocQualifiedTypeReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocReturnStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocReturnStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocReturnStatementClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocReturnStatementClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocSingleNameReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocSingleNameReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocSingleNameReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocSingleNameReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocSingleTypeReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocSingleTypeReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionJavadocSingleTypeReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionJavadocSingleTypeReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionLabeledStatement
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionLabeledStatement
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionLabeledStatementEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionLabeledStatementEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionLocalDeclaration
 * Signature: (Ljava/lang/String;ZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionLocalDeclaration
  (JNIEnv *, jclass, jstring, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionLocalDeclarationEnd
 * Signature: (Ljava/lang/String;ZZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionLocalDeclarationEnd
  (JNIEnv *, jclass, jstring, jboolean, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionLongLiteral
 * Signature: (JLjava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionLongLiteral
  (JNIEnv *, jclass, jlong, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionMarkerAnnotation
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionMarkerAnnotation
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionMemberValuePair
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionMemberValuePair
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionStringLiteralConcatenation
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionStringLiteralConcatenation
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionNormalAnnotation
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionNormalAnnotation
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionNullLiteral
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionNullLiteral
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionORORExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionORORExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionORORExpressionEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionORORExpressionEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionParameterizedQualifiedTypeReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionParameterizedQualifiedTypeReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionParameterizedQualifiedTypeReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionParameterizedQualifiedTypeReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionParameterizedSingleTypeReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionParameterizedSingleTypeReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionParameterizedSingleTypeReferenceEnd
 * Signature: (Ljava/lang/String;ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionParameterizedSingleTypeReferenceEnd
  (JNIEnv *, jclass, jstring, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionParameterizedSingleTypeReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionParameterizedSingleTypeReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionPostfixExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionPostfixExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionPostfixExpressionEnd
 * Signature: (ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionPostfixExpressionEnd
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionPrefixExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionPrefixExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionPrefixExpressionEnd
 * Signature: (ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionPrefixExpressionEnd
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionQualifiedAllocationExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionQualifiedAllocationExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionQualifiedSuperReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionQualifiedSuperReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionQualifiedSuperReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionQualifiedSuperReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionQualifiedThisReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionQualifiedThisReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionQualifiedThisReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionQualifiedThisReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionQualifiedTypeReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionQualifiedTypeReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionQualifiedTypeReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionQualifiedTypeReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionReturnStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionReturnStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionReturnStatementEnd
 * Signature: (ZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionReturnStatementEnd
  (JNIEnv *, jclass, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionSingleMemberAnnotation
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionSingleMemberAnnotation
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionSingleNameReference
 * Signature: (Ljava/lang/String;LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionSingleNameReference
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionSingleNameReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionSingleNameReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionSuperReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionSuperReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionSwitchStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionSwitchStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionSwitchStatementEnd
 * Signature: (IZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionSwitchStatementEnd
  (JNIEnv *, jclass, jint, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionSynchronizedStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionSynchronizedStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionSynchronizedStatementEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionSynchronizedStatementEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionThisReference
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionThisReference
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionThisReferenceClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionThisReferenceClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionThrowStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionThrowStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionThrowStatementEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionThrowStatementEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionTrueLiteral
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionTrueLiteral
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionTryStatement
 * Signature: (IZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionTryStatement
  (JNIEnv *, jclass, jint, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionTryStatementEnd
 * Signature: (IZLJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionTryStatementEnd
  (JNIEnv *, jclass, jint, jboolean, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionCatchBlockEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionCatchBlockEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionTypeParameter
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionTypeParameter
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionTypeParameterClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionTypeParameterClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionUnaryExpression
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionUnaryExpression
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionUnaryExpressionEnd
 * Signature: (ILJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionUnaryExpressionEnd
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionWhileStatement
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionWhileStatement
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionWhileStatementEnd
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionWhileStatementEnd
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionWildcard
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionWildcard
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionWildcardClassScope
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionWildcardClassScope
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionBuildImplicitClassSupportStart
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionBuildImplicitClassSupportStart
  (JNIEnv *, jclass, jstring);

/*
 * Class:     JavaParser
 * Method:    cactionBuildImplicitClassSupportEnd
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionBuildImplicitClassSupportEnd
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     JavaParser
 * Method:    cactionBuildImplicitMethodSupport
 * Signature: (Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionBuildImplicitMethodSupport
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     JavaParser
 * Method:    cactionBuildImplicitFieldSupport
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionBuildImplicitFieldSupport
  (JNIEnv *, jclass, jstring);

/*
 * Class:     JavaParser
 * Method:    cactionArgumentName
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArgumentName
  (JNIEnv *, jclass, jstring);

/*
 * Class:     JavaParser
 * Method:    cactionArgumentModifiers
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionArgumentModifiers
  (JNIEnv *, jclass, jint);

/*
 * Class:     JavaParser
 * Method:    cactionGenerateType
 * Signature: (Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionGenerateType
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     JavaParser
 * Method:    generateBooleanType
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_JavaParser_generateBooleanType
  (JNIEnv *, jclass);

/*
 * Class:     JavaParser
 * Method:    generateByteType
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_JavaParser_generateByteType
  (JNIEnv *, jclass);

/*
 * Class:     JavaParser
 * Method:    generateCharType
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_JavaParser_generateCharType
  (JNIEnv *, jclass);

/*
 * Class:     JavaParser
 * Method:    generateIntType
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_JavaParser_generateIntType
  (JNIEnv *, jclass);

/*
 * Class:     JavaParser
 * Method:    generateShortType
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_JavaParser_generateShortType
  (JNIEnv *, jclass);

/*
 * Class:     JavaParser
 * Method:    generateFloatType
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_JavaParser_generateFloatType
  (JNIEnv *, jclass);

/*
 * Class:     JavaParser
 * Method:    generateLongType
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_JavaParser_generateLongType
  (JNIEnv *, jclass);

/*
 * Class:     JavaParser
 * Method:    generateDoubleType
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_JavaParser_generateDoubleType
  (JNIEnv *, jclass);

/*
 * Class:     JavaParser
 * Method:    generateNullType
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_JavaParser_generateNullType
  (JNIEnv *, jclass);

/*
 * Class:     JavaParser
 * Method:    cactionGenerateToken
 * Signature: (LJavaToken;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionGenerateToken
  (JNIEnv *, jclass, jobject);

/*
 * Class:     JavaParser
 * Method:    cactionSetSourcePosition
 * Signature: (LJavaSourcePositionInformation;)V
 */
JNIEXPORT void JNICALL Java_JavaParser_cactionSetSourcePosition
  (JNIEnv *, jclass, jobject);

#ifdef __cplusplus
}
#endif
#endif
