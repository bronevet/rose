#line 2 "preproc-fortran-fixed.cc"

#line 4 "preproc-fortran-fixed.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer Rose_Fortran_fixed_format__create_buffer
#define yy_delete_buffer Rose_Fortran_fixed_format__delete_buffer
#define yy_flex_debug Rose_Fortran_fixed_format__flex_debug
#define yy_init_buffer Rose_Fortran_fixed_format__init_buffer
#define yy_flush_buffer Rose_Fortran_fixed_format__flush_buffer
#define yy_load_buffer_state Rose_Fortran_fixed_format__load_buffer_state
#define yy_switch_to_buffer Rose_Fortran_fixed_format__switch_to_buffer
#define yyin Rose_Fortran_fixed_format_in
#define yyleng Rose_Fortran_fixed_format_leng
#define yylex Rose_Fortran_fixed_format_lex
#define yylineno Rose_Fortran_fixed_format_lineno
#define yyout Rose_Fortran_fixed_format_out
#define yyrestart Rose_Fortran_fixed_format_restart
#define yytext Rose_Fortran_fixed_format_text
#define yywrap Rose_Fortran_fixed_format_wrap
#define yyalloc Rose_Fortran_fixed_format_alloc
#define yyrealloc Rose_Fortran_fixed_format_realloc
#define yyfree Rose_Fortran_fixed_format_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE Rose_Fortran_fixed_format_restart(Rose_Fortran_fixed_format_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int Rose_Fortran_fixed_format_leng;

extern FILE *Rose_Fortran_fixed_format_in, *Rose_Fortran_fixed_format_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up Rose_Fortran_fixed_format_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up Rose_Fortran_fixed_format_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via Rose_Fortran_fixed_format_restart()), so that the user can continue scanning by
	 * just pointing Rose_Fortran_fixed_format_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when Rose_Fortran_fixed_format_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int Rose_Fortran_fixed_format_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow Rose_Fortran_fixed_format_wrap()'s to do buffer switches
 * instead of setting up a fresh Rose_Fortran_fixed_format_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void Rose_Fortran_fixed_format_restart (FILE *input_file  );
void Rose_Fortran_fixed_format__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE Rose_Fortran_fixed_format__create_buffer (FILE *file,int size  );
void Rose_Fortran_fixed_format__delete_buffer (YY_BUFFER_STATE b  );
void Rose_Fortran_fixed_format__flush_buffer (YY_BUFFER_STATE b  );
void Rose_Fortran_fixed_format_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void Rose_Fortran_fixed_format_pop_buffer_state (void );

static void Rose_Fortran_fixed_format_ensure_buffer_stack (void );
static void Rose_Fortran_fixed_format__load_buffer_state (void );
static void Rose_Fortran_fixed_format__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER Rose_Fortran_fixed_format__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE Rose_Fortran_fixed_format__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE Rose_Fortran_fixed_format__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE Rose_Fortran_fixed_format__scan_bytes (yyconst char *bytes,int len  );

void *Rose_Fortran_fixed_format_alloc (yy_size_t  );
void *Rose_Fortran_fixed_format_realloc (void *,yy_size_t  );
void Rose_Fortran_fixed_format_free (void *  );

#define yy_new_buffer Rose_Fortran_fixed_format__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        Rose_Fortran_fixed_format_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            Rose_Fortran_fixed_format__create_buffer(Rose_Fortran_fixed_format_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        Rose_Fortran_fixed_format_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            Rose_Fortran_fixed_format__create_buffer(Rose_Fortran_fixed_format_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define Rose_Fortran_fixed_format_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *Rose_Fortran_fixed_format_in = (FILE *) 0, *Rose_Fortran_fixed_format_out = (FILE *) 0;

typedef int yy_state_type;

extern int Rose_Fortran_fixed_format_lineno;

int Rose_Fortran_fixed_format_lineno = 1;

extern char *Rose_Fortran_fixed_format_text;
#define yytext_ptr Rose_Fortran_fixed_format_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up Rose_Fortran_fixed_format_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	Rose_Fortran_fixed_format_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 36
#define YY_END_OF_BUFFER 37
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[97] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   37,   36,   33,   36,   33,   33,   35,   34,
        8,    4,   30,    5,   35,    9,   35,   29,   18,   35,
       19,    3,   32,   35,    3,    0,    0,    1,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    7,   15,   31,
       17,   14,   16,    3,   32,   31,    0,    3,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   21,    0,    0,   23,   26,   24,   25,   22,
        0,    0,   11,    0,    2,   10,   12,    0,    0,   20,
        0,    0,   13,   27,   28,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,    6,    7,    8,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   12,
       13,   14,    1,    1,   15,   15,   16,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
        1,    1,    1,    1,   15,    1,   17,   18,   15,   19,

       20,   21,   22,   15,   15,   15,   18,   23,   15,   24,
       25,   15,   26,   27,   28,   29,   30,   31,   15,   15,
       15,   15,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[32] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    1,    3,    4,
        1,    1,    1,    1,    3,    3,    5,    5,    3,    3,
        3,    3,    5,    5,    3,    3,    3,    3,    3,    3,
        3
    } ;

static yyconst flex_int16_t yy_base[106] =
    {   0,
        0,    0,    0,    1,    0,    0,    0,    0,    0,    0,
       17,   47,  129,  150,    0,    0,  150,  117,  150,  150,
      102,  150,  150,  150,   55,    0,   94,  150,   90,   89,
       86,    0,  150,    2,   83,    0,   96,  150,  150,   73,
       70,   78,   30,   31,   33,   67,   65,  150,  150,  150,
      150,  150,  150,    0,  150,   89,   88,    0,    0,   70,
       55,   65,   80,   76,   75,   74,   47,   45,   62,   38,
        0,   60,  150,   59,   35,  150,  150,  150,  150,  150,
       30,   49,  150,   35,  150,  150,  150,   32,    3,  150,
        2,    0,  150,  150,  150,  150,  107,  112,  117,  122,

      125,  129,  134,  139,  144
    } ;

static yyconst flex_int16_t yy_def[106] =
    {   0,
       97,   97,   98,   98,   97,   97,   97,   97,   97,   97,
       96,   11,   96,   96,   99,   99,   96,  100,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,  101,   96,  102,  101,  103,  100,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,  101,   96,  102,  102,   35,  104,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      105,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,    0,   96,   96,   96,   96,

       96,   96,   96,   96,   96
    } ;

static yyconst flex_int16_t yy_nxt[182] =
    {   0,
       96,   16,   16,   55,   96,   96,   95,   48,   94,   93,
       96,   56,   49,   96,   96,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   19,   27,   28,   29,   30,
       31,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   33,   63,
       65,   92,   67,   80,   91,   90,   34,   68,   64,   66,
       89,   73,   88,   35,   35,   87,   86,   84,   83,   35,
       35,   40,   81,   82,   41,   42,   43,   44,   45,   46,
       79,   78,   77,   47,   55,   74,   76,   75,   72,   55,
       55,   70,   57,   69,   62,   61,   60,   38,   53,   58,

       58,   52,   51,   50,   39,   58,   58,   14,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   36,   38,   36,
       36,   36,   37,   37,   37,   37,   37,   54,   96,   54,
       57,   96,   57,   57,   59,   96,   59,   59,   59,   71,
       96,   71,   71,   71,   85,   96,   85,   85,   85,   13,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96
    } ;

static yyconst flex_int16_t yy_chk[182] =
    {   0,
        0,    3,    4,   34,    0,    0,   92,   26,   91,   89,
        0,   34,   26,    0,    0,    3,    4,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   43,
       44,   88,   45,   67,   84,   82,   12,   45,   43,   44,
       81,   61,   75,   12,   12,   74,   72,   70,   69,   12,
       12,   25,   67,   68,   25,   25,   25,   25,   25,   25,
       66,   65,   64,   25,   35,   61,   63,   62,   60,   57,
       56,   47,   35,   46,   42,   41,   40,   37,   31,   35,

       35,   30,   29,   27,   21,   35,   35,   97,   97,   97,
       97,   97,   98,   98,   98,   98,   98,   99,   18,   99,
       99,   99,  100,  100,  100,  100,  100,  101,   13,  101,
      102,    0,  102,  102,  103,    0,  103,  103,  103,  104,
        0,  104,  104,  104,  105,    0,  105,  105,  105,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int Rose_Fortran_fixed_format__flex_debug;
int Rose_Fortran_fixed_format__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *Rose_Fortran_fixed_format_text;
#line 1 "preproc-fortran-fixed.ll"
#line 5 "preproc-fortran-fixed.ll"
/* 
Version 0.2.1 of FORTRAN scanner.
03-09-2007: Written by Ramakrishna Upadrasta and Dan Quinlan.

In an input free formatted FORTRAN file, this scanner recognizes the following
the ROSE sequence point in a FORTRAN file
     comments (beginning with ! and extendig till the end of the line)
     string literals (enclosed by single quotes '')
     Keywords (the list is provided in this code)
*/


/*
-------------------------------------------------------------------------------------
New in the current release:
    Better data structures for the keywords
    scripts to generate the header files automatically
    preliminary macro processing
-------------------------------------------------------------------------------------
*/

/*
-------------------------------------------------------------------------------------
Acknowledgements:
-------------------------------------------------------------------------------------
The authors (Dan and Rama) looked at the source codes of GFORTRAN as well as G95. 
We gratefully acknowledge the authors of GFORTRAN and G95.
*/

/*
-------------------------------------------------------------------------------------
Limitations: 
-------------------------------------------------------------------------------------
The authors (Rama and Dan) recognize many of the limitations. 
They will be tabulated later.
*/



/*
There are three scanners in the ROSE frontend. One for C/C++, two for fixed and free 
format FORTRAN languages. So that the flex generated C code and definitions (Rose_Fortran_fixed_format_lex, 
Rose_Fortran_fixed_format_text, etc.) of these does not interfere with any other, we are adding 
     the prefix 'Rose_Fortran_C_Cxx_'        for the C/C++ scanner,
     the prefix 'Rose_Fortran_Fixed_Format_' for the Fixed Format FORTRAN scanner and
     the prefix 'Rose_Fortran_Free_Format_'  for the Free Format FORTRAN scanner
by using the -P<prefix options>
Note: We could have done this in an arguably more elegant way by changing the individual uses of these 
functions/variables.
*/


#define Rose_Fortran_fixed_format_text Rose_Fortran_fixed_format_text
#define Rose_Fortran_fixed_format_lex Rose_Fortran_fixed_format_lex 

#include "sage3basic.h"
#include <iostream>
#include <stdio.h>
#include <ctype.h>
#include <string>
#include <list>



using namespace std;

// namespace Rose_Fortran_fixed_format_namespace {

#include "general_token_defs.h"
#include "./rose_fortran_token_maps.h"

#if 0
// These are now defined in general_defs.h
struct file_pos_info
{
    int line_num;
    int column_num;
};

struct stream_element
{ 
    struct token_element * p_tok_elem;
    struct file_pos_info beginning_fpi;
    struct file_pos_info ending_fpi;
};
#endif


LexTokenStreamTypePointer ROSE_Fortran_fixed_format_token_stream_pointer = NULL;
typedef LexTokenStreamType::iterator SE_ITR;

static struct file_pos_info curr_beginning;

//Operators
//This includes the "new" as well as the "old" operators
static token_element ROSE_Fortran_Operator_map[] = 
{
      {"+",       SgToken::FORTRAN_INTRINSIC_PLUS},            /*   GFORTRAN/G95 equivalent is INTRINSIC_PLUS      */
      {"-",       SgToken::FORTRAN_INTRINSIC_MINUS},           /*   GFORTRAN/G95 equivalent is INTRINSIC_MINUS     */
      {"**",      SgToken::FORTRAN_INTRINSIC_POWER},           /*   GFORTRAN/G95 equivalent is INTRINSIC_POWER     */
      {"//",      SgToken::FORTRAN_INTRINSIC_CONCAT},          /*   GFORTRAN/G95 equivalent is INTRINSIC_CONCAT    */
      {"*",       SgToken::FORTRAN_INTRINSIC_TIMES},           /*   GFORTRAN/G95 equivalent is INTRINSIC_TIMES     */
      {"/",       SgToken::FORTRAN_INTRINSIC_DIVIDE},          /*   GFORTRAN/G95 equivalent is INTRINSIC_DIVIDE    */
      {".and.",   SgToken::FORTRAN_INTRINSIC_AND},             /*   GFORTRAN/G95 equivalent is INTRINSIC_AND       */
      {".or.",    SgToken::FORTRAN_INTRINSIC_OR},              /*   GFORTRAN/G95 equivalent is INTRINSIC_OR        */
      {".eqv.",   SgToken::FORTRAN_INTRINSIC_EQV},             /*   GFORTRAN/G95 equivalent is INTRINSIC_EQV       */
      {".neqv.",  SgToken::FORTRAN_INTRINSIC_NEQV},            /*   GFORTRAN/G95 equivalent is INTRINSIC_NEQV      */
      //{".true.",  SgToken::FORTRAN_TRUE},            /*   GFORTRAN/G95 equivalent is INTRINSIC_NEQV      */
      //{".false.",  SgToken::FORTRAN_FALSE},            /*   GFORTRAN/G95 equivalent is INTRINSIC_NEQV      */
      {"==",      SgToken::FORTRAN_INTRINSIC_EQ},              /*   GFORTRAN/G95 equivalent is INTRINSIC_EQ        */
      {"/=",      SgToken::FORTRAN_INTRINSIC_NE},              /*   GFORTRAN/G95 equivalent is INTRINSIC_NE        */
      {">=",      SgToken::FORTRAN_INTRINSIC_GE},              /*   GFORTRAN/G95 equivalent is INTRINSIC_GE        */
      {"<=",      SgToken::FORTRAN_INTRINSIC_LE},              /*   GFORTRAN/G95 equivalent is INTRINSIC_LE        */
      {"<",       SgToken::FORTRAN_INTRINSIC_LT},              /*   GFORTRAN/G95 equivalent is INTRINSIC_LT        */
      {">",       SgToken::FORTRAN_INTRINSIC_GT},              /*   GFORTRAN/G95 equivalent is INTRINSIC_GT        */
      {".not.",   SgToken::FORTRAN_INTRINSIC_NOT},             /*   GFORTRAN/G95 equivalent is INTRINSIC_NOT       */
      {".eq.",    SgToken::FORTRAN_INTRINSIC_OLDEQ},           /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDEQ     */
      {".ne.",    SgToken::FORTRAN_INTRINSIC_OLDNE},           /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDNE     */
      {".ge.",    SgToken::FORTRAN_INTRINSIC_OLDGE},           /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDGE     */
      {".le.",    SgToken::FORTRAN_INTRINSIC_OLDLE},           /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDLE     */
      {".lt.",    SgToken::FORTRAN_INTRINSIC_OLDLT},           /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDLT     */
      {".gt.",    SgToken::FORTRAN_INTRINSIC_OLDGT}            /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDGT     */
};


//We know that this is a magic number. 
//We also know how to fix it.
#define NUM_KEYWORDS 67

//returns -1 if the string is not a keyword
//otherwise returns the token ID
static int identify_if_keyword(string str)
{
    //In FORTRAN, the identifiers are case insensitive.
    //So, variable 'ArEa' is the same as 'aReA'

    string lowered_str;
    for(unsigned int i = 0; i < strlen(str.c_str()); i++)
    {
        lowered_str += tolower(char((str.c_str())[i]));
    }

    //printf("got called with %s. Converted to %s\n", str.c_str(), lowered_str.c_str());
    for(int i = 0; i < NUM_KEYWORDS; i++)
    {
        if(lowered_str == SgToken::ROSE_Fortran_keyword_map[i].token_lexeme)
        {
            return (SgToken::ROSE_Fortran_keyword_map[i].token_id);
        }
    }
    return -1;
}

//We know that this is a magic number. 
//It will be fixed.
#define NUM_OPERATORS 23

#if 0
static int identify_operator_matching(string str)
{
    //printf("got called with %s. \n", str.c_str());

    for(int i = 0; i < NUM_OPERATORS; i++)
    {
        if(str == ROSE_Fortran_Operator_map[i].token_lexeme)
        {
            return (ROSE_Fortran_Operator_map[i].token_id);
        }
    }
    return -1;
}
#endif

static void process_operator(string op) 
{

}


//This could be handled in a fashion better than a MACRO, but for now this will work
/*
#define process_operator(op) {  \
    token_element *p_tok_elem = new token_element;  \
    p_tok_elem->token_lexeme = Rose_Fortran_fixed_format_text; \
    int rr = identify_if_keyword(Rose_Fortran_fixed_format_text); \
    stream_element *p_se = new stream_element;  \
    p_se->p_tok_elem = p_tok_elem; \
    p_se->beginning_fpi.line_num = line_no; \
    p_se->beginning_fpi.column_num = column_no; \
    column_no+=strlen(Rose_Fortran_fixed_format_text); \
    p_se->ending_fpi.line_num = line_no; \
    p_se->ending_fpi.column_num = column_no-1; \
    ROSE_Fortran_fixed_format_token_stream.push_back(p_se);  \
} \

*/

static void process_operator(string op);

#define YY_NO_UNPUT

// static int i = 0;
static std::string currentBuffer;

// DQ (4/19/2006):
// Store the name of the current file so that we can generate Sg_File_Info objects
// for each comment.  Later we might want starting and ending fileInfo for each 
// comments and CPP directive.
static std::string globalFileName;

#define FORTRAN_LEXICAL_SUPPORT 0

//struct matching_construct
// static int braces_no=0;
// static int brace_counting_on=0;

// static int topbracestack();
// static void pushbracestack(int);
// static int popbracestack();
// static bool isemptystack();

// static int num_of_newlines(char*);
// static int adjust_new_line_counter();

using namespace std;



#line 774 "preproc-fortran-fixed.cc"

#define INITIAL 0
#define NORMAL 1
#define FORT_COMMENT 2
#define STRING_LIT 3
#define MACRO 4
#define REST_OF_LINE 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int Rose_Fortran_fixed_format_lex_destroy (void );

int Rose_Fortran_fixed_format_get_debug (void );

void Rose_Fortran_fixed_format_set_debug (int debug_flag  );

YY_EXTRA_TYPE Rose_Fortran_fixed_format_get_extra (void );

void Rose_Fortran_fixed_format_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *Rose_Fortran_fixed_format_get_in (void );

void Rose_Fortran_fixed_format_set_in  (FILE * in_str  );

FILE *Rose_Fortran_fixed_format_get_out (void );

void Rose_Fortran_fixed_format_set_out  (FILE * out_str  );

int Rose_Fortran_fixed_format_get_leng (void );

char *Rose_Fortran_fixed_format_get_text (void );

int Rose_Fortran_fixed_format_get_lineno (void );

void Rose_Fortran_fixed_format_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int Rose_Fortran_fixed_format_wrap (void );
#else
extern int Rose_Fortran_fixed_format_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( Rose_Fortran_fixed_format_text, Rose_Fortran_fixed_format_leng, 1, Rose_Fortran_fixed_format_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( Rose_Fortran_fixed_format_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( Rose_Fortran_fixed_format_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, Rose_Fortran_fixed_format_in))==0 && ferror(Rose_Fortran_fixed_format_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(Rose_Fortran_fixed_format_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int Rose_Fortran_fixed_format_lex (void);

#define YY_DECL int Rose_Fortran_fixed_format_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after Rose_Fortran_fixed_format_text and Rose_Fortran_fixed_format_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( Rose_Fortran_fixed_format_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(Rose_Fortran_fixed_format_text[Rose_Fortran_fixed_format_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 244 "preproc-fortran-fixed.ll"



#undef Rose_Fortran_Fixed_Format_wrap
          int line_no = 1;
          int start_line_no = line_no;
          int column_no = 1;
          int start_column_no = column_no;
          BEGIN NORMAL;

#line 975 "preproc-fortran-fixed.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! Rose_Fortran_fixed_format_in )
			Rose_Fortran_fixed_format_in = stdin;

		if ( ! Rose_Fortran_fixed_format_out )
			Rose_Fortran_fixed_format_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			Rose_Fortran_fixed_format_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				Rose_Fortran_fixed_format__create_buffer(Rose_Fortran_fixed_format_in,YY_BUF_SIZE );
		}

		Rose_Fortran_fixed_format__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of Rose_Fortran_fixed_format_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 97 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 150 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 254 "preproc-fortran-fixed.ll"
{
                    start_line_no=line_no; 
                    start_column_no=column_no; 
                    curr_beginning.line_num = line_no;
                    curr_beginning.column_num = column_no;
                    column_no+=1; 
                    currentBuffer = Rose_Fortran_fixed_format_text; 
                 // printf("The comment string is as follows: %s\n", Rose_Fortran_fixed_format_text);
                 // BEGIN FORT_COMMENT; 
               }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 264 "preproc-fortran-fixed.ll"
{
                    start_line_no=line_no; 
                    start_column_no=column_no; 
                    curr_beginning.line_num = line_no;
                    curr_beginning.column_num = column_no;
                    column_no+=1; 
                    currentBuffer = Rose_Fortran_fixed_format_text; 
                 // printf("The non comment line is %s\n", Rose_Fortran_fixed_format_text);
                    BEGIN REST_OF_LINE;
                 // BEGIN FORT_COMMENT; 
               }
	YY_BREAK
/*
<REST_OF_LINE>"!"    {
                    start_line_no=line_no; 
                    start_column_no=column_no; 
                    curr_beginning.line_num = line_no;
                    curr_beginning.column_num = column_no;
                    column_no+=1; 
                    currentBuffer = Rose_Fortran_fixed_format_text; 
                    BEGIN FORT_COMMENT; 
               }
<REST_OF_LINE>"'"    {
                    //This begins a STRING LITERAL
                    start_line_no=line_no; 
                    start_column_no=column_no; 
                    curr_beginning.line_num = line_no;
                    curr_beginning.column_num = column_no;
                    column_no+=1; 
                    currentBuffer = Rose_Fortran_fixed_format_text; 
                    BEGIN STRING_LIT;
               }
<REST_OF_LINE>\n                     { printf("in REST_OF_LINE\n"); line_no++; column_no=1; BEGIN NORMAL; } 
                                    */
case 3:
YY_RULE_SETUP
#line 297 "preproc-fortran-fixed.ll"
{ 
                                          
                                          token_element *p_tok_elem = new token_element; 
                                          p_tok_elem->token_lexeme = Rose_Fortran_fixed_format_text; 

                                          int is_keyword = identify_if_keyword(Rose_Fortran_fixed_format_text); 
                                          //found a keyword?
                                          if(is_keyword != -1)
                                          {
                                              //printf("%s is a keyword\n", Rose_Fortran_fixed_format_text); 
                                              p_tok_elem->token_id = is_keyword; 
                                          }
                                          else
                                          {
                                              //printf("%s is not a keyword\n", Rose_Fortran_fixed_format_text); 
                                              p_tok_elem->token_id = SgToken::FORTRAN_IDENTIFIER;
                                          }
                                          
                                          stream_element *p_se = new stream_element; 
                                          p_se->p_tok_elem = p_tok_elem; 
                                          
                                          p_se->beginning_fpi.line_num = line_no;
                                          p_se->beginning_fpi.column_num = column_no;
                                          column_no+=strlen(Rose_Fortran_fixed_format_text); 
                                          p_se->ending_fpi.line_num = line_no; 
                                          p_se->ending_fpi.column_num = column_no-1; 
                                          //push the element onto the token stream
                                          ROSE_Fortran_fixed_format_token_stream_pointer->push_back(p_se); 
                                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 326 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 327 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 328 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 329 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 330 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 331 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 332 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 333 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 334 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 335 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 336 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 337 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 338 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 339 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 340 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 341 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 342 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 343 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 344 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 345 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 346 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 347 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 348 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 349 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);} 
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 350 "preproc-fortran-fixed.ll"
{process_operator(Rose_Fortran_fixed_format_text);column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 351 "preproc-fortran-fixed.ll"
{//Do stuff to store semi colons
                          //process_operator(Rose_Fortran_fixed_format_text);
                           column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 354 "preproc-fortran-fixed.ll"
{//Do stuff to store commas
                          //process_operator(Rose_Fortran_fixed_format_text);
                           column_no+=strlen(Rose_Fortran_fixed_format_text);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 357 "preproc-fortran-fixed.ll"
{//Do stuff to store colons
                           //process_operator(Rose_Fortran_fixed_format_text);
                           column_no+=strlen(Rose_Fortran_fixed_format_text);
}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 361 "preproc-fortran-fixed.ll"
{
                                       //According to the STD, a line which has whitespaces is a comment line
                                       //We will store it
                                       printf("came across a blank line\n");
                                       currentBuffer += Rose_Fortran_fixed_format_text;

                                       token_element *p_tok_elem = new token_element;
                                       p_tok_elem->token_lexeme = currentBuffer;
                                       p_tok_elem->token_id = SgToken::FORTRAN_COMMENTS;
           
                                       stream_element *p_se = new stream_element;
                                       p_se->p_tok_elem = p_tok_elem;

                                       p_se->beginning_fpi.line_num = line_no; 
                                       p_se->beginning_fpi.column_num = column_no;

                                       p_se->ending_fpi.line_num = line_no;
                                       p_se->ending_fpi.column_num = column_no;
                                       ROSE_Fortran_fixed_format_token_stream_pointer->push_back(p_se);

                                       line_no++; column_no=1;
                                  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 383 "preproc-fortran-fixed.ll"
{
                        // printf("in <normal>.\n");
                           column_no++;
}
	YY_BREAK
/*
<STRING_LIT>[^']        {
                            column_no++; 
                            currentBuffer += Rose_Fortran_fixed_format_text;
                        }
<STRING_LIT>''          {
                            printf("Fixed format\n");
                            column_no+=2; 
                            currentBuffer += Rose_Fortran_fixed_format_text;
                        }
<STRING_LIT>"'"         { 
                            //This ends the STRING LITERALS
                            currentBuffer += Rose_Fortran_fixed_format_text;
                            //printf("\nthe literal string is %s\n", currentBuffer.c_str());
                            //printf("ending in (%d, %d) \n", line_no, column_no);

                            adjust_new_line_counter();

                            token_element *p_tok_elem = new token_element;
                            p_tok_elem->token_lexeme = currentBuffer;
                            p_tok_elem->token_id = SgToken::FORTRAN_STRING_LITERALS;

                            stream_element *p_se = new stream_element;
                            p_se->p_tok_elem = p_tok_elem;

                            p_se->beginning_fpi = curr_beginning;
                            p_se->ending_fpi.line_num = line_no;
                            p_se->ending_fpi.column_num = column_no;

                            ROSE_Fortran_fixed_format_token_stream.push_back(p_se);

                            column_no++; 
                            BEGIN NORMAL;
                       }
                      */
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 423 "preproc-fortran-fixed.ll"
{ 
                            //This is also a comment
                            currentBuffer += Rose_Fortran_fixed_format_text;
                            //printf("this ends the comment string is %s", currentBuffer.c_str());

                            /* This was commented out by Rama, as it should be, since it does not work...
                            token_element *p_tok_elem = new token_element;
                            p_tok_elem->token_lexeme = currentBuffer;
                            p_tok_elem->token_id = SgToken::FORTRAN_COMMENTS;

                            stream_element *p_se = new stream_element;
                            p_se->p_tok_elem = p_tok_elem;
                            p_se->beginning_fpi = curr_beginning;
                            p_se->ending_fpi.line_num = line_no;
                            p_se->ending_fpi.column_num = column_no;
                            ROSE_Fortran_fixed_format_token_stream_pointer->push_back(p_se);
                            This was comment out by Rama */

                            line_no++; column_no=1; 
                            BEGIN NORMAL;
                      }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 444 "preproc-fortran-fixed.ll"
{ 
                            column_no++; 
                            currentBuffer += Rose_Fortran_fixed_format_text;
                      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 448 "preproc-fortran-fixed.ll"
ECHO;
	YY_BREAK
#line 1401 "preproc-fortran-fixed.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NORMAL):
case YY_STATE_EOF(FORT_COMMENT):
case YY_STATE_EOF(STRING_LIT):
case YY_STATE_EOF(MACRO):
case YY_STATE_EOF(REST_OF_LINE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed Rose_Fortran_fixed_format_in at a new source and called
			 * Rose_Fortran_fixed_format_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = Rose_Fortran_fixed_format_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( Rose_Fortran_fixed_format_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * Rose_Fortran_fixed_format_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of Rose_Fortran_fixed_format_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Rose_Fortran_fixed_format_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			Rose_Fortran_fixed_format_restart(Rose_Fortran_fixed_format_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Rose_Fortran_fixed_format_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 97 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 97 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 96);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up Rose_Fortran_fixed_format_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					Rose_Fortran_fixed_format_restart(Rose_Fortran_fixed_format_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( Rose_Fortran_fixed_format_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve Rose_Fortran_fixed_format_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void Rose_Fortran_fixed_format_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        Rose_Fortran_fixed_format_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            Rose_Fortran_fixed_format__create_buffer(Rose_Fortran_fixed_format_in,YY_BUF_SIZE );
	}

	Rose_Fortran_fixed_format__init_buffer(YY_CURRENT_BUFFER,input_file );
	Rose_Fortran_fixed_format__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void Rose_Fortran_fixed_format__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		Rose_Fortran_fixed_format_pop_buffer_state();
	 *		Rose_Fortran_fixed_format_push_buffer_state(new_buffer);
     */
	Rose_Fortran_fixed_format_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	Rose_Fortran_fixed_format__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (Rose_Fortran_fixed_format_wrap()) processing, but the only time this flag
	 * is looked at is after Rose_Fortran_fixed_format_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void Rose_Fortran_fixed_format__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	Rose_Fortran_fixed_format_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE Rose_Fortran_fixed_format__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Rose_Fortran_fixed_format_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in Rose_Fortran_fixed_format__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Rose_Fortran_fixed_format_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in Rose_Fortran_fixed_format__create_buffer()" );

	b->yy_is_our_buffer = 1;

	Rose_Fortran_fixed_format__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with Rose_Fortran_fixed_format__create_buffer()
 * 
 */
    void Rose_Fortran_fixed_format__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Rose_Fortran_fixed_format_free((void *) b->yy_ch_buf  );

	Rose_Fortran_fixed_format_free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a Rose_Fortran_fixed_format_restart() or at EOF.
 */
    static void Rose_Fortran_fixed_format__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	Rose_Fortran_fixed_format__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then Rose_Fortran_fixed_format__init_buffer was _probably_
     * called from Rose_Fortran_fixed_format_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void Rose_Fortran_fixed_format__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		Rose_Fortran_fixed_format__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void Rose_Fortran_fixed_format_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	Rose_Fortran_fixed_format_ensure_buffer_stack();

	/* This block is copied from Rose_Fortran_fixed_format__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from Rose_Fortran_fixed_format__switch_to_buffer. */
	Rose_Fortran_fixed_format__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void Rose_Fortran_fixed_format_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	Rose_Fortran_fixed_format__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		Rose_Fortran_fixed_format__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void Rose_Fortran_fixed_format_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Rose_Fortran_fixed_format_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in Rose_Fortran_fixed_format_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Rose_Fortran_fixed_format_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in Rose_Fortran_fixed_format_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE Rose_Fortran_fixed_format__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) Rose_Fortran_fixed_format_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in Rose_Fortran_fixed_format__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	Rose_Fortran_fixed_format__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to Rose_Fortran_fixed_format_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       Rose_Fortran_fixed_format__scan_bytes() instead.
 */
YY_BUFFER_STATE Rose_Fortran_fixed_format__scan_string (yyconst char * yystr )
{
    
	return Rose_Fortran_fixed_format__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to Rose_Fortran_fixed_format_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE Rose_Fortran_fixed_format__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) Rose_Fortran_fixed_format_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in Rose_Fortran_fixed_format__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = Rose_Fortran_fixed_format__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in Rose_Fortran_fixed_format__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up Rose_Fortran_fixed_format_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		Rose_Fortran_fixed_format_text[Rose_Fortran_fixed_format_leng] = (yy_hold_char); \
		(yy_c_buf_p) = Rose_Fortran_fixed_format_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		Rose_Fortran_fixed_format_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int Rose_Fortran_fixed_format_get_lineno  (void)
{
        
    return Rose_Fortran_fixed_format_lineno;
}

/** Get the input stream.
 * 
 */
FILE *Rose_Fortran_fixed_format_get_in  (void)
{
        return Rose_Fortran_fixed_format_in;
}

/** Get the output stream.
 * 
 */
FILE *Rose_Fortran_fixed_format_get_out  (void)
{
        return Rose_Fortran_fixed_format_out;
}

/** Get the length of the current token.
 * 
 */
int Rose_Fortran_fixed_format_get_leng  (void)
{
        return Rose_Fortran_fixed_format_leng;
}

/** Get the current token.
 * 
 */

char *Rose_Fortran_fixed_format_get_text  (void)
{
        return Rose_Fortran_fixed_format_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void Rose_Fortran_fixed_format_set_lineno (int  line_number )
{
    
    Rose_Fortran_fixed_format_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see Rose_Fortran_fixed_format__switch_to_buffer
 */
void Rose_Fortran_fixed_format_set_in (FILE *  in_str )
{
        Rose_Fortran_fixed_format_in = in_str ;
}

void Rose_Fortran_fixed_format_set_out (FILE *  out_str )
{
        Rose_Fortran_fixed_format_out = out_str ;
}

int Rose_Fortran_fixed_format_get_debug  (void)
{
        return Rose_Fortran_fixed_format__flex_debug;
}

void Rose_Fortran_fixed_format_set_debug (int  bdebug )
{
        Rose_Fortran_fixed_format__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from Rose_Fortran_fixed_format_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    Rose_Fortran_fixed_format_in = stdin;
    Rose_Fortran_fixed_format_out = stdout;
#else
    Rose_Fortran_fixed_format_in = (FILE *) 0;
    Rose_Fortran_fixed_format_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * Rose_Fortran_fixed_format_lex_init()
     */
    return 0;
}

/* Rose_Fortran_fixed_format_lex_destroy is for both reentrant and non-reentrant scanners. */
int Rose_Fortran_fixed_format_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		Rose_Fortran_fixed_format__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		Rose_Fortran_fixed_format_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	Rose_Fortran_fixed_format_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * Rose_Fortran_fixed_format_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Rose_Fortran_fixed_format_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Rose_Fortran_fixed_format_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Rose_Fortran_fixed_format_free (void * ptr )
{
	free( (char *) ptr );	/* see Rose_Fortran_fixed_format_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 448 "preproc-fortran-fixed.ll"



// static const int maxstacksize=500;
// static int bracestack[maxstacksize];

// static int top=0;
// static void pushbracestack(int brace_no) { bracestack[top++]=brace_no; }
// static int topbracestack() { if(top) return bracestack[top-1]; else return -1; }
// static int popbracestack() { return bracestack[--top]; }
// static bool isemptystack() { return top==0; }

#if 0
static int adjust_new_line_counter()
{
    return 1;
}
#endif
#if 0
static int num_of_newlines(char* s)
{
     int num = 0;
     while(*s != '\0')
        {
          if(*s == '\n')
               num++;
          s++;
        }
     return num;
}
#endif

// int getFortranFixedFormatPreprocessorDirectives( std::string fileName )
LexTokenStreamTypePointer
getFortranFixedFormatPreprocessorDirectives( std::string fileName )
   {
     FILE *fp = NULL; 
    
     ROSE_Fortran_fixed_format_token_stream_pointer = new LexTokenStreamType;
     assert(ROSE_Fortran_fixed_format_token_stream_pointer != NULL);

     globalFileName = fileName;

  // printf ("Opening Fixed Format Fortran file: %s \n",fileName.c_str());

     if (fileName.empty() == false) 
        {
          fp = fopen(fileName.c_str(), "r"); 
          if (fp) 
             {
            // DQ (1/22/2008): I output a comment here to detect where extra LF are output to either cout or cerr as part of the lex phase.
            // I have not been able to figure out why or where these are output yet (see test2007_189.f for the worst case of this).
            // printf ("In getFortranFixedFormatPreprocessorDirectives(): opened file %s for token stream processing \n",fileName.c_str()); 

            // exit(0);
               Rose_Fortran_fixed_format_in = fp; 
               Rose_Fortran_fixed_format_lex(); 
            /*
               char s[100];
               while(fgets(s, 100, fp))
                  {
                    if((s[0] == 'C') || (s[0] == 'c'))
                       {
                         printf("The comment that is detected is %s\n", s);
                       }
                      else
                       { 
                         printf("calling the scanner on string '%s'\n", s); 
                         Rose_Fortran_fixed_format__scan_string(s);
                         Rose_Fortran_fixed_format__delete_buffer(YY_CURRENT_BUFFER);
                       }
                 // printf("Not calling the Rose_Fortran_fixed_format_lex()\n");
                 // Rose_Fortran_fixed_format__scan_bytes(s,6);
                  }
            */
               fclose(fp);
            // printf ("In getFortranFixedFormatPreprocessorDirectives(): closed file %s for token stream processing \n",fileName.c_str()); 
             }
            else 
             {
               printf ("Error: can't find the requested file (%s) \n",fileName.c_str()); 
               assert(false);
             }
        }

     return ROSE_Fortran_fixed_format_token_stream_pointer;
   }

static void clean_up_stream()
{

    //
    //This "rudimentary" post processing of the token stream helps in correct identification of keywords.

    //int e g e r 
    //is a sequence of identifiers
    //recognize the token_ids and map them.
    //If the tokens are 


#if 0
    for(SE_ITR ii = ROSE_Fortran_fixed_format_token_stream.begin(); ii != ROSE_Fortran_fixed_format_token_stream.end(); ii++)
    {
        if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_COMMENTS)
        { 
            cout<<"## COMMENT -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        }
        else if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_STRING_LITERALS)
        {
            cout<<"## STRING_LIT -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        }
        else if(((*ii)->p_tok_elem->token_id > 2) && ((*ii)->p_tok_elem->token_id < 67))
        {
            cout<<"## KEYWORD -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        } 
        else if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_IDENTIFIER)
        {
            cout<<"## IDENTIFIER -->";
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        } 
        else
        {
            cout<<"## ????Unrecognized element in the token stream##"; 
        }
        cout<<"\n"; 
 
    }
#endif
}

#if 0
int main(int argc, char *argv[])
{
    if(argc == 1) 
    {   //The "default" for now
        getFortranFixedFormatPreprocessorDirectives("triangle-fixed.f77");
    }
    else
    {
        getFortranFixedFormatPreprocessorDirectives(argv[1]);
    }

    clean_up_stream();

    printf("*****************here is the stream *************\n"); 
    for(SE_ITR ii = ROSE_Fortran_fixed_format_token_stream.begin(); ii != ROSE_Fortran_fixed_format_token_stream.end(); ii++)
    {
        if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_COMMENTS)
        { 
            cout<<"## COMMENT -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        }
        else if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_STRING_LITERALS)
        {
            cout<<"## STRING_LIT -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        }
        else if(((*ii)->p_tok_elem->token_id > 2) && ((*ii)->p_tok_elem->token_id < 67))
        {
            cout<<"## KEYWORD -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        } 
        else if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_IDENTIFIER)
        {
            cout<<"## IDENTIFIER -->";
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        } 
        else
        {
            cout<<"## ????Unrecognized element in the token stream##"; 
        }
        cout<<"\n"; 
 
    }
    printf("*****************the stream is over*************\n"); 

    return 1;
}
#endif

// }//This ends the namespace Rose_Fortran_fixed_format_namespace


