#line 2 "lex.ann.c"

#line 4 "lex.ann.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer ann_create_buffer
#define yy_delete_buffer ann_delete_buffer
#define yy_flex_debug ann_flex_debug
#define yy_init_buffer ann_init_buffer
#define yy_flush_buffer ann_flush_buffer
#define yy_load_buffer_state ann_load_buffer_state
#define yy_switch_to_buffer ann_switch_to_buffer
#define yyin annin
#define yyleng annleng
#define yylex annlex
#define yylineno annlineno
#define yyout annout
#define yyrestart annrestart
#define yytext anntext
#define yywrap annwrap
#define yyalloc annalloc
#define yyrealloc annrealloc
#define yyfree annfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE annrestart(annin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int annleng;

extern FILE *annin, *annout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE annlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-annlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < annleng; ++yyl )\
                    if ( anntext[yyl] == '\n' )\
                        --annlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up anntext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up anntext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via annrestart()), so that the user can continue scanning by
	 * just pointing annin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when anntext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int annleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow annwrap()'s to do buffer switches
 * instead of setting up a fresh annin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void annrestart (FILE *input_file  );
void ann_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE ann_create_buffer (FILE *file,int size  );
void ann_delete_buffer (YY_BUFFER_STATE b  );
void ann_flush_buffer (YY_BUFFER_STATE b  );
void annpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void annpop_buffer_state (void );

static void annensure_buffer_stack (void );
static void ann_load_buffer_state (void );
static void ann_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER ann_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE ann_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE ann_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE ann_scan_bytes (yyconst char *bytes,int len  );

void *annalloc (yy_size_t  );
void *annrealloc (void *,yy_size_t  );
void annfree (void *  );

#define yy_new_buffer ann_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        annensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ann_create_buffer(annin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        annensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ann_create_buffer(annin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define annwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *annin = (FILE *) 0, *annout = (FILE *) 0;

typedef int yy_state_type;

extern int annlineno;

int annlineno = 1;

extern char *anntext;
#define yytext_ptr anntext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up anntext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	annleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 79
#define YY_END_OF_BUFFER 80
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[411] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       80,   10,    7,    8,   10,   10,    7,   10,   73,    7,
       73,   73,   73,   73,   73,   73,   73,   55,   73,   73,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   73,   73,    7,   73,   79,
        7,   79,   20,   79,   79,    7,   79,   78,    7,   78,
       77,   77,   77,   77,    6,    7,   78,    7,    3,    0,
        7,    0,    0,    0,    0,   50,   48,   60,    0,   56,
       52,   51,   53,    0,    0,    0,    0,    0,    0,   71,
        0,   71,   71,   71,   71,   71,   71,   71,   71,   25,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,    0,    0,   49,   20,    5,    4,   77,   77,
       77,   77,    0,    9,    0,    1,    0,   45,   57,    0,
        0,    0,    0,    0,    0,    0,    0,   72,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
        0,   71,   71,   71,   44,   71,   71,   71,   71,   71,
       71,    0,    0,   77,   77,   77,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   54,    0,    0,
        0,    0,    0,    0,   71,   71,   71,   71,   71,   71,

       71,   71,    0,   61,    0,    0,   74,   75,   76,    0,
        0,    0,    0,    0,    0,   34,    0,    0,   71,   71,
       71,   71,   71,   71,   71,   71,   59,   71,   71,   71,
       30,    0,    0,    0,    0,    0,    0,   69,    0,   71,
        0,   71,   71,   71,   71,   71,   71,   71,    0,    0,
        0,    0,    2,   32,    0,    0,    0,    0,    0,   35,
       21,   71,    0,   71,   46,   71,   71,   18,   16,   71,
       63,    0,    0,    0,    0,    0,    0,    0,    0,   22,
        0,   71,   71,   71,   71,   71,   71,   58,    0,    0,
        0,   33,    0,   31,    0,    0,   23,    0,   24,   71,

       19,   71,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   71,   43,   47,   71,   71,   71,   70,    0,    0,
        0,    0,   37,   27,   71,   71,    0,    0,    0,    0,
       41,    0,    0,    0,    0,   42,   71,   11,    0,    0,
        0,    0,   38,    0,   71,   14,    0,    0,   29,    0,
        0,   40,    0,    0,   17,    0,    0,    0,    0,    0,
       15,   39,   28,    0,   26,    0,    0,    0,    0,    0,
        0,   36,    0,    0,    0,    0,    0,    0,   64,    0,
       12,    0,   62,    0,    0,    0,   68,   13,    0,    0,
        0,    0,    0,    0,    0,   65,    0,    0,    0,    0,

        0,    0,    0,    0,   66,    0,    0,    0,   67,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    7,    8,    9,    1,    1,
        1,    1,   10,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    1,    1,   15,
       16,   17,   18,   19,   20,   20,   20,   20,   20,   20,
       20,   20,   21,   20,   20,   20,   20,   20,   22,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
        1,    1,    1,    1,   23,    1,   24,   25,   26,   27,

       28,   29,   30,   31,   32,   20,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[52] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    2,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[419] =
    {   0,
        0,    3,   16,    8,   67,    0,  117,  125,  176,  120,
      576,  577,  121,  577,  526,  561,  131,  132,  577,  137,
      557,  523,  562,  560,  558,  555,  129,  551,  550,  123,
        0,  552,  117,  527,  122,  119,  529,  128,  204,  534,
      525,  118,  532,  531,  527,  124,  507,  168,  228,  577,
      158,  543,    0,  506,  546,  169,  229,  577,  159,  540,
        0,  506,  509,  503,  577,  230,  231,  233,  577,  546,
      242,  236,  237,  545,  515,  577,  577,  577,  529,  535,
      577,  577,  577,  220,  228,  507,  499,  505,  501,    0,
      518,  513,  514,  494,  224,  216,  512,  495,  497,    0,

      227,  522,  485,  504,  489,  484,  505,  485,  489,  487,
      482,  495,  486,  485,  577,    0,  577,  577,    0,  482,
      484,  480,  514,  577,  513,  577,  479,  577,  577,  472,
      468,  486,  482,  474,  481,  468,  483,  577,  478,  471,
      470,  479,  474,  471,  476,  474,  461,  472,  454,  463,
      249,  483,  461,  450,    0,  463,  448,  234,  232,  478,
      452,  445,  454,  445,  442,  455,  454,  453,  456,  446,
      441,  448,  436,  430,  448,  432,  425,  444,  427,  427,
      432,  442,  432,  425,  440,  431,  426,  577,  443,  102,
      240,  436,  408,  420,  428,  445,  232,  427,  426,  425,

      428,  411,  426,    0,  421,  411,    0,    0,    0,  444,
      406,  398,  399,  403,  410,  577,  417,  412,  398,  390,
      426,  402,  407,  397,  399,  404,    0,  397,  406,  401,
      577,  396,  245,  399,  388,  401,  389,  577,  383,  375,
      383,  378,  387,  378,  390,  376,  389,  372,  386,  372,
      375,  407,  577,  577,  368,  384,  379,  379,  365,  577,
        0,  376,  378,  360,    0,  360,  372,    0,    0,  365,
        0,  374,  369,  359,  360,  352,  367,  364,  354,    0,
      350,  349,  346,  351,  343,  343,  356,    0,  356,  341,
      370,  577,  340,  577,  351,  351,    0,  349,    0,  334,

        0,  341,  333,  349,  331,  343,  323,  327,  344,  329,
      329,  318,    0,    0,  324,  316,  351,  577,  333,  248,
      333,  323,  577,  577,  326,  310,  319,  314,  312,  317,
      577,  318,  310,  322,  311,    0,  320,    0,  302,  320,
      306,  316,  577,  317,  316,    0,  312,  298,  577,  297,
      291,  577,  297,  308,    0,  303,  292,  290,  290,  303,
        0,  577,  577,  319,  577,  287,  288,  285,  315,  293,
      273,  577,  286,  275,  279,  289,  253,  275,  577,  289,
      577,  270,  577,  277,  287,  290,  577,  577,  270,  270,
      277,  278,  258,  269,  252,  577,  259,  269,  266,  257,

      260,  259,  234,  248,  577,  257,  254,  213,  577,  577,
      298,  300,  227,   13,   10,  302,  304,  306
    } ;

static yyconst flex_int16_t yy_def[419] =
    {   0,
      411,  411,  410,    3,  410,    5,  412,  412,  410,    9,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  410,  410,  410,  410,  410,
      410,  410,  414,  410,  410,  410,  410,  410,  410,  410,
      415,  415,  415,  415,  410,  410,  410,  410,  410,  416,
      410,  410,  410,  417,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  413,
      410,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  410,  410,  410,  414,  410,  410,  415,  415,
      415,  415,  416,  410,  417,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      410,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  410,  410,  415,  415,  415,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  410,  410,  410,
      410,  410,  410,  410,  413,  413,  413,  413,  413,  413,

      413,  413,  410,  413,  410,  410,  415,  415,  415,  418,
      410,  410,  410,  410,  410,  410,  410,  410,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  413,
      410,  413,  413,  413,  413,  413,  413,  413,  410,  410,
      410,  418,  410,  410,  410,  410,  410,  410,  410,  410,
      413,  413,  410,  413,  413,  413,  413,  413,  413,  413,
      413,  410,  410,  410,  410,  410,  410,  410,  410,  413,
      410,  413,  413,  413,  413,  413,  413,  413,  410,  410,
      410,  410,  410,  410,  410,  410,  413,  410,  413,  413,

      413,  413,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  413,  413,  413,  413,  413,  413,  410,  410,  410,
      410,  410,  410,  410,  413,  413,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  413,  413,  413,  410,  410,
      410,  410,  410,  410,  413,  413,  410,  410,  410,  410,
      410,  410,  410,  410,  413,  410,  410,  410,  410,  410,
      413,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,    0,
      410,  410,  410,  410,  410,  410,  410,  410
    } ;

static yyconst flex_int16_t yy_nxt[629] =
    {   0,
      410,   13,   14,   13,   17,   14,   13,   15,   18,   48,
       15,  119,   16,   49,  116,   16,   19,   20,   14,   20,
       21,   19,   19,   22,   23,   24,   25,   19,   26,   19,
       27,   28,   29,   19,   30,   31,   32,   31,   31,   33,
       31,   34,   35,   36,   31,   37,   31,   38,   31,   31,
       39,   40,   41,   42,   31,   43,   44,   31,   31,   31,
       45,   31,   31,   31,   46,   47,   19,   50,   51,   14,
       51,   50,   50,   50,   50,   50,   50,   50,   50,   52,
       50,   50,   50,   50,   50,   50,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   50,   50,   50,   51,   14,
       51,   66,   68,   54,   68,   67,   56,   14,   51,   52,
       57,   54,   71,   73,   68,  232,   72,   52,   68,   80,
       68,  108,   92,  233,   81,   74,   84,   85,   86,   95,
       87,   88,   93,   96,   97,  113,  100,  109,   98,   68,
       68,   68,   68,  101,   89,   75,  114,   55,  102,   71,
       71,   68,   68,   72,   72,   55,   58,   59,   14,   59,
       58,   58,   58,   58,   58,   58,   58,   58,   60,   58,
       58,   58,   58,   58,   58,   61,   61,   61,   61,   61,

       61,   61,   61,   62,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   63,   64,   61,   61,
       61,   61,   61,   61,   58,   58,   65,  103,   90,   73,
       73,   71,   73,   68,   68,   72,   68,   73,   73,  144,
      104,   74,   74,   71,   74,   68,  105,   72,  130,   74,
       74,  132,  142,  131,  188,  133,  145,  143,  149,  199,
      150,   75,   75,  409,   75,  201,  189,  242,  202,   75,
       75,  200,  190,  234,  235,  341,  191,  243,  273,  274,
      384,  408,  407,  406,  405,  236,  404,  403,  342,  192,
      402,  401,  400,  385,  399,  398,  397,  193,   12,   12,

       50,   50,  123,  123,  125,  125,  252,  252,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  386,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,

      300,  299,  298,  297,  296,  295,  294,  293,  292,  253,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  272,  271,  270,
      269,  268,  267,  266,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  251,  250,  249,
      248,  247,  246,  245,  244,  241,  240,  239,  238,  237,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  203,  198,
      197,  196,  195,  194,  187,  186,  185,  184,  183,  182,

      181,  180,  179,  178,  177,  176,  175,  174,  173,  172,
      171,  170,  169,  168,  167,  126,  124,  166,  165,  164,
      163,  162,  161,  160,  159,  158,  157,  156,  155,  154,
      153,  152,  151,  148,  147,  146,  141,  140,  139,  138,
      137,  136,  135,  134,  129,  128,  127,  126,  124,  122,
      121,  120,   70,  118,  117,   70,  115,  112,  111,  110,
      107,  106,   99,   94,   91,   83,   82,   70,   79,   78,
       77,   69,   76,   70,   69,  410,   11,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410
    } ;

static yyconst flex_int16_t yy_chk[629] =
    {   0,
        0,    1,    1,    1,    2,    2,    2,    1,    2,    4,
        2,  415,    1,    4,  414,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,   10,   13,    7,   13,   10,    8,    8,    8,    7,
        8,    8,   17,   18,   17,  190,   17,    8,   20,   27,
       20,   42,   33,  190,   27,   18,   30,   30,   30,   35,
       30,   30,   33,   35,   36,   46,   38,   42,   36,   51,
       59,   51,   59,   38,   30,   18,   46,    7,   38,   48,
       56,   48,   56,   48,   56,    8,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   39,  413,   49,
       57,   66,   67,   66,   68,   66,   68,   72,   73,   96,
       39,   49,   57,   71,   67,   71,   39,   71,   84,   72,
       73,   85,   95,   84,  151,   85,   96,   95,  101,  158,
      101,   49,   57,  408,   67,  159,  151,  197,  159,   72,
       73,  158,  151,  191,  191,  320,  151,  197,  233,  233,
      377,  407,  406,  404,  403,  191,  402,  401,  320,  151,
      400,  399,  398,  377,  397,  395,  394,  151,  411,  411,

      412,  412,  416,  416,  417,  417,  418,  418,  393,  392,
      391,  390,  389,  386,  385,  384,  382,  380,  378,  376,
      375,  374,  373,  371,  370,  369,  368,  367,  366,  364,
      360,  359,  358,  357,  356,  354,  353,  351,  350,  348,
      347,  345,  344,  342,  341,  340,  339,  337,  335,  334,
      333,  332,  330,  329,  328,  327,  326,  325,  322,  321,
      319,  317,  316,  315,  312,  311,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  300,  298,  296,  295,  293,
      291,  290,  289,  287,  286,  285,  284,  283,  282,  281,
      279,  278,  277,  276,  275,  274,  273,  272,  270,  267,

      266,  264,  263,  262,  259,  258,  257,  256,  255,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  237,  236,  235,  234,  232,  230,  229,
      228,  226,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  215,  214,  213,  212,  211,  210,  206,  205,  203,
      202,  201,  200,  199,  198,  196,  195,  194,  193,  192,
      189,  187,  186,  185,  184,  183,  182,  181,  180,  179,
      178,  177,  176,  175,  174,  173,  172,  171,  170,  169,
      168,  167,  166,  165,  164,  163,  162,  161,  160,  157,
      156,  154,  153,  152,  150,  149,  148,  147,  146,  145,

      144,  143,  142,  141,  140,  139,  137,  136,  135,  134,
      133,  132,  131,  130,  127,  125,  123,  122,  121,  120,
      114,  113,  112,  111,  110,  109,  108,  107,  106,  105,
      104,  103,  102,   99,   98,   97,   94,   93,   92,   91,
       89,   88,   87,   86,   80,   79,   75,   74,   70,   64,
       63,   62,   60,   55,   54,   52,   47,   45,   44,   43,
       41,   40,   37,   34,   32,   29,   28,   26,   25,   24,
       23,   22,   21,   16,   15,   11,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[80] =
    {   0,
1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int ann_flex_debug;
int ann_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *anntext;
#line 1 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
#line 2 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"

#include "broadway.h"
#include "language.tab.h"

#include "assert.h"

#include <stdlib.h>
#include <string.h>

// --- Fix the names from the C parser

#define cblval annlval
#define cbtext anntext
#define cbleng annleng

// --- Routines from the C parser for handling constants

void parse_line_directive(char *s);
void save_pragma_directive(char *s);

void EnterC(void);
void ExitC(void);

// --- Line number offset (to deal with preprocessing the code). We
// update this number when we see #line directives.

void adjust_line_number(char * text);

int line_number_offset = 0;

/* -- Prefix all symbols with "ann" */
/* -- Define the four states: "BDWY" for all Broadway annotations
language tokens, "C" for C code fragments, and "META" for
meta-symbols. The meta-symbols always embedded in the C
patterns. The "BDWYID" state is used for proecdure names, which
could conflict with reserved words in the annotation language. */




/* -- Define some useful short-hands */
#line 811 "lex.ann.c"

#define INITIAL 0
#define BDWY 1
#define BDWYID 2
#define C 3
#define META 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int annlex_destroy (void );

int annget_debug (void );

void annset_debug (int debug_flag  );

YY_EXTRA_TYPE annget_extra (void );

void annset_extra (YY_EXTRA_TYPE user_defined  );

FILE *annget_in (void );

void annset_in  (FILE * in_str  );

FILE *annget_out (void );

void annset_out  (FILE * out_str  );

int annget_leng (void );

char *annget_text (void );

int annget_lineno (void );

void annset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int annwrap (void );
#else
extern int annwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( anntext, annleng, 1, annout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( annin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( annin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, annin))==0 && ferror(annin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(annin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int annlex (void);

#define YY_DECL int annlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after anntext and annleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( annleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(anntext[annleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 75 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"


        /* -- General rules for handling line number directives */

#line 1005 "lex.ann.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! annin )
			annin = stdin;

		if ( ! annout )
			annout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			annensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				ann_create_buffer(annin,YY_BUF_SIZE );
		}

		ann_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of anntext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 411 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 577 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < annleng; ++yyl )
				if ( anntext[yyl] == '\n' )
					   
    annlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
#line 80 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 80 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ adjust_line_number(anntext); }
	YY_BREAK
/* -- State transition (context sensitivity) rules */
case 3:
YY_RULE_SETUP
#line 84 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ BEGIN(C); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 85 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ BEGIN(BDWY); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ BEGIN(META); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ BEGIN(C); }
	YY_BREAK
/* -- General rules for handling white-space (including regular line number
              adjustment */
case 7:
YY_RULE_SETUP
#line 93 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{  }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 95 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{  }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 97 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 99 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return anntext[0]; }
	YY_BREAK
/* -- Broadway annotation tokens ------------------------------------------------------ */
case 11:
YY_RULE_SETUP
#line 103 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMAYPROPERTY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 104 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMAYPROPERTY; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 105 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMUSTPROPERTY; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 106 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINITIALLY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 107 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokDIAGNOSTIC; /* TB new */ }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 109 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokGLOBAL; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 111 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset);
                         BEGIN(BDWYID);
                         return tokPROCEDURE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 115 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokENABLE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 116 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokDISABLE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 118 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_id = new parserID(anntext, (annlineno - line_number_offset));
                         BEGIN(BDWY);
                         return tokID; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 122 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokACCESS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 123 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMODIFY; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 125 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokANALYZE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 126 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokDEFAULT ; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 127 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIF; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 129 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_EXACTLY; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 130 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokCOULD_BE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 132 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ATLEAST; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 133 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ATMOST; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 134 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_BOTTOM; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 136 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokBEFORE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 137 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokAFTER; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 138 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokALWAYS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 139 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokEVER; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 140 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokTRACE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 141 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokCONFIDENCE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 143 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokFORWARD; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 144 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokBACKWARD; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ALIASOF; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_SAMEAS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_EMPTY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 150 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokON_ENTRY; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 151 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokON_EXIT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 152 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokNEW; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 153 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokARROW; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 154 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokDELETE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 156 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokPATTERN; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 158 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokANDAND; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 159 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokOROR; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 161 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokNOT_EQUALS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 162 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokEQUALS_EQUALS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 163 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokLESS_EQUALS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 164 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokGREATER_EQUALS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 166 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_CONSTANT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 168 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokEQUALS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 170 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokASSIGN; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 171 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokWEAKASSIGN; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 173 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokREPORT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 174 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokERROR; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 175 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokAPPEND; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 177 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokWHEN; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 178 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokREPLACE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 179 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINLINE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 181 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokUNION_SET; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 182 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINTERSECT_SET; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 183 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokUNION_EQUIV; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 184 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINTERSECT_EQUIV; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 186 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ELEMENT_OF; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 187 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_EMPTYSET; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 189 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokADD; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 191 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_id = new parserID(anntext, (annlineno - line_number_offset));
                         return tokID;
                       }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 195 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIO; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 197 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return anntext[0]; }
	YY_BREAK
/* -- Embedded meta-tokens ------------------------------------------------------------ */
case 74:
YY_RULE_SETUP
#line 201 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return metatokEXPR; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 202 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return metatokSTMT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 203 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return metatokTYPE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 205 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_id = new parserID(anntext, (annlineno - line_number_offset));
                         return metatokID;
                       }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 209 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return anntext[0]; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 211 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"
ECHO;
	YY_BREAK
#line 1508 "lex.ann.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BDWY):
case YY_STATE_EOF(BDWYID):
case YY_STATE_EOF(C):
case YY_STATE_EOF(META):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed annin at a new source and called
			 * annlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = annin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( annwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * anntext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of annlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					annrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			annrestart(annin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) annrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 411 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 411 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 410);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up anntext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --annlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					annrestart(annin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( annwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve anntext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    annlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void annrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        annensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            ann_create_buffer(annin,YY_BUF_SIZE );
	}

	ann_init_buffer(YY_CURRENT_BUFFER,input_file );
	ann_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void ann_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		annpop_buffer_state();
	 *		annpush_buffer_state(new_buffer);
     */
	annensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	ann_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (annwrap()) processing, but the only time this flag
	 * is looked at is after annwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void ann_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	annin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE ann_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) annalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ann_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) annalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in ann_create_buffer()" );

	b->yy_is_our_buffer = 1;

	ann_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with ann_create_buffer()
 * 
 */
    void ann_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		annfree((void *) b->yy_ch_buf  );

	annfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a annrestart() or at EOF.
 */
    static void ann_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	ann_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then ann_init_buffer was _probably_
     * called from annrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void ann_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		ann_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void annpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	annensure_buffer_stack();

	/* This block is copied from ann_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from ann_switch_to_buffer. */
	ann_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void annpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	ann_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		ann_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void annensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)annalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in annensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)annrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in annensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE ann_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) annalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ann_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	ann_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to annlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       ann_scan_bytes() instead.
 */
YY_BUFFER_STATE ann_scan_string (yyconst char * yystr )
{
    
	return ann_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to annlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE ann_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) annalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in ann_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = ann_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in ann_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up anntext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		anntext[annleng] = (yy_hold_char); \
		(yy_c_buf_p) = anntext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		annleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int annget_lineno  (void)
{
        
    return annlineno;
}

/** Get the input stream.
 * 
 */
FILE *annget_in  (void)
{
        return annin;
}

/** Get the output stream.
 * 
 */
FILE *annget_out  (void)
{
        return annout;
}

/** Get the length of the current token.
 * 
 */
int annget_leng  (void)
{
        return annleng;
}

/** Get the current token.
 * 
 */

char *annget_text  (void)
{
        return anntext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void annset_lineno (int  line_number )
{
    
    annlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see ann_switch_to_buffer
 */
void annset_in (FILE *  in_str )
{
        annin = in_str ;
}

void annset_out (FILE *  out_str )
{
        annout = out_str ;
}

int annget_debug  (void)
{
        return ann_flex_debug;
}

void annset_debug (int  bdebug )
{
        ann_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from annlex_destroy(), so don't allocate here.
     */

    /* We do not touch annlineno unless the option is enabled. */
    annlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    annin = stdin;
    annout = stdout;
#else
    annin = (FILE *) 0;
    annout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * annlex_init()
     */
    return 0;
}

/* annlex_destroy is for both reentrant and non-reentrant scanners. */
int annlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		ann_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		annpop_buffer_state();
	}

	/* Destroy the stack itself. */
	annfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * annlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *annalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *annrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void annfree (void * ptr )
{
	free( (char *) ptr );	/* see annrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 211 "../../../../src/midend/programAnalysis/annotationLanguageParser/language.l"



// --- Adapted from parse_line_directive in lex.l

void adjust_line_number(char * s)
{
 char *p;
  int val;

  // Read until a '#' sign
  for (p = s; *p != '\n' && *p != '#'; p++);
  assert(*p != '\n');

  // Read spaces and tabs
  for (p = p + 1; *p != '\n' && (*p == ' ' || *p == '\t'); p++);
  assert(*p != '\n');

  // Swallow "line" and any trailing whitespace
  if (strncmp(p, "line", 4) == 0) {
    p = p + 4;

    // There must be whitespace
    assert(*p == ' ' || *p == '\t');

    for (     ; *p != '\n' && (*p == ' ' || *p == '\t'); p++);
    assert(*p != '\n');
  }

  // Read an integer from the string
  if (isdigit(*p))
    for (val = 0; *p && isdigit(*p); p++)
      val = val * 10 + (*p - '0');
  else {
    fprintf(stderr, "#line error: expecting line number");
    return;
  }

  line_number_offset = annlineno - val;
}

