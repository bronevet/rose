# Makefile.in generated by automake 1.9.6 from Makefile.am.
# tests/CompileTests/ElsaTestCases/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic 
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?
srcdir = ../../../../tests/CompileTests/ElsaTestCases
top_srcdir = ../../../..
VPATH = ../../../../tests/CompileTests/ElsaTestCases
pkgdatadir = $(datadir)/rose
pkglibdir = $(libdir)/rose
pkgincludedir = $(includedir)/rose
top_builddir = ../../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs
subdir = tests/CompileTests/ElsaTestCases
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/acmacros/upc.m4 \
	$(top_srcdir)/config/EDG.m4 $(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/acinclude.m4 $(top_srcdir)/config/argz.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_lib_xerces.m4 \
	$(top_srcdir)/config/ax_python_devel.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determine-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libtool.m4 $(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/ltdl.m4 $(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/mdl_have_opengl.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-backstroke.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-clang.m4 \
	$(top_srcdir)/config/support-compass2.m4 \
	$(top_srcdir)/config/support-cuda-opencl.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-git-versioning.m4 \
	$(top_srcdir)/config/support-gmp.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-isl.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-languages.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-mint.m4 \
	$(top_srcdir)/config/support-ofp.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-projects.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-rtedupc.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/support_POET.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/rose_config.h
CONFIG_CLEAN_FILES =
depcomp =
am__depfiles_maybe =
SOURCES =
DIST_SOURCES =
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-exec-recursive install-info-recursive \
	install-recursive installcheck-recursive installdirs-recursive \
	pdf-recursive ps-recursive uninstall-info-recursive \
	uninstall-recursive
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ABS_COMPASS2_XML_SRCDIR = /home/bronevet/Downloads/rose/projects/compass2/compass2/xml
ACLOCAL = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run aclocal-1.9
ALTERNATE_BACKEND_C_CROSS_COMPILER_FALSE = 
ALTERNATE_BACKEND_C_CROSS_COMPILER_TRUE = #
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run tar
AR = ar
ARGZ_H = 
AUTOCONF = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run autoconf
AUTOHEADER = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run autoheader
AUTOMAKE = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run automake-1.9
AUX_LINKER = 
AWK = gawk
AXXPXX_SPECIFIC_TESTS_FALSE = 
AXXPXX_SPECIFIC_TESTS_TRUE = #
Axx_INCLUDES = 
Axx_LIBS = 
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = 4
BACKEND_COMPILER_VERSION_MINOR_NUMBER = 4
BACKEND_COMPILER_VERSION_NAME = GNU
BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_FALSE = 
BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_TRUE = #
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = 6
BACKEND_CXX_COMPILER = g++
BACKEND_C_COMPILER = gcc
BACKEND_FORTRAN_COMPILER = gfortran
BACKEND_JAVA_COMPILER = javac
BACKSTROKE_ROSS_INCLUDE = 
BACKSTROKE_SPEEDES_INCLUDE = 
BINARY_EDG_TARBALL_ENABLED_FALSE = 
BINARY_EDG_TARBALL_ENABLED_TRUE = #
BOOST_CPPFLAGS = -pthread -I/home/bronevet/apps/boost/include
BOOST_DATE_TIME_LIB = -lboost_date_time
BOOST_FILESYSTEM_LIB = -lboost_filesystem
BOOST_LDFLAGS =  -L/home/bronevet/apps/boost/lib
BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options
BOOST_REGEX_LIB = -lboost_regex
BOOST_SYSTEM_LIB = -lboost_system
BOOST_THREAD_LIB = -lboost_thread
BOOST_WAVE_LIB = -lboost_wave
CANDL_PATH = 
CC = gcc
CCDEPMODE = depmode=none
CCLD = gcc
CFLAGS = -g -O2 -g -Wall -Wstrict-prototypes -Wmissing-prototypes
CFLAGS32 = no
CLANG_CXXFLAGS = 
CLANG_LDFLAGS = 
CLANG_LIBDIR = 
CLASSPATH = /home/bronevet/Downloads/rose/compile/../src/3rdPartyLibraries/antlr-jars/antlr-3.3-complete.jar:/home/bronevet/Downloads/rose/compile/../src/3rdPartyLibraries/fortran-parser/OpenFortranParser-20111001.jar
CLOOG_PATH = 
CONVENIENCE_LTDL_FALSE = #
CONVENIENCE_LTDL_TRUE = 
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=none
CXXFLAGS =  -g -Wall
CXXLD = g++
CXX_DEBUG = -g
CXX_OPTIMIZE = 
CXX_SHARED_LIB_UPDATE = ${CXX} -shared -o
CXX_STATIC_LIB_UPDATE = ${AR} ruv
CXX_TEMPLATE_OBJECTS = 
CXX_TEMPLATE_REPOSITORY_PATH = $(top_builddir)/src
CXX_WARNINGS = -Wall
CYGPATH_W = echo
C_DEBUG = -g
C_OPTIMIZE = 
C_WARNINGS = -Wall -Wstrict-prototypes -Wmissing-prototypes
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DOT_TO_GML_TRANSLATOR_FALSE = 
DOT_TO_GML_TRANSLATOR_TRUE = #
DOXYGEN_ADDED_DIRECTORY_1 = @top_pwd@/src/frontend/SageIII
DOXYGEN_ADDED_DIRECTORY_2 = /home/bronevet/Downloads/rose/compile/../src/frontend/SageIII
DOXYGEN_ENABLED_SECTIONS = documentDevelopmentVersionUsingDoxygen
DOXYGEN_EXTRACT_ALL = YES
DOXYGEN_EXTRACT_PRIVATE = YES
DOXYGEN_EXTRACT_STATIC = YES
DOXYGEN_HIDE_FRIEND_COMPOUNDS = NO
DOXYGEN_HIDE_UNDOC_CLASSES = NO
DOXYGEN_HIDE_UNDOC_MEMBERS = NO
DOXYGEN_INTERNAL_DOCS = YES
DOXYGEN_USE_TAG_FILE = 
DSYMUTIL = 
DUMPBIN = 
DWARF_INCLUDE = 
DWARF_LINK = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
ENABLE_I386_FALSE = 
ENABLE_I386_TRUE = #
ENABLE_JAVAPORT_FALSE = 
ENABLE_JAVAPORT_TRUE = #
ETHER_PREFIX = 
EXE = 
EXEEXT = 
FGREP = /bin/grep -F
FLTK_include_path = 
FLTK_libs_path = 
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = GNU-4.4
GEN_BE = sage_gen_be.o
GFORTRAN_PATH = /usr/bin/gfortran
GHCBIN = 
GLUT_include_path = 
GLUT_libs_path = 
GL_CFLAGS = 
GL_LIBS = 
GMP_INCLUDE_PATH = 
GMP_INSTALL_PATH = 
GMP_LIBRARY_PATH = 
GREP = /bin/grep
GraphViz_include_path = 
GraphViz_libs_path = 
HAS_LIBRARY_CURL_FALSE = 
HAS_LIBRARY_CURL_TRUE = #
HS_CONFIG_OPTS = --prefix=/home/bronevet/apps/rose --user
INCLTDL = -I${top_srcdir}/libltdl
INCLUDE_COMPASS_MAKEFILE_INC = include compass_makefile.inc
INDENT = indent
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_LTDL_FALSE = 
INSTALL_LTDL_TRUE = #
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
INSURE_OPTIONS = 
ISL_INCLUDE_PATH = 
ISL_INSTALL_PATH = 
ISL_LIBRARY_PATH = 
IntelPin_path = 
JAR = /usr/java/jdk1.7.0_04/bin/jar
JAVA = /usr/java/jdk1.7.0_04/bin/java
JAVAC = /usr/java/jdk1.7.0_04/bin/javac
JAVAH = /usr/java/jdk1.7.0_04/bin/javah
JAVA_JVM_INCLUDE = -I/usr/java/jdk1.7.0_04/include -I/usr/java/jdk1.7.0_04/include/linux
JAVA_JVM_LINK = -L/usr/java/jdk1.7.0_04/jre/lib/amd64/server -ljvm
JAVA_PATH = /usr/java/jdk1.7.0_04
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LEX = flex
LEXLIB = 
LEX_OUTPUT_ROOT = lex.yy
LIBADD_DL = -ldl 
LIBADD_DLD_LINK = 
LIBADD_DLOPEN = -ldl
LIBADD_SHL_LOAD = 
LIBFFI_CFLAGS = 
LIBFFI_LIBS = 
LIBLTDL = ${top_build_prefix}libltdl/libltdlc.la
LIBOBJS = 
LIBS = 
LIBS_WITH_RPATH = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool --quiet
LIPO = 
LLVM_CONFIG = 
LN_S = ln -s
LTDLDEPS = ${top_build_prefix}libltdl/libltdlc.la
LTDLINCL = -I${top_srcdir}/libltdl
LTDLOPEN = libltdl
LTLIBOBJS = 
LT_CONFIG_H = rose_config.h
LT_DLLOADERS =  dlopen.la
LT_DLPREOPEN = -dlpreopen dlopen.la 
MAKEINFO = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run makeinfo
MAPLE_INCLUDES = 
MAPLE_LIBS = 
MD5 = md5sum
MINT = $(top_builddir)/projects/mint/src/mint
MOC = NONE/moc
MPICXX = 
MYSQL_CFLAGS = 
MYSQL_CONFIG = 
MYSQL_INCLUDE = 
MYSQL_LDFLAGS = 
MYSQL_VERSION = 
NM = /usr/bin/nm -B
NMEDIT = 
OBJ = .o
OBJDUMP = objdump
OBJEXT = o
OLD_COMPILER_VERSION_FALSE = 
OLD_COMPILER_VERSION_TRUE = #
OPEN_FORTRAN_PARSER_PATH = /src/3rdPartyLibraries/fortran-parser
OPTIONAL_PROJECTS = 
OS_32BIT_FALSE = 
OS_32BIT_TRUE = #
OS_64BIT_FALSE = #
OS_64BIT_TRUE = 
OS_LINUX_FALSE = #
OS_LINUX_TRUE = 
OS_MACOSX_FALSE = 
OS_MACOSX_TRUE = #
OS_MINGW_FALSE = 
OS_MINGW_TRUE = #
OS_MSDOS_FALSE = 
OS_MSDOS_TRUE = #
OS_VENDOR_APPLE_FALSE = 
OS_VENDOR_APPLE_TRUE = #
OS_VENDOR_CENTOS_FALSE = #
OS_VENDOR_CENTOS_TRUE = 
OS_VENDOR_DEBIAN_FALSE = 
OS_VENDOR_DEBIAN_TRUE = #
OS_VENDOR_REDHAT_32BIT_FALSE = 
OS_VENDOR_REDHAT_32BIT_TRUE = #
OS_VENDOR_REDHAT_FALSE = 
OS_VENDOR_REDHAT_TRUE = #
OS_VENDOR_UBUNTU_FALSE = 
OS_VENDOR_UBUNTU_TRUE = #
OS_release = 6.2
OS_vendor = CentOS
OTOOL = 
OTOOL64 = 
PACKAGE = rose
PACKAGE_BUGREPORT = 
PACKAGE_NAME = ROSE
PACKAGE_STRING = ROSE 0.9.5a
PACKAGE_TARNAME = rose
PACKAGE_VERSION = 0.9.5a
PACKAGE_VERSION_NUMERIC = 0.9.5.1
PATH_SEPARATOR = :
PERL = perl
PKG_CONFIG = /usr/bin/pkg-config
POET_INCL = -I$(poet_dir)
POET_LIB = 
PPL_PATH = 
PURIFY_OPTIONS = -windows=no -recursion-depth-limit=40000 -chain-length=24 -first-only=yes -leaks-at-exit=no -inuse-at-exit=no -always-use-cache-dir=yes -cache-dir=/home/bronevet/tmp -best-effort 
PYTHON = 
PYTHON_CPPFLAGS = 
PYTHON_EXTRA_LDFLAGS = 
PYTHON_EXTRA_LIBS = 
PYTHON_LDFLAGS = 
PYTHON_SITE_PKG = 
Pxx_INCLUDES = 
Pxx_LIBS = 
QROSE_PREFIX = 
QROSE_USE_MINGW32_FALSE = 
QROSE_USE_MINGW32_TRUE = #
QROSE_USE_WINDOWS_FALSE = 
QROSE_USE_WINDOWS_TRUE = #
QT_INCLUDES = -DQT3_SUPPORT -INONE/QtCore -INONE/QtGui -INONE/Qt3Support -INONE/QtXml -INONE
QT_LDFLAGS = -LNONE -lQtCore -lQtGui -lQt3Support -lQtXml -lQtUiTools
QT_VERSION = 
QT_VERSION_MAJOR = 
QT_VERSION_MINOR = 
RANLIB = ranlib
RCC = NONE/rcc
ROSEHPCT_DEP_INCLUDES = 
ROSEHPCT_DEP_LIBS = 
ROSE_BOOST_NORMAL_INCLUDE_PATH = 

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use). 
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = -isystem /home/bronevet/apps/boost/include
ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_FALSE = #
ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE = 
ROSE_BUILD_COMPASS2_FALSE = 
ROSE_BUILD_COMPASS2_TRUE = #
ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_CXX_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_CXX_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_C_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_C_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_EDG_WITH_CUDA_SUPPORT_FALSE = 
ROSE_BUILD_EDG_WITH_CUDA_SUPPORT_TRUE = #
ROSE_BUILD_EDG_WITH_OPENCL_SUPPORT_FALSE = 
ROSE_BUILD_EDG_WITH_OPENCL_SUPPORT_TRUE = #
ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_OS_IS_CYGWIN_FALSE = 
ROSE_BUILD_OS_IS_CYGWIN_TRUE = #
ROSE_BUILD_OS_IS_OSX_FALSE = 
ROSE_BUILD_OS_IS_OSX_TRUE = #
ROSE_BUILD_PHP_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_PHP_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_FALSE = #
ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE = 
ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_FALSE = 
ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_TRUE = #
ROSE_BUILD_ROSEHPCT_FALSE = 
ROSE_BUILD_ROSEHPCT_TRUE = #
ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_FALSE = #
ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE = 
ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_FALSE = #
ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE = 
ROSE_EDG_MAJOR_VERSION_NUMBER = 3
ROSE_EDG_MINOR_VERSION_NUMBER = 3
ROSE_HAS_EDG_SOURCE_FALSE = 
ROSE_HAS_EDG_SOURCE_TRUE = #
ROSE_HAVE_LIBYICES_FALSE = 
ROSE_HAVE_LIBYICES_TRUE = #
ROSE_HAVE_YICES_FALSE = 
ROSE_HAVE_YICES_TRUE = #
ROSE_HOME = .
ROSE_LSB_RELEASE = lsb_release
ROSE_MPI_FALSE = 
ROSE_MPI_TRUE = #
ROSE_OBJDUMP_PATH = objdump
ROSE_OFP_CONTAINS_JAVA_FILE_FALSE = 
ROSE_OFP_CONTAINS_JAVA_FILE_TRUE = #
ROSE_OFP_JAR_FILE = OpenFortranParser-20111001.jar
ROSE_OFP_MAJOR_VERSION_NUMBER = 0
ROSE_OFP_MINOR_VERSION_NUMBER = 8
ROSE_OFP_PATCH_VERSION_NUMBER = 3
ROSE_OFP_VERSION_NUMBER = 20111001
ROSE_PCH_FALSE = 
ROSE_PCH_TRUE = #
ROSE_PS2PDF_PATH = ps2pdf
ROSE_SUPPORT_GNU_EXTENSIONS = FALSE
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = FALSE
ROSE_USE_ASSEMBLY_SEMANTICS_FALSE = 
ROSE_USE_ASSEMBLY_SEMANTICS_TRUE = #
ROSE_USE_BDDBDDB_FALSE = 
ROSE_USE_BDDBDDB_TRUE = #
ROSE_USE_BINARYCONTEXTLOOKUP_FALSE = 
ROSE_USE_BINARYCONTEXTLOOKUP_TRUE = #
ROSE_USE_BOOST_WAVE_FALSE = #
ROSE_USE_BOOST_WAVE_TRUE = 
ROSE_USE_CANDL = 
ROSE_USE_CANDL_FALSE = 
ROSE_USE_CANDL_TRUE = #
ROSE_USE_CLANG_FRONTEND = 
ROSE_USE_CLANG_FRONTEND_FALSE = 
ROSE_USE_CLANG_FRONTEND_TRUE = #
ROSE_USE_CLOOG = 
ROSE_USE_CLOOG_FALSE = 
ROSE_USE_CLOOG_TRUE = #
ROSE_USE_CUDA_SUPPORT = 7
ROSE_USE_CUDA_SUPPORT_FALSE = 
ROSE_USE_CUDA_SUPPORT_TRUE = #
ROSE_USE_DWARF_FALSE = 
ROSE_USE_DWARF_TRUE = #
ROSE_USE_EDG_VERSION_4_3_FALSE = 
ROSE_USE_EDG_VERSION_4_3_TRUE = #
ROSE_USE_EDG_VERSION_4_FALSE = 
ROSE_USE_EDG_VERSION_4_TRUE = #
ROSE_USE_ETHER_FALSE = 
ROSE_USE_ETHER_TRUE = #
ROSE_USE_GCC_OMP_FALSE = 
ROSE_USE_GCC_OMP_TRUE = #
ROSE_USE_GRAPHVIZ_DOT_FALSE = 
ROSE_USE_GRAPHVIZ_DOT_TRUE = #
ROSE_USE_IDA_FALSE = 
ROSE_USE_IDA_TRUE = #
ROSE_USE_INDENT_FALSE = #
ROSE_USE_INDENT_TRUE = 
ROSE_USE_INSURE_FALSE = 
ROSE_USE_INSURE_TRUE = #
ROSE_USE_INTEL_PIN_FALSE = 
ROSE_USE_INTEL_PIN_TRUE = #
ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE = 
ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE = #
ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_FALSE = #
ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_TRUE = 
ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE = #
ROSE_USE_INTERNAL_JAVA_SUPPORT_TRUE = 
ROSE_USE_LIBFFI_FALSE = 
ROSE_USE_LIBFFI_TRUE = #
ROSE_USE_LIBNUMA_FALSE = 
ROSE_USE_LIBNUMA_TRUE = #
ROSE_USE_LLVM_FALSE = 
ROSE_USE_LLVM_TRUE = #
ROSE_USE_LONG_MAKE_CHECK_RULE_FALSE = 
ROSE_USE_LONG_MAKE_CHECK_RULE_TRUE = #
ROSE_USE_MAPLE_FALSE = 
ROSE_USE_MAPLE_TRUE = #
ROSE_USE_MYSQL_FALSE = 
ROSE_USE_MYSQL_TRUE = #
ROSE_USE_NEW_EDG_INTERFACE_FALSE = 
ROSE_USE_NEW_EDG_INTERFACE_TRUE = #
ROSE_USE_OBJDUMP_FALSE = #
ROSE_USE_OBJDUMP_TRUE = 
ROSE_USE_OMNI_OPENMP_FALSE = 
ROSE_USE_OMNI_OPENMP_TRUE = #
ROSE_USE_OPENCL_SUPPORT = 
ROSE_USE_OPENCL_SUPPORT_FALSE = 
ROSE_USE_OPENCL_SUPPORT_TRUE = #
ROSE_USE_OPENGL_FALSE = 
ROSE_USE_OPENGL_TRUE = #
ROSE_USE_PHP_FALSE = 
ROSE_USE_PHP_TRUE = #
ROSE_USE_PPL = 
ROSE_USE_PPL_FALSE = 
ROSE_USE_PPL_TRUE = #
ROSE_USE_PS2PDF_FALSE = #
ROSE_USE_PS2PDF_TRUE = 
ROSE_USE_PYTHON_FALSE = #
ROSE_USE_PYTHON_TRUE = 
ROSE_USE_QROSE_FALSE = 
ROSE_USE_QROSE_TRUE = #
ROSE_USE_QT_FALSE = 
ROSE_USE_QT_TRUE = #
ROSE_USE_RTED_FALSE = 
ROSE_USE_RTED_TRUE = #
ROSE_USE_SAT_FALSE = 
ROSE_USE_SAT_TRUE = #
ROSE_USE_SCOPLIB = 
ROSE_USE_SCOPLIB_FALSE = 
ROSE_USE_SCOPLIB_TRUE = #
ROSE_USE_SMALLER_GENERATED_FILES_FALSE = 
ROSE_USE_SMALLER_GENERATED_FILES_TRUE = #
ROSE_USE_SQLITE_DATABASE_FALSE = 
ROSE_USE_SQLITE_DATABASE_TRUE = #
ROSE_USE_SSL_SUPPORT_FALSE = 
ROSE_USE_SSL_SUPPORT_TRUE = #
ROSE_USE_TCLSH_FALSE = 
ROSE_USE_TCLSH_TRUE = #
ROSE_USE_TEST_SMT_SOLVER_FALSE = 
ROSE_USE_TEST_SMT_SOLVER_TRUE = #
ROSE_USE_TRACE_ANALYSIS_FALSE = 
ROSE_USE_TRACE_ANALYSIS_TRUE = #
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = 
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_FALSE = 
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_TRUE = #
ROSE_USE_VISUALIZATION_FALSE = 
ROSE_USE_VISUALIZATION_TRUE = #
ROSE_USE_WGET_FALSE = #
ROSE_USE_WGET_TRUE = 
ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_FALSE = 
ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE = #
ROSE_USE_XML_FALSE = 
ROSE_USE_XML_TRUE = #
ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_FALSE = 
ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_TRUE = #
ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE = 
ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_TRUE = #
ROSE_USING_BOOST_VERSION_1_35_FALSE = 
ROSE_USING_BOOST_VERSION_1_35_TRUE = #
ROSE_USING_BOOST_VERSION_1_36_FALSE = 
ROSE_USING_BOOST_VERSION_1_36_TRUE = #
ROSE_USING_BOOST_VERSION_1_37_FALSE = 
ROSE_USING_BOOST_VERSION_1_37_TRUE = #
ROSE_USING_BOOST_VERSION_1_38_FALSE = 
ROSE_USING_BOOST_VERSION_1_38_TRUE = #
ROSE_USING_BOOST_VERSION_1_39_FALSE = 
ROSE_USING_BOOST_VERSION_1_39_TRUE = #
ROSE_USING_BOOST_VERSION_1_40_FALSE = 
ROSE_USING_BOOST_VERSION_1_40_TRUE = #
ROSE_USING_BOOST_VERSION_1_41_FALSE = 
ROSE_USING_BOOST_VERSION_1_41_TRUE = #
ROSE_USING_BOOST_VERSION_1_42_FALSE = 
ROSE_USING_BOOST_VERSION_1_42_TRUE = #
ROSE_USING_BOOST_VERSION_1_43_FALSE = 
ROSE_USING_BOOST_VERSION_1_43_TRUE = #
ROSE_USING_BOOST_VERSION_1_44_FALSE = 
ROSE_USING_BOOST_VERSION_1_44_TRUE = #
ROSE_USING_BOOST_VERSION_1_45_FALSE = 
ROSE_USING_BOOST_VERSION_1_45_TRUE = #
ROSE_USING_BOOST_VERSION_1_46_FALSE = 
ROSE_USING_BOOST_VERSION_1_46_TRUE = #
ROSE_USING_BOOST_VERSION_1_47_FALSE = 
ROSE_USING_BOOST_VERSION_1_47_TRUE = #
ROSE_USING_BOOST_VERSION_1_48_FALSE = 
ROSE_USING_BOOST_VERSION_1_48_TRUE = #
ROSE_USING_GFORTRAN_VERSION_4_0_FALSE = 
ROSE_USING_GFORTRAN_VERSION_4_0_TRUE = #
ROSE_USING_GFORTRAN_VERSION_4_1_FALSE = 
ROSE_USING_GFORTRAN_VERSION_4_1_TRUE = #
ROSE_USING_GFORTRAN_VERSION_4_2_FALSE = 
ROSE_USING_GFORTRAN_VERSION_4_2_TRUE = #
ROSE_USING_GFORTRAN_VERSION_4_4_FALSE = #
ROSE_USING_GFORTRAN_VERSION_4_4_TRUE = 
ROSE_USING_GFORTRAN_VERSION_4_5_FALSE = 
ROSE_USING_GFORTRAN_VERSION_4_5_TRUE = #
ROSE_USING_GFORTRAN_VERSION_4_6_FALSE = 
ROSE_USING_GFORTRAN_VERSION_4_6_TRUE = #
ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_FALSE = 
ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_TRUE = #
ROSE_USING_ROSE_ANALYSIS_FALSE = 
ROSE_USING_ROSE_ANALYSIS_TRUE = #
ROSE_USING_ROSE_AST_FILE_IO_FALSE = 
ROSE_USING_ROSE_AST_FILE_IO_TRUE = #
ROSE_USING_ROSE_CODE_GENERATION_FALSE = 
ROSE_USING_ROSE_CODE_GENERATION_TRUE = #
ROSE_USING_ROSE_FALSE = 
ROSE_USING_ROSE_TRANSLATOR_FALSE = 
ROSE_USING_ROSE_TRANSLATOR_TRUE = #
ROSE_USING_ROSE_TRUE = #
ROSE_WGET_PATH = wget
ROSE_WITH_GMP_FALSE = 
ROSE_WITH_GMP_INCLUDE_FALSE = 
ROSE_WITH_GMP_INCLUDE_TRUE = #
ROSE_WITH_GMP_TRUE = #
ROSE_WITH_ISL_FALSE = 
ROSE_WITH_ISL_INCLUDE_FALSE = 
ROSE_WITH_ISL_INCLUDE_TRUE = #
ROSE_WITH_ISL_TRUE = #
ROSE_WITH_ROSEQT_FALSE = 
ROSE_WITH_ROSEQT_TRUE = #
ROSE_WITH_UPC_FALSE = 
ROSE_WITH_UPC_TRUE = #
ROSE_YICES = 
ROSE_YICES_PREFIX = 
RT_LIBS = -lrt -ldl -ldl 
SCOPLIB_PATH = 
SED = sed
SET_MAKE = 
SHELL = /bin/sh
SQLITE3_CFLAGS = 
SQLITE3_LDFLAGS = 
SQLITE3_VERSION = 
STRIP = strip
SWIG = /usr/bin/swig -c++
SWIG_LIB = /usr/share/swig/1.3.40
TCLSH = 
TEST_SMT_SOLVER = 
UIC = NONE/uic
UPC = 
UPCDEPMODE = 
UPCFLAGS = 
USE_BINARY_ANALYSIS_TESTS_FALSE = #
USE_BINARY_ANALYSIS_TESTS_TRUE = 
USE_GCJ_FALSE = 
USE_GCJ_TRUE = #
USE_HASKELL_FALSE = 
USE_HASKELL_TRUE = #
USE_ROSE_GLUT_SUPPORT_FALSE = 
USE_ROSE_GLUT_SUPPORT_TRUE = #
USE_ROSE_IN_BUILD_TREE_VAR_FALSE = 
USE_ROSE_IN_BUILD_TREE_VAR_TRUE = #
USE_VALGRIND_FALSE = 
USE_VALGRIND_TRUE = #
USING_GCC_3_4_4_BACKEND_COMPILER_FALSE = 
USING_GCC_3_4_4_BACKEND_COMPILER_TRUE = #
USING_GCC_4_0_4_BACKEND_COMPILER_FALSE = 
USING_GCC_4_0_4_BACKEND_COMPILER_TRUE = #
USING_GNU_COMPILER_FALSE = #
USING_GNU_COMPILER_TRUE = 
USING_INTEL_COMPILER_FALSE = 
USING_INTEL_COMPILER_TRUE = #
USING_WINDOWS = 0
USING_XTENSA_BACKEND_COMPILER_FALSE = 
USING_XTENSA_BACKEND_COMPILER_TRUE = #
VALGRIND_BINARY = 
VERSION = 0.9.5a
WITH_GOMP_OPENMP_LIB_FALSE = 
WITH_GOMP_OPENMP_LIB_TRUE = #
XERCES_CPPFLAGS = 
XERCES_LDFLAGS = 
XERCES_LIBS = 
XERCES_VERSION = 
XMKMF = 
XML2_CONFIG = no
XML_CPPFLAGS = 
XML_LIBS = 
X_CFLAGS =  -INONE
X_EXTRA_LIBS = 
X_LIBS =  -LNONE
X_PRE_LIBS = 
YACC = bison -y
YFLAGS = 
absolute_path_srcdir = /home/bronevet/Downloads/rose
ac_boost_path = /home/bronevet/apps/boost
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
ac_ct_MPICXX = 
ac_ct_UPC = 
am__fastdepCC_FALSE = 
am__fastdepCC_TRUE = #
am__fastdepCXX_FALSE = 
am__fastdepCXX_TRUE = #
am__fastdepUPC_FALSE = 
am__fastdepUPC_TRUE = #
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
backstroke_ross_path = 
backstroke_speedes_path = 
bddbddb_path = 
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_triplet_without_redhat = x86_64-pc-linux-gnu
build_vendor = unknown
configure_date = Friday July 27 15:30:15 2012
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
dwarf_path = 
edg_union_struct_debugging_value = union
exec_prefix = ${prefix}
glut_path = 
gomp_omp_runtime_library_path = 
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
ida_path = 
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /home/bronevet/Downloads/rose/config/install-sh
insure_BIN = 
insure_LIBS = 
insure_PREFIX = 
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
llvm_path = 
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
ltdl_LIBOBJS =  lt__strl.o
ltdl_LTLIBOBJS =  lt__strl.lo
mandir = ${datarootdir}/man
maple_path = 
mkdir_p = mkdir -p --
oldincludedir = /usr/include
omni_omp_runtime_support_path = 
optional_Visualization_subdirs = 
parallel_ast_traversal_omp_path = 
pdfdir = ${docdir}
php_path = 
poet_dir = /src/3rdPartyLibraries/POET
prefix = /home/bronevet/apps/rose
program_transform_name = s,x,x,
psdir = ${docdir}
purify_BIN = 
purify_INCLUDES = 
purify_LIBS = 
purify_PREFIX = 
rted_path = 
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
subdirs =  libltdl src/3rdPartyLibraries/libharu-2.1.0
sys_symbol_underscore = no
sysconfdir = ${prefix}/etc
target_alias = 
top_pwd = /home/bronevet/Downloads/rose/compile
wine_path = 

# SQLite is a simpler database to use than MySQL
#ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
#SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
#SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
#ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
#ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
#ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
#ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library 
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
#ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
#ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
#ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
#ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
#ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
#ROSE_ROSEHPCT_LIBS = -lrosehpct
#ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
#ROSE_YICES_INCLUDES = -I/include
#ROSE_YICES_LIBS = -lyices
#ROSE_YICES_LIBS_WITH_PATH = /lib/libyices.a
GLUT_LIBS = ${glut_path}

# ROSE-DWARF libdwarf support
#ROSE_DWARF_INCLUDES = -I$(dwarf_path)
# DQ (3/15/2009): Use the usual static linking when not using Intel Pin (what we used to do).
# DQ (3/13/2009): Fixup libdwarf support in ROSE to always use the dynamic (shared) library.
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(dwarf_path) -L$(dwarf_path) -ldwarf -lelf
# DQ (6/5/2010): Fixed to use the value set in the configure step (requires the dynamic library).
# ROSE_DWARF_LIBS_WITH_PATH = $(dwarf_path)/libdwarf.a -lelf
#ROSE_DWARF_LIBS_WITH_PATH = 

# DQ (3/13/2009): These do not appear to be used anywhere.
# ROSE_DWARF_LIBS = -ldwarf
# ROSE_DWARF_LIB_FILE = libdwarf.a

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for 
# dwarf when used with Intel Pin.
# ROSE_DWARF_LIBS_WITH_PATH = $(INTEL_PIN_PATH)/intel64/lib-ext/libdwarf.a -lelf
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(INTEL_PIN_PATH)/intel64/lib-ext -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
##ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
##INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
#ROSE_WINE_INCLUDES = -I$(wine_path)/include
#ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
#ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
#ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
#ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
#ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
#	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
#	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
#	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
#	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
#	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
#	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
#	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
#	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
#	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
#	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
#	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
#	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
#	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
#	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
#	-lLLVMInstrumentation -lLLVMJIT \
#	-lLLVMExecutionEngine -lLLVMCppBackend \
#	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
#	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
#	-lLLVMCBackend -lLLVMCBackendInfo \
#	-lLLVMBlackfinCodeGen \
#	-lLLVMBlackfinAsmPrinter \
#	-lLLVMBlackfinInfo -lLLVMBitWriter \
#	-lLLVMX86Disassembler -lLLVMX86AsmParser \
#	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
#	-lLLVMX86Info -lLLVMAsmParser \
#	-lLLVMARMAsmParser -lLLVMMCParser \
#	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
#	-lLLVMARMInfo -lLLVMArchive \
#	-lLLVMBitReader -lLLVMAlphaCodeGen \
#	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
#	-lLLVMAsmPrinter -lLLVMCodeGen \
#	-lLLVMScalarOpts -lLLVMInstCombine \
#	-lLLVMTransformUtils -lLLVMipa \
#	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
#	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
#	-lLLVMSystem

# adding all libraries for now

# SSL support permits use of MD5 checksums internally for binary library identification.
#ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
#ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
#INTEL_PIN_PATH = 
#INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
#INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
#INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_USE_DWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
#ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
#ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
#ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm
ROSE_INCLUDES = \
     $(ROSE_BOOST_PREINCLUDE_PATH) \
     -I$(top_builddir)/src/roseSupport \
     -I$(top_builddir)/src/frontend/SageIII \
     -I$(top_srcdir)/src \
     -I$(top_srcdir)/src/frontend/SageIII \
     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
     -I$(top_srcdir)/src/frontend/PHPFrontend \
     -I$(top_srcdir)/src/frontend/CxxFrontend/ClangFrontend \
     -I$(top_srcdir)/src/frontend/PythonFrontend \
     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
     -I$(top_srcdir)/src/frontend/BinaryFormats \
     -I$(top_srcdir)/src/frontend/BinaryLoader \
     -I$(top_srcdir)/src/frontend/Disassemblers \
     -I$(top_srcdir)/src/frontend/CxxFrontend/Clang \
     -I$(top_srcdir)/src/backend/unparser \
     -I$(top_srcdir)/src/backend/unparser/formatSupport \
     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
     -I$(top_srcdir)/src/backend/asmUnparser \
     -I$(top_srcdir)/src/util \
     -I$(top_srcdir)/src/util/support \
     -I$(top_srcdir)/src/util/graphs  \
     -I$(top_srcdir)/src/util/stringSupport \
     -I$(top_srcdir)/src/util/commandlineProcessing \
     -I$(top_srcdir)/src/midend/abstractHandle \
     -I$(top_srcdir)/src/midend/abstractMemoryObject \
     -I$(top_srcdir)/src/midend/astDiagnostics \
     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
     -I$(top_srcdir)/src/midend/astProcessing \
     -I$(top_srcdir)/src/midend/astQuery \
     -I$(top_srcdir)/src/midend/astRewriteMechanism \
     -I$(top_srcdir)/src/midend/astUtil/annotation \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/src/midend/astUtil/astSupport \
     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
     -I$(top_srcdir)/src/midend/binaryAnalyses \
     -I$(top_srcdir)/src/midend/binaryAnalyses/dataflowanalyses \
     -I$(top_srcdir)/src/midend/binaryAnalyses/instructionSemantics \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
     -I$(top_srcdir)/src/midend/programTransformation/extractFunctionArgumentsNormalization \
     -I$(top_srcdir)/src/midend/programAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
     -I$(top_srcdir)/src/midend/programAnalysis/ssaUnfilteredCfg \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
     -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow \
     -I$(top_srcdir)/src/midend/programAnalysis/VirtualFunctionAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/graphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
      $(ROSE_SIDEEFFECTS_INCLUDE) \
      $(ROSE_DATABASE_INCLUDE) \
      $(ROSE_GUI_INCLUDE) \
      $(ROSE_QT_INCLUDE) \
      $(ROSE_SQLITE_DATABASE_INCLUDE) \
			$(ROSE_SIDEEFFECT_INCLUDE) \
      $(SQLITE_DATABASE_INCLUDE) \
     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
     -I$(top_srcdir)/src/roseSupport \
     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
     -I$(top_srcdir)/src/util/graphs \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/libltdl \
     $(ROSE_PHP_INCLUDES) \
     $(ROSE_PYTHON_INCLUDES) \
     $(ROSE_YICES_INCLUDES) \
     $(ROSE_DWARF_INCLUDES) \
     $(ROSE_WINE_INCLUDES) \
     $(VALGRIND_CFLAGS) \
     $(SQLITE3_CFLAGS) \
     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) -DBOOST_REGEX_MATCH_EXTRA \
     $(ROSE_PCH_INCLUDE) \
     $(INTEL_PIN_INCLUDE_PATHS) \
     $(ROSE_ETHER_INCLUDE)


# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the 
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
#ROSE_INCLUDES = \
#     $(ROSE_BOOST_PREINCLUDE_PATH) \
#     -I$(top_builddir)/src/roseSupport \
#     -I$(top_builddir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src \
#     -I$(top_srcdir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
#     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
#     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
#     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
#     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
#     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
#     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
#     -I$(top_srcdir)/src/frontend/BinaryFormats \
#     -I$(top_srcdir)/src/frontend/BinaryLoader \
#     -I$(top_srcdir)/src/frontend/Disassemblers \
#     -I$(top_srcdir)/src/backend/unparser \
#     -I$(top_srcdir)/src/backend/unparser/formatSupport \
#     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
#     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
#     -I$(top_srcdir)/src/backend/asmUnparser \
#     -I$(top_srcdir)/src/util \
#     -I$(top_srcdir)/src/util/support \
#     -I$(top_srcdir)/src/util/graphs  \
#     -I$(top_srcdir)/src/util/stringSupport \
#     -I$(top_srcdir)/src/util/commandlineProcessing \
#     -I$(top_srcdir)/src/midend/astDiagnostics \
#     -I$(top_srcdir)/src/midend/astProcessing \
#     -I$(top_srcdir)/src/midend/astQuery \
#     -I$(top_srcdir)/src/midend/binaryAnalyses \
#     -I$(top_srcdir)/src/midend/programAnalysis \
#     -I$(top_srcdir)/src/roseSupport \
#     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
#     -I$(top_srcdir)/src/util/graphs \
#     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) -DBOOST_REGEX_MATCH_EXTRA 


# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph 
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer 
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they 
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently 
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)
ROSE_LIBS = $(top_builddir)/src/librose.la -lm  $(JAVA_JVM_LINK) \
  $(SQLITE_DATABASE_LIBS) $(QT_LIBS)  $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(SQLITE3_LDFLAGS)  $(RT_LIBS) \
  $(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
  $(ROSE_GUI_LIBS_WITH_PATH) $(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
  $(ROSE_INTEL_COMPILER_MATH_LIBS)


# DQ (3/13/2009): Removed this from ROSE_LIBS because libtool warnings say it should be in AM_LDFLAGS
# (this is because it has been moved from being linked statically to being linked dynamically).
# $(ROSE_DWARF_LIBS_WITH_PATH)
# AM_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext
# DQ (3/14/2009): Need to add rpath to LDFLAGS instead of LDADD (to follow libtool rules).
# LDFLAGS += $(ROSE_DWARF_LIBS_WITH_PATH)

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)
#   $(LIB_QT) $(JAVA_JVM_LIB) 

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS 

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly 
# with make distcheck rule 
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Location of sample binary files (executables, libraries, etc) that serve as input to
# some of the binary analysis tests.
BINARY_SAMPLES = $(top_srcdir)/binaries/samples

# Test harness variables. See "rth_run.pl --help" for more info.
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl \
	srcdir=$(srcdir) top_srcdir=$(top_srcdir) \
	VALGRIND=$(VALGRIND) BINARY_SAMPLES=$(BINARY_SAMPLES)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl
SUBDIRS = ctests gnu kandr std
TESTCODES = \
t0001.cc\
t0002.cc\
t0003.cc\
t0004.cc\
t0005.cc\
t0008.cc\
t0009.cc\
t0010.cc\
t0011.cc\
t0013.cc\
t0014a.cc\
t0015.cc\
t0016.cc\
t0017.cc\
t0018.cc\
t0019.cc\
t0020.cc\
t0021.cc\
t0022.cc\
t0023.cc\
t0024.cc\
t0025.cc\
t0026.cc\
t0027.cc\
t0028.cc\
t0029.cc\
t0030a.cc\
t0030b.cc\
t0034.cc\
t0035.cc\
t0037.cc\
t0038.cc\
t0039.cc\
t0043.cc\
t0044.cc\
t0045.cc\
t0046.cc\
t0047.cc\
t0048.cc\
t0049.cc\
t0050.cc\
t0051.cc\
t0052.cc\
t0053.cc\
t0056.cc\
t0057.cc\
t0058.cc\
t0059.cc\
t0060.cc\
t0061.cc\
t0064.cc\
t0065.cc\
t0066.cc\
t0067.cc\
t0070.cc


# Will it never end!  g++ version 4.0.2 fails to pass
# this test with the ROSE generated code. They to pass 
# with g++ version 3.3.2.
START_OF_FAILED_TESTS_USING_ROSE_WITH_GNU_VER_4_X = \
t0071.cc\
t0075.cc\
t0076.cc\
t0077.cc

START_OF_FAILED_TESTS_USING_ROSE = \
t0080.cc\
t0081.cc\
t0083.cc\
t0084.cc\
t0085.cc\
t0086.cc\
t0090.cc\
t0092.cc\
t0094.cc\
t0095.cc\
t0096.cc\
t0097.cc\
t0098.cc\
t0100.cc\
t0101.cc\
t0102.cc\
t0103.cc\
t0104.cc\
t0105.cc\
t0107.cc\
t0108b.cc\
t0108.cc\
t0110.cc\
t0112.cc\
t0113.cc\
t0114.cc\
t0115.cc\
t0119.cc\
t0121.cc\
t0122.cc\
t0125.cc\
t0128.cc\
t0130.cc\
t0131.cc\
t0133.cc\
t0135.cc\
t0149.cc\
t0150.cc\
t0151.cc\
t0152.cc\
t0153.cc\
t0154.cc\
t0155.cc\
t0156.cc\
t0158.cc\
t0160.cc\
t0161.cc\
t0164.cc\
t0165.cc\
t0166.cc\
t0167.cc\
t0168.cc\
t0169.cc\
t0170.cc\
t0171.cc\
t0172.cc\
t0173.cc\
t0174.cc\
t0175.cc\
t0176.cc\
t0179.cc\
t0180.cc\
t0181.cc\
t0182.cc\
t0183.cc\
t0184.cc\
t0185.cc\
t0186.cc\
t0187.cc\
t0188.cc\
t0189.cc\
t0190.cc\
t0191.cc\
t0192.cc\
t0193.cc\
t0194.cc\
t0195.cc\
t0197.cc\
t0198.cc\
t0199.cc\
t0200.cc\
t0201.cc\
t0202.cc\
t0203.cc\
t0204.cc\
t0205.cc\
t0206.cc\
t0207.cc\
t0208.cc\
t0210.cc\
t0211.cc\
t0212.cc\
t0213.cc\
t0214.cc\
t0217.cc\
t0218.cc\
t0219.cc\
t0220.cc\
t0222.cc\
t0223.cc\
t0225.cc\
t0226.cc\
t0227.cc\
t0228b.cc\
t0229.cc\
t0231.cc\
t0232.cc\
t0233.cc\
t0234.cc\
t0235.cc\
t0236.cc\
t0237.cc\
t0238.cc\
t0239.cc\
t0240.cc\
t0241.cc\
t0245.cc\
t0246.cc\
t0247.cc\
t0248.cc\
t0250.cc\
t0252.cc\
t0253.cc\
t0254.cc\
t0255.cc\
t0256.cc\
t0257.cc\
t0259.cc\
t0260.cc\
t0262.cc\
t0266.cc\
t0268a.cc\
t0268.cc\
t0269.cc\
t0270.cc\
t0273.cc\
t0274.cc\
t0275.cc\
t0276.cc\
t0277.cc\
t0278.cc\
t0280.cc\
t0281.cc\
t0283.cc\
t0284.cc\
t0285.cc\
t0286.cc\
t0289.cc\
t0290a.cc\
t0290.cc\
t0291.cc\
t0292.cc\
t0293.cc\
t0294.cc\
t0295.cc\
t0296.cc\
t0298.cc\
t0300.cc\
t0301.cc\
t0302.cc\
t0303.cc\
t0304.cc\
t0305.cc\
t0306.cc\
t0307.cc\
t0308.cc\
t0312.cc\
t0313.cc\
t0314.cc\
t0315.cc\
t0316.cc\
t0317.cc\
t0318.cc\
t0319.cc\
t0320.cc\
t0321.cc\
t0322.cc\
t0323.cc\
t0324.cc\
t0325.cc\
t0326.cc\
t0327.cc\
t0328.cc\
t0329.cc\
t0330.cc\
t0331.cc\
t0332.cc\
t0333.cc\
t0334.cc\
t0335.cc\
t0336.cc\
t0337.cc\
t0338.cc\
t0340.cc\
t0341.cc\
t0343.cc\
t0344.cc\
t0348.cc\
t0349.cc\
t0350.cc\
t0351.cc\
t0352.cc\
t0353.cc\
t0355.cc\
t0356.cc\
t0357.cc\
t0358.cc\
t0359.cc\
t0360.cc\
t0361.cc\
t0362.cc\
t0363.cc\
t0364.cc\
t0365.cc\
t0366.cc\
t0367.cc\
t0368.cc\
t0369.cc\
t0370.cc\
t0372.cc\
t0373.cc\
t0374.cc\
t0375.cc\
t0376.cc\
t0377.cc\
t0378.cc\
t0379.cc\
t0381.cc\
t0382.cc\
t0384.cc\
t0386.cc\
t0387.cc\
t0388.cc\
t0389.cc\
t0390.cc\
t0391.cc\
t0392.cc\
t0393.cc\
t0394.cc\
t0395.cc\
t0396.cc\
t0397.cc\
t0398.cc\
t0399.cc\
t0400.cc\
t0404.cc\
t0405.cc\
t0406.cc\
t0407.cc\
t0409.cc\
t0410.cc\
t0411.cc\
t0412.cc\
t0413.cc\
t0414.cc\
t0415.cc\
t0417.cc\
t0418.cc\
t0419.cc\
t0420.cc\
t0421.cc\
t0422a.cc\
t0422.cc\
t0424.cc\
t0425.cc\
t0426.cc\
t0428.cc\
t0430.cc\
t0432.cc\
t0433.cc\
t0434.cc\
t0435.cc\
t0436.cc\
t0437.cc\
t0438a.cc\
t0438.cc\
t0439.cc\
t0440.cc\
t0441a.cc\
t0441.cc\
t0442.cc\
t0443.cc\
t0444.cc\
t0445.cc\
t0446.cc\
t0447.cc\
t0448.cc\
t0450.cc\
t0451.cc\
t0453.cc\
t0454.cc\
t0455.cc\
t0456.cc\
t0457.cc\
t0458.cc\
t0459.cc\
t0460.cc\
t0461.cc\
t0462.cc\
t0463.cc\
t0464.cc\
t0467.cc\
t0468.cc\
t0469.cc\
t0470.cc\
t0471.cc\
t0472.cc\
t0473.cc\
t0474.cc\
t0475.cc\
t0476.cc\
t0477.cc\
t0478.cc\
t0479.cc\
t0480.cc\
t0481.cc\
t0482.cc\
t0483.cc\
t0484.cc\
t0485.cc\
t0486.cc\
t0487b.cc\
t0487.cc\
t0488.cc\
t0489.cc\
t0490.cc\
t0491.cc\
t0492.cc\
t0493.cc\
t0494.cc\
t0495.cc\
t0496.cc\
t0497.cc\
t0498.cc\
t0499.cc\
t0500.cc\
t0501.cc\
t0502.cc\
t0503.cc\
t0504.cc\
t0505.cc\
t0506.cc\
t0507.cc\
t0508.cc\
t0510.cc\
t0512.cc\
t0513.cc\
t0514.cc\
t0515.cc\
t0517.cc\
t0521.cc\
t0522.cc\
t0523.cc\
t0524.cc\
t0525.cc\
t0526.cc\
t0527.cc\
t0528.cc\
t0530.cc\
t0531.cc\
t0532.cc\
t0534.cc\
t0535.cc\
t0536.cc\
t0537.cc\
t0538.cc\
t0539_10.cc\
t0539_11.cc\
t0539_1.cc\
t0539_2.cc\
t0539_3.cc\
t0539_4.cc\
t0539_5.cc\
t0539_6.cc\
t0539_7.cc\
t0539_8.cc\
t0540.cc\
t0541.cc\
t0542.cc\
t0543.cc\
t0544.cc\
t0545.cc\
t0546.cc\
t0547.cc\
t0548.cc\
t0549.cc\
t0550.cc\
t0551.cc\
t0552.cc\
t0553.cc\
t0554.cc\
t0555.cc\
t0556.cc\
t0557.cc\
t0558.cc\
t0559.cc\
t0560.cc\
t0562.cc\
t0563.cc\
t0564.cc\
t0565.cc\
t0566.cc\
t0567.cc\
t0568.cc\
t0569.cc\
t0570.cc\
t0571.cc\
t0572.cc\
t0573.cc\
t0574.cc\
t0575.cc\
t0577.cc\
d0001.cc\
d0002.cc\
d0003.cc\
d0004.cc\
d0005.cc\
d0006.cc\
d0007.cc\
d0008.cc\
d0009.cc\
d0010.cc\
d0011.cc\
d0012.cc\
d0013.cc\
d0014.cc\
d0015.cc\
d0016.cc\
d0017.cc\
d0018.cc\
d0019.cc\
d0020.cc\
d0021.cc\
d0022.cc\
d0023.cc\
d0024.cc\
d0025.cc\
d0026.cc\
d0027.cc\
d0028.cc\
d0029.cc\
d0030.cc\
d0031.cc\
d0032.cc\
d0034.cc\
d0035.cc\
d0036.cc\
d0037.cc\
d0038.cc\
d0039.cc\
d0040.cc\
d0046.cc\
d0046elab.cc\
d0047.cc\
d0048.cc\
d0048elab.cc\
d0049.cc\
d0050.cc\
d0051.cc\
d0051elab.cc\
d0052.cc\
d0054.cc\
d0055.cc\
d0056.cc\
d0057.cc\
d0058.cc\
d0059.cc\
d0060.cc\
d0061.cc \
d0064.cc\
d0065.cc\
d0066.cc\
d0067.cc\
d0068.cc\
d0069.cc\
d0070.cc\
d0071.cc\
d0072.cc\
d0073.cc\
d0074.cc\
d0075.cc\
d0079.cc\
d0080.cc\
d0084.cc\
d0087.cc\
d0088.cc\
d0089.cc\
d0090.cc\
d0091.cc\
d0097.cc\
d0098.cc\
d0099.cc\
d0100.cc\
d0101.cc\
d0102.cc\
d0104.cc\
d0105.cc\
d0106.cc\
d0107.cc\
d0108.cc\
d0109.cc\
d0111.cc\
d0113.cc\
d0114.cc\
d0116.cc\
d0117.cc\
d0119.cc\
d0121.cc\
d0124.cc\
k0002.cc\
k0003.cc\
k0004.cc\
k0005a.cc\
k0005.cc\
k0006.cc\
k0007.cc\
k0009.cc\
k0010.cc\
k0011.cc\
k0012.cc\
k0013.cc\
k0014.cc\
k0015.cc\
k0016.cc\
k0017.cc\
k0018.cc\
k0019.cc\
k0020.cc\
k0021.cc\
k0022.cc\
k0023.cc\
k0024.cc\
k0025.cc\
k0026.cc\
k0027.cc\
k0029.cc\
k0030.cc\
k0031.cc\
k0032.cc\
k0033.cc\
k0035.cc\
k0036.cc\
k0037.cc\
k0038.cc\
k0039.cc\
k0040.cc\
k0041.cc\
k0042.cc\
k0043.cc\
k0045.cc\
k0046a.cc\
k0046b.cc\
k0046.cc\
k0047.cc\
k0048.cc\
k0049.cc\
k0050.cc\
k0051.cc\
k0052.cc\
k0054.cc\
k0055.cc\
k0056.cc\
k0057.cc\
k0058.cc\
sg0001.cc\
t0032.cc\
t0033.cc\
t0041.cc\
t0042.cc\
t0055.cc\
t0063.cc\
t0073.cc\
t0087.cc\
t0088.cc\
t0089.cc\
t0106.cc\
t0111.cc\
t0124.cc


#t0147.cc\
#t0148.cc\
#t0157.cc\
#t0159.cc\
#t0162.cc\
#t0163.cc\
#t0177.cc\
#t0178.cc\
#t0196.cc\
#t0209.cc\
#t0215.cc\
#t0216.cc\
#t0221.cc\
#t0224.cc\
#t0228.cc\
#t0230.cc\
#t0242.cc\
#t0243.cc\
#t0244.cc\
#t0249.cc\
#t0251.cc\
#t0258.cc\
#t0261.cc\
#t0263.cc\
#t0264.cc\
#t0265.cc\
#t0267.cc\
#t0279.cc\
#t0282.cc\
#t0287.cc\
#t0288.cc\
#t0297.cc\
#t0299.cc\
#t0309.cc\
#t0310.cc\
#t0311.cc\
#t0339.cc\
#t0342.cc\
#t0345.cc\
#t0346.cc\
#t0347.cc\
#t0354.cc\
#t0371.cc\
#t0380.cc\
#t0383.cc\
#t0385.cc\
#t0401.cc\
#t0402.cc\
#t0403.cc\
#t0408.cc\
#t0416.cc\
#t0423.cc\
#t0427.cc\
#t0429.cc\
#t0431.cc\
#t0452.cc\
#t0466.cc\
#t0509.cc\
#t0511.cc\
#t0516.cc\
#t0518.cc\
#t0519.cc\
#t0520.cc\
#t0529.cc\
#t0533.cc\
#t0561.cc\
#t0576.cc\
#t0578.cc\
#d0041.cc\
#d0050elab.cc\
#d0053.cc\
# RECURSIVE: d0062.cc\
# RECURSIVE: d0063.cc\
# d0103.cc\
#d0110.cc\
#d0112.cc\
#d0115.cc\
#d0123.cc\
#std/13.3.3.1.4.cc\
#std/13.3.3.2d.cc\
#std/7.3.3g.cc\
#std/7.3.3j.cc\
#std/13.3.3.2a.cc\
#std/13.3.3b.cc\
#std/3.4.5.cc\
#std/7.3.1.cc\
#std/7.3.3e.cc\
#std/7.3.3h.cc\
#std/7.3.4c.cc\
#std/13.3.3.2b.cc\
#std/13.cc\
#std/7.3.3i.cc\
#std/7.3.4a.cc\
#gnu/d0076.cc\
#gnu/g0023.cc\
#gnu/g0024.cc\
#gnu/t0128.cc\
#gnu/g0020.cc\
#gnu/g0025.cc\
#gnu/g0026.cc\
#gnu/g0027.cc\
#gnu/t0125.cc\
#gnu/t0130.cc\
#gnu/bugs/d0106.cc\
#gnu/bugs/gb0005.cc\
#msvc/m0001.cc\
#k0044.cc\
#k0053.cc\
#t0006.cc\
#t0007.cc\
#t0012.cc\
#t0014.cc\
#t0030.cc\
#t0031.cc\
#t0036.cc\
#t0040.cc\
#t0054.cc\
#t0062.cc\
#t0068.cc\
#t0069.cc\
#t0072.cc\
#t0074.cc\
#t0078.cc\
#t0079.cc\
#t0082.cc\
#t0091.cc\
#t0093.cc\
#t0099.cc\
#t0109.cc\
#t0116.cc\
#t0117.cc\
#t0118.cc\
#t0120.cc\
#t0123.cc\
#t0126.cc\
#t0134.cc\
#t0136.cc\
#t0137.cc\
#t0138.cc\
#t0139.cc\
#t0140.cc\
#t0141.cc\
#t0142.cc\
#t0143.cc\
#t0144.cc\
#t0145.cc\
#t0146.cc
#t0272.cc\
#t0271.cc\
#t0449.cc\
#t0465.cc\
#t0539.cc\
#t0539_9.cc\
#d0118.cc\
#d0120.cc\
#gnu/d0082.cc\
#gnu/g0019.cc\
#gnu/g0015.cc\
#gnu/g0021.cc\
#gnu/g0031.cc\
#t0129.cc\
#gnu/g0016.cc\
#gnu/k0002.cc\
#gnu/bugs/gb0007.cc\
#gnu/bugs/gb0009.cc\
#gnu/bugs/gb0008.cc\
#gnu/bugs/gb0010.cc\
#gnu/bugs/gb0011.cc\
#k0028.cc\
#k0034.cc\
#c/dcC0012.c\
#gnu/dC0002.c\
#gnu/dC0007.c\
#gnu/d0096.c\
#gnu/g0009.c\
#gnu/d0122.c\
#gnu/d0099.c\
#gnu/dC0014.c\
#c/t0004.c\
#c/t0013.c\
#c/t0022.c\
#c99/d0077.c\
#c99/n0001.c\
#c99/n0002.c\
#c99/t0133.c
#c/dC0020.c
#k0001.cc\
#t0127.cc\
#t0132.cc

# Build the list of object files
TEST_Objects = ${TESTCODES:.cc=.o}
ROSE_FLAGS = --edg:no_warnings -w
TRANSLATOR_EXECUTABLE = $(top_builddir)/tests/testTranslator 
TEST_TRANSLATOR = $(TRANSLATOR_EXECUTABLE) $(ROSE_FLAGS)

# DQ (9/3/2006): the directory "notCompilable" is a set of codes that demonstrate ambiguities (as I recall).
EXTRA_DIST = $(TESTCODES) notCompilable
all: all-recursive

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  --ignore-deps tests/CompileTests/ElsaTestCases/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  --ignore-deps tests/CompileTests/ElsaTestCases/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(mkdir_p) $(distdir)/../../../config
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(mkdir_p) "$(distdir)/$$subdir" \
	    || exit 1; \
	    distdir=`$(am__cd) $(distdir) && pwd`; \
	    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$top_distdir" \
	        distdir="$$distdir/$$subdir" \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-recursive
all-am: Makefile
installdirs: installdirs-recursive
installdirs-am:
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-generic clean-libtool clean-local mostlyclean-am

distclean: distclean-recursive
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-libtool \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

info: info-recursive

info-am:

install-data-am:

install-exec-am:

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-generic mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-info-am

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am check check-am \
	check-local clean clean-generic clean-libtool clean-local \
	clean-recursive ctags ctags-recursive distclean \
	distclean-generic distclean-libtool distclean-recursive \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am maintainer-clean maintainer-clean-generic \
	maintainer-clean-recursive mostlyclean mostlyclean-generic \
	mostlyclean-libtool mostlyclean-recursive pdf pdf-am ps ps-am \
	tags tags-recursive uninstall uninstall-am uninstall-info-am


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
#export ROSE_IN_BUILD_TREE=$(top_builddir)

# TESTCODE_INCLUDES = -I$(top_srcdir)/tests/CompileTests/A++Code -I$(srcdir) 

$(TEST_Objects): $(TESTCODES)
	$(TEST_TRANSLATOR) $(INCLUDES) -c $(srcdir)/$(@:.o=.cc)

clean-local:
	rm -f C/*.o *.o C/rose_*.c rose_*.C rose_*.c rose_*.cc *.sage.C test2001_??.C.show *.dot *.ps \
              *.C.pdf *.C.edg.pdf *.pdf *.int.C core test2005_56
	rm -rf ti_files *.ti *.et

check-local: $(TRANSLATOR_EXECUTABLE) 
	@$(MAKE) $(TEST_Objects)
	@$(MAKE) $(TEST2_Objects)
	@echo "***********************************************************************************************************"
	@echo "****** ROSE/tests/CompileTests/C++Code/ElsaTestCases: make check rule complete (terminated normally) ******"
	@echo "***********************************************************************************************************"
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
