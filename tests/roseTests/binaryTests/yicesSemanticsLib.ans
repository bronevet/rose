=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482c8:push   ebp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={} expr=v53[32] }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8} expr=0x080482c9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482c9:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9} expr=0x080482cb[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482cb:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb} expr=(add[32] (add[32] v52[32] -4[32]) -8[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9,0x080482cb} expr=0x080482ce[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482ce:call   0x08048364<call_gmon_start>
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482ce} expr=0x08048364[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={0x080482c8,0x080482c9,0x080482cb,0x080482ce} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={0x080482c8,0x080482c9,0x080482cb,0x080482ce} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={0x080482c8,0x080482c9,0x080482cb,0x080482ce} expr=-126[8] }
          flags = { }
        address = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={0x080482c8,0x080482c9,0x080482cb,0x080482ce} expr=-45[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d3:call   0x080483d0<frame_dummy>
    registers:
        ax      = { defs={} expr=v223[32] }
        cx      = { defs={} expr=v224[32] }
        dx      = { defs={} expr=v225[32] }
        bx      = { defs={} expr=v226[32] }
        sp      = { defs={0x080482d3} expr=(add[32] v227[32] -4[32]) }
        bp      = { defs={} expr=v228[32] }
        si      = { defs={} expr=v229[32] }
        di      = { defs={} expr=v230[32] }
        es      = { defs={} expr=v231[16] }
        cs      = { defs={} expr=v232[16] }
        ss      = { defs={} expr=v233[16] }
        ds      = { defs={} expr=v234[16] }
        fs      = { defs={} expr=v235[16] }
        gs      = { defs={} expr=v236[16] }
        cf      = { defs={} expr=v237[1] }
        ?1      = { defs={} expr=v238[1] }
        pf      = { defs={} expr=v239[1] }
        ?3      = { defs={} expr=v240[1] }
        af      = { defs={} expr=v241[1] }
        ?5      = { defs={} expr=v242[1] }
        zf      = { defs={} expr=v243[1] }
        sf      = { defs={} expr=v244[1] }
        tf      = { defs={} expr=v245[1] }
        if      = { defs={} expr=v246[1] }
        df      = { defs={} expr=v247[1] }
        of      = { defs={} expr=v248[1] }
        iopl0   = { defs={} expr=v249[1] }
        iopl1   = { defs={} expr=v250[1] }
        nt      = { defs={} expr=v251[1] }
        ?15     = { defs={} expr=v252[1] }
        rf      = { defs={} expr=v253[1] }
        vm      = { defs={} expr=v254[1] }
        ac      = { defs={} expr=v255[1] }
        vif     = { defs={} expr=v256[1] }
        vip     = { defs={} expr=v257[1] }
        id      = { defs={} expr=v258[1] }
        ?22     = { defs={} expr=v259[1] }
        ?23     = { defs={} expr=v260[1] }
        ?24     = { defs={} expr=v261[1] }
        ?25     = { defs={} expr=v262[1] }
        ?26     = { defs={} expr=v263[1] }
        ?27     = { defs={} expr=v264[1] }
        ?28     = { defs={} expr=v265[1] }
        ?29     = { defs={} expr=v266[1] }
        ?30     = { defs={} expr=v267[1] }
        ?31     = { defs={} expr=v268[1] }
        ip      = { defs={0x080482d3} expr=0x080483d0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v227[32] -4[32]) 3[32]) }
          value = { defs={0x080482d3} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v227[32] -4[32]) 2[32]) }
          value = { defs={0x080482d3} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v227[32] -4[32]) 1[32]) }
          value = { defs={0x080482d3} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d3} expr=(add[32] v227[32] -4[32]) }
          value = { defs={0x080482d3} expr=-40[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d8:call   0x08048580<__do_global_ctors_aux>
    registers:
        ax      = { defs={} expr=v330[32] }
        cx      = { defs={} expr=v331[32] }
        dx      = { defs={} expr=v332[32] }
        bx      = { defs={} expr=v333[32] }
        sp      = { defs={0x080482d8} expr=(add[32] v334[32] -4[32]) }
        bp      = { defs={} expr=v335[32] }
        si      = { defs={} expr=v336[32] }
        di      = { defs={} expr=v337[32] }
        es      = { defs={} expr=v338[16] }
        cs      = { defs={} expr=v339[16] }
        ss      = { defs={} expr=v340[16] }
        ds      = { defs={} expr=v341[16] }
        fs      = { defs={} expr=v342[16] }
        gs      = { defs={} expr=v343[16] }
        cf      = { defs={} expr=v344[1] }
        ?1      = { defs={} expr=v345[1] }
        pf      = { defs={} expr=v346[1] }
        ?3      = { defs={} expr=v347[1] }
        af      = { defs={} expr=v348[1] }
        ?5      = { defs={} expr=v349[1] }
        zf      = { defs={} expr=v350[1] }
        sf      = { defs={} expr=v351[1] }
        tf      = { defs={} expr=v352[1] }
        if      = { defs={} expr=v353[1] }
        df      = { defs={} expr=v354[1] }
        of      = { defs={} expr=v355[1] }
        iopl0   = { defs={} expr=v356[1] }
        iopl1   = { defs={} expr=v357[1] }
        nt      = { defs={} expr=v358[1] }
        ?15     = { defs={} expr=v359[1] }
        rf      = { defs={} expr=v360[1] }
        vm      = { defs={} expr=v361[1] }
        ac      = { defs={} expr=v362[1] }
        vif     = { defs={} expr=v363[1] }
        vip     = { defs={} expr=v364[1] }
        id      = { defs={} expr=v365[1] }
        ?22     = { defs={} expr=v366[1] }
        ?23     = { defs={} expr=v367[1] }
        ?24     = { defs={} expr=v368[1] }
        ?25     = { defs={} expr=v369[1] }
        ?26     = { defs={} expr=v370[1] }
        ?27     = { defs={} expr=v371[1] }
        ?28     = { defs={} expr=v372[1] }
        ?29     = { defs={} expr=v373[1] }
        ?30     = { defs={} expr=v374[1] }
        ?31     = { defs={} expr=v375[1] }
        ip      = { defs={0x080482d8} expr=0x08048580[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v334[32] -4[32]) 3[32]) }
          value = { defs={0x080482d8} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v334[32] -4[32]) 2[32]) }
          value = { defs={0x080482d8} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v334[32] -4[32]) 1[32]) }
          value = { defs={0x080482d8} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d8} expr=(add[32] v334[32] -4[32]) }
          value = { defs={0x080482d8} expr=-35[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482dd:leave  
    registers:
        ax      = { defs={} expr=v437[32] }
        cx      = { defs={} expr=v438[32] }
        dx      = { defs={} expr=v439[32] }
        bx      = { defs={} expr=v440[32] }
        sp      = { defs={0x080482dd} expr=(add[32] v442[32] 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v493[8]) (shr0[32] 8[32] (uextend[32] 32[32] v494[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v495[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v496[8]))) }
        si      = { defs={} expr=v443[32] }
        di      = { defs={} expr=v444[32] }
        es      = { defs={} expr=v445[16] }
        cs      = { defs={} expr=v446[16] }
        ss      = { defs={} expr=v447[16] }
        ds      = { defs={} expr=v448[16] }
        fs      = { defs={} expr=v449[16] }
        gs      = { defs={} expr=v450[16] }
        cf      = { defs={} expr=v451[1] }
        ?1      = { defs={} expr=v452[1] }
        pf      = { defs={} expr=v453[1] }
        ?3      = { defs={} expr=v454[1] }
        af      = { defs={} expr=v455[1] }
        ?5      = { defs={} expr=v456[1] }
        zf      = { defs={} expr=v457[1] }
        sf      = { defs={} expr=v458[1] }
        tf      = { defs={} expr=v459[1] }
        if      = { defs={} expr=v460[1] }
        df      = { defs={} expr=v461[1] }
        of      = { defs={} expr=v462[1] }
        iopl0   = { defs={} expr=v463[1] }
        iopl1   = { defs={} expr=v464[1] }
        nt      = { defs={} expr=v465[1] }
        ?15     = { defs={} expr=v466[1] }
        rf      = { defs={} expr=v467[1] }
        vm      = { defs={} expr=v468[1] }
        ac      = { defs={} expr=v469[1] }
        vif     = { defs={} expr=v470[1] }
        vip     = { defs={} expr=v471[1] }
        id      = { defs={} expr=v472[1] }
        ?22     = { defs={} expr=v473[1] }
        ?23     = { defs={} expr=v474[1] }
        ?24     = { defs={} expr=v475[1] }
        ?25     = { defs={} expr=v476[1] }
        ?26     = { defs={} expr=v477[1] }
        ?27     = { defs={} expr=v478[1] }
        ?28     = { defs={} expr=v479[1] }
        ?29     = { defs={} expr=v480[1] }
        ?30     = { defs={} expr=v481[1] }
        ?31     = { defs={} expr=v482[1] }
        ip      = { defs={0x080482dd} expr=0x080482de[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v442[32] 3[32]) }
          value = { defs={} expr=v496[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v442[32] 2[32]) }
          value = { defs={} expr=v495[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v442[32] 1[32]) }
          value = { defs={} expr=v494[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v442[32] }
          value = { defs={} expr=v493[8] }
          flags = { rdonly }
0x80482de:ret    
    registers:
        ax      = { defs={} expr=v437[32] }
        cx      = { defs={} expr=v438[32] }
        dx      = { defs={} expr=v439[32] }
        bx      = { defs={} expr=v440[32] }
        sp      = { defs={0x080482dd,0x080482de} expr=(add[32] (add[32] v442[32] 4[32]) 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v493[8]) (shr0[32] 8[32] (uextend[32] 32[32] v494[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v495[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v496[8]))) }
        si      = { defs={} expr=v443[32] }
        di      = { defs={} expr=v444[32] }
        es      = { defs={} expr=v445[16] }
        cs      = { defs={} expr=v446[16] }
        ss      = { defs={} expr=v447[16] }
        ds      = { defs={} expr=v448[16] }
        fs      = { defs={} expr=v449[16] }
        gs      = { defs={} expr=v450[16] }
        cf      = { defs={} expr=v451[1] }
        ?1      = { defs={} expr=v452[1] }
        pf      = { defs={} expr=v453[1] }
        ?3      = { defs={} expr=v454[1] }
        af      = { defs={} expr=v455[1] }
        ?5      = { defs={} expr=v456[1] }
        zf      = { defs={} expr=v457[1] }
        sf      = { defs={} expr=v458[1] }
        tf      = { defs={} expr=v459[1] }
        if      = { defs={} expr=v460[1] }
        df      = { defs={} expr=v461[1] }
        of      = { defs={} expr=v462[1] }
        iopl0   = { defs={} expr=v463[1] }
        iopl1   = { defs={} expr=v464[1] }
        nt      = { defs={} expr=v465[1] }
        ?15     = { defs={} expr=v466[1] }
        rf      = { defs={} expr=v467[1] }
        vm      = { defs={} expr=v468[1] }
        ac      = { defs={} expr=v469[1] }
        vif     = { defs={} expr=v470[1] }
        vip     = { defs={} expr=v471[1] }
        id      = { defs={} expr=v472[1] }
        ?22     = { defs={} expr=v473[1] }
        ?23     = { defs={} expr=v474[1] }
        ?24     = { defs={} expr=v475[1] }
        ?25     = { defs={} expr=v476[1] }
        ?26     = { defs={} expr=v477[1] }
        ?27     = { defs={} expr=v478[1] }
        ?28     = { defs={} expr=v479[1] }
        ?29     = { defs={} expr=v480[1] }
        ?30     = { defs={} expr=v481[1] }
        ?31     = { defs={} expr=v482[1] }
        ip      = { defs={0x080482de} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v511[8]) (shr0[32] 8[32] (uextend[32] 32[32] v512[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v513[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v514[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v442[32] 4[32]) 3[32]) }
          value = { defs={} expr=v514[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v442[32] 4[32]) 2[32]) }
          value = { defs={} expr=v513[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v442[32] 4[32]) 1[32]) }
          value = { defs={} expr=v512[8] }
          flags = { rdonly }
        address = { defs={0x080482dd,0x080482de} expr=(add[32] v442[32] 4[32]) }
          value = { defs={} expr=v511[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v442[32] 3[32]) }
          value = { defs={} expr=v496[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v442[32] 2[32]) }
          value = { defs={} expr=v495[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v442[32] 1[32]) }
          value = { defs={} expr=v494[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v442[32] }
          value = { defs={} expr=v493[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>]
    registers:
        ax      = { defs={} expr=v569[32] }
        cx      = { defs={} expr=v570[32] }
        dx      = { defs={} expr=v571[32] }
        bx      = { defs={} expr=v572[32] }
        sp      = { defs={} expr=v573[32] }
        bp      = { defs={} expr=v574[32] }
        si      = { defs={} expr=v575[32] }
        di      = { defs={} expr=v576[32] }
        es      = { defs={} expr=v577[16] }
        cs      = { defs={} expr=v578[16] }
        ss      = { defs={} expr=v579[16] }
        ds      = { defs={} expr=v580[16] }
        fs      = { defs={} expr=v581[16] }
        gs      = { defs={} expr=v582[16] }
        cf      = { defs={} expr=v583[1] }
        ?1      = { defs={} expr=v584[1] }
        pf      = { defs={} expr=v585[1] }
        ?3      = { defs={} expr=v586[1] }
        af      = { defs={} expr=v587[1] }
        ?5      = { defs={} expr=v588[1] }
        zf      = { defs={} expr=v589[1] }
        sf      = { defs={} expr=v590[1] }
        tf      = { defs={} expr=v591[1] }
        if      = { defs={} expr=v592[1] }
        df      = { defs={} expr=v593[1] }
        of      = { defs={} expr=v594[1] }
        iopl0   = { defs={} expr=v595[1] }
        iopl1   = { defs={} expr=v596[1] }
        nt      = { defs={} expr=v597[1] }
        ?15     = { defs={} expr=v598[1] }
        rf      = { defs={} expr=v599[1] }
        vm      = { defs={} expr=v600[1] }
        ac      = { defs={} expr=v601[1] }
        vif     = { defs={} expr=v602[1] }
        vip     = { defs={} expr=v603[1] }
        id      = { defs={} expr=v604[1] }
        ?22     = { defs={} expr=v605[1] }
        ?23     = { defs={} expr=v606[1] }
        ?24     = { defs={} expr=v607[1] }
        ?25     = { defs={} expr=v608[1] }
        ?26     = { defs={} expr=v609[1] }
        ?27     = { defs={} expr=v610[1] }
        ?28     = { defs={} expr=v611[1] }
        ?29     = { defs={} expr=v612[1] }
        ?30     = { defs={} expr=v613[1] }
        ?31     = { defs={} expr=v614[1] }
        ip      = { defs={0x080482f0} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v621[8]) (shr0[32] 8[32] (uextend[32] 32[32] v622[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v623[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v624[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496d7[32] }
          value = { defs={} expr=v624[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d6[32] }
          value = { defs={} expr=v623[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d5[32] }
          value = { defs={} expr=v622[8] }
          flags = { rdonly }
        address = { defs={0x080482f0} expr=0x080496d4[32] }
          value = { defs={} expr=v621[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>]
    registers:
        ax      = { defs={} expr=v678[32] }
        cx      = { defs={} expr=v679[32] }
        dx      = { defs={} expr=v680[32] }
        bx      = { defs={} expr=v681[32] }
        sp      = { defs={} expr=v682[32] }
        bp      = { defs={} expr=v683[32] }
        si      = { defs={} expr=v684[32] }
        di      = { defs={} expr=v685[32] }
        es      = { defs={} expr=v686[16] }
        cs      = { defs={} expr=v687[16] }
        ss      = { defs={} expr=v688[16] }
        ds      = { defs={} expr=v689[16] }
        fs      = { defs={} expr=v690[16] }
        gs      = { defs={} expr=v691[16] }
        cf      = { defs={} expr=v692[1] }
        ?1      = { defs={} expr=v693[1] }
        pf      = { defs={} expr=v694[1] }
        ?3      = { defs={} expr=v695[1] }
        af      = { defs={} expr=v696[1] }
        ?5      = { defs={} expr=v697[1] }
        zf      = { defs={} expr=v698[1] }
        sf      = { defs={} expr=v699[1] }
        tf      = { defs={} expr=v700[1] }
        if      = { defs={} expr=v701[1] }
        df      = { defs={} expr=v702[1] }
        of      = { defs={} expr=v703[1] }
        iopl0   = { defs={} expr=v704[1] }
        iopl1   = { defs={} expr=v705[1] }
        nt      = { defs={} expr=v706[1] }
        ?15     = { defs={} expr=v707[1] }
        rf      = { defs={} expr=v708[1] }
        vm      = { defs={} expr=v709[1] }
        ac      = { defs={} expr=v710[1] }
        vif     = { defs={} expr=v711[1] }
        vip     = { defs={} expr=v712[1] }
        id      = { defs={} expr=v713[1] }
        ?22     = { defs={} expr=v714[1] }
        ?23     = { defs={} expr=v715[1] }
        ?24     = { defs={} expr=v716[1] }
        ?25     = { defs={} expr=v717[1] }
        ?26     = { defs={} expr=v718[1] }
        ?27     = { defs={} expr=v719[1] }
        ?28     = { defs={} expr=v720[1] }
        ?29     = { defs={} expr=v721[1] }
        ?30     = { defs={} expr=v722[1] }
        ?31     = { defs={} expr=v723[1] }
        ip      = { defs={0x08048300} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v730[8]) (shr0[32] 8[32] (uextend[32] 32[32] v731[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v732[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v733[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496db[32] }
          value = { defs={} expr=v733[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496da[32] }
          value = { defs={} expr=v732[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d9[32] }
          value = { defs={} expr=v731[8] }
          flags = { rdonly }
        address = { defs={0x08048300} expr=0x080496d8[32] }
          value = { defs={} expr=v730[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>]
    registers:
        ax      = { defs={} expr=v787[32] }
        cx      = { defs={} expr=v788[32] }
        dx      = { defs={} expr=v789[32] }
        bx      = { defs={} expr=v790[32] }
        sp      = { defs={} expr=v791[32] }
        bp      = { defs={} expr=v792[32] }
        si      = { defs={} expr=v793[32] }
        di      = { defs={} expr=v794[32] }
        es      = { defs={} expr=v795[16] }
        cs      = { defs={} expr=v796[16] }
        ss      = { defs={} expr=v797[16] }
        ds      = { defs={} expr=v798[16] }
        fs      = { defs={} expr=v799[16] }
        gs      = { defs={} expr=v800[16] }
        cf      = { defs={} expr=v801[1] }
        ?1      = { defs={} expr=v802[1] }
        pf      = { defs={} expr=v803[1] }
        ?3      = { defs={} expr=v804[1] }
        af      = { defs={} expr=v805[1] }
        ?5      = { defs={} expr=v806[1] }
        zf      = { defs={} expr=v807[1] }
        sf      = { defs={} expr=v808[1] }
        tf      = { defs={} expr=v809[1] }
        if      = { defs={} expr=v810[1] }
        df      = { defs={} expr=v811[1] }
        of      = { defs={} expr=v812[1] }
        iopl0   = { defs={} expr=v813[1] }
        iopl1   = { defs={} expr=v814[1] }
        nt      = { defs={} expr=v815[1] }
        ?15     = { defs={} expr=v816[1] }
        rf      = { defs={} expr=v817[1] }
        vm      = { defs={} expr=v818[1] }
        ac      = { defs={} expr=v819[1] }
        vif     = { defs={} expr=v820[1] }
        vip     = { defs={} expr=v821[1] }
        id      = { defs={} expr=v822[1] }
        ?22     = { defs={} expr=v823[1] }
        ?23     = { defs={} expr=v824[1] }
        ?24     = { defs={} expr=v825[1] }
        ?25     = { defs={} expr=v826[1] }
        ?26     = { defs={} expr=v827[1] }
        ?27     = { defs={} expr=v828[1] }
        ?28     = { defs={} expr=v829[1] }
        ?29     = { defs={} expr=v830[1] }
        ?30     = { defs={} expr=v831[1] }
        ?31     = { defs={} expr=v832[1] }
        ip      = { defs={0x08048310} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v839[8]) (shr0[32] 8[32] (uextend[32] 32[32] v840[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v841[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v842[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496df[32] }
          value = { defs={} expr=v842[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496de[32] }
          value = { defs={} expr=v841[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496dd[32] }
          value = { defs={} expr=v840[8] }
          flags = { rdonly }
        address = { defs={0x08048310} expr=0x080496dc[32] }
          value = { defs={} expr=v839[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>]
    registers:
        ax      = { defs={} expr=v896[32] }
        cx      = { defs={} expr=v897[32] }
        dx      = { defs={} expr=v898[32] }
        bx      = { defs={} expr=v899[32] }
        sp      = { defs={} expr=v900[32] }
        bp      = { defs={} expr=v901[32] }
        si      = { defs={} expr=v902[32] }
        di      = { defs={} expr=v903[32] }
        es      = { defs={} expr=v904[16] }
        cs      = { defs={} expr=v905[16] }
        ss      = { defs={} expr=v906[16] }
        ds      = { defs={} expr=v907[16] }
        fs      = { defs={} expr=v908[16] }
        gs      = { defs={} expr=v909[16] }
        cf      = { defs={} expr=v910[1] }
        ?1      = { defs={} expr=v911[1] }
        pf      = { defs={} expr=v912[1] }
        ?3      = { defs={} expr=v913[1] }
        af      = { defs={} expr=v914[1] }
        ?5      = { defs={} expr=v915[1] }
        zf      = { defs={} expr=v916[1] }
        sf      = { defs={} expr=v917[1] }
        tf      = { defs={} expr=v918[1] }
        if      = { defs={} expr=v919[1] }
        df      = { defs={} expr=v920[1] }
        of      = { defs={} expr=v921[1] }
        iopl0   = { defs={} expr=v922[1] }
        iopl1   = { defs={} expr=v923[1] }
        nt      = { defs={} expr=v924[1] }
        ?15     = { defs={} expr=v925[1] }
        rf      = { defs={} expr=v926[1] }
        vm      = { defs={} expr=v927[1] }
        ac      = { defs={} expr=v928[1] }
        vif     = { defs={} expr=v929[1] }
        vip     = { defs={} expr=v930[1] }
        id      = { defs={} expr=v931[1] }
        ?22     = { defs={} expr=v932[1] }
        ?23     = { defs={} expr=v933[1] }
        ?24     = { defs={} expr=v934[1] }
        ?25     = { defs={} expr=v935[1] }
        ?26     = { defs={} expr=v936[1] }
        ?27     = { defs={} expr=v937[1] }
        ?28     = { defs={} expr=v938[1] }
        ?29     = { defs={} expr=v939[1] }
        ?30     = { defs={} expr=v940[1] }
        ?31     = { defs={} expr=v941[1] }
        ip      = { defs={0x08048320} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v948[8]) (shr0[32] 8[32] (uextend[32] 32[32] v949[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v950[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v951[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e3[32] }
          value = { defs={} expr=v951[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e2[32] }
          value = { defs={} expr=v950[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e1[32] }
          value = { defs={} expr=v949[8] }
          flags = { rdonly }
        address = { defs={0x08048320} expr=0x080496e0[32] }
          value = { defs={} expr=v948[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>]
    registers:
        ax      = { defs={} expr=v1005[32] }
        cx      = { defs={} expr=v1006[32] }
        dx      = { defs={} expr=v1007[32] }
        bx      = { defs={} expr=v1008[32] }
        sp      = { defs={} expr=v1009[32] }
        bp      = { defs={} expr=v1010[32] }
        si      = { defs={} expr=v1011[32] }
        di      = { defs={} expr=v1012[32] }
        es      = { defs={} expr=v1013[16] }
        cs      = { defs={} expr=v1014[16] }
        ss      = { defs={} expr=v1015[16] }
        ds      = { defs={} expr=v1016[16] }
        fs      = { defs={} expr=v1017[16] }
        gs      = { defs={} expr=v1018[16] }
        cf      = { defs={} expr=v1019[1] }
        ?1      = { defs={} expr=v1020[1] }
        pf      = { defs={} expr=v1021[1] }
        ?3      = { defs={} expr=v1022[1] }
        af      = { defs={} expr=v1023[1] }
        ?5      = { defs={} expr=v1024[1] }
        zf      = { defs={} expr=v1025[1] }
        sf      = { defs={} expr=v1026[1] }
        tf      = { defs={} expr=v1027[1] }
        if      = { defs={} expr=v1028[1] }
        df      = { defs={} expr=v1029[1] }
        of      = { defs={} expr=v1030[1] }
        iopl0   = { defs={} expr=v1031[1] }
        iopl1   = { defs={} expr=v1032[1] }
        nt      = { defs={} expr=v1033[1] }
        ?15     = { defs={} expr=v1034[1] }
        rf      = { defs={} expr=v1035[1] }
        vm      = { defs={} expr=v1036[1] }
        ac      = { defs={} expr=v1037[1] }
        vif     = { defs={} expr=v1038[1] }
        vip     = { defs={} expr=v1039[1] }
        id      = { defs={} expr=v1040[1] }
        ?22     = { defs={} expr=v1041[1] }
        ?23     = { defs={} expr=v1042[1] }
        ?24     = { defs={} expr=v1043[1] }
        ?25     = { defs={} expr=v1044[1] }
        ?26     = { defs={} expr=v1045[1] }
        ?27     = { defs={} expr=v1046[1] }
        ?28     = { defs={} expr=v1047[1] }
        ?29     = { defs={} expr=v1048[1] }
        ?30     = { defs={} expr=v1049[1] }
        ?31     = { defs={} expr=v1050[1] }
        ip      = { defs={0x08048330} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1060[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e7[32] }
          value = { defs={} expr=v1060[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e6[32] }
          value = { defs={} expr=v1059[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e5[32] }
          value = { defs={} expr=v1058[8] }
          flags = { rdonly }
        address = { defs={0x08048330} expr=0x080496e4[32] }
          value = { defs={} expr=v1057[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048340:xor    ebp, ebp
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={} expr=v1115[32] }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={} expr=v1118[32] }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={} expr=v1120[32] }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048340} expr=v1193[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340} expr=0x08048342[32] }
    memory:
    init mem:
0x8048342:pop    esi
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={} expr=v1115[32] }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342} expr=(add[32] v1118[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048340} expr=v1193[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342} expr=0x08048343[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048343:mov    ecx, esp
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342} expr=(add[32] v1118[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048340} expr=v1193[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343} expr=0x08048345[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048345:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345} expr=(bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345} expr=0x08048348[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048348:push   eax
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348} expr=0x08048349[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048349:push   esp
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349} expr=0x0804834a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x804834a:push   edx
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a} expr=0x0804834b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x804834b:push   0x08048520<__libc_csu_fini>
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=0x08048350[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048350:push   0x080484b0<__libc_csu_init>
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=0x08048355[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048350} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048350} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048350} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048350} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048355:push   ecx
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=0x08048356[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 24[32] 32[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 16[32] 24[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 8[32] 16[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 0[32] 8[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048350} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048350} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048350} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048350} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048356:push   esi
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=0x08048357[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 24[32] 32[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 16[32] 24[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 8[32] 16[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 0[32] 8[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048350} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048350} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048350} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048350} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048357:push   0x08048410<main>
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=0x0804835c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048357} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048357} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048357} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048357} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 24[32] 32[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 16[32] 24[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 8[32] 16[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 0[32] 8[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048350} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048350} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048350} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048350} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x804835c:call   0x08048310<__libc_start_main@plt>
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x0804835c} expr=0x08048310[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=-125[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=97[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048357} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048357} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048357} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048357} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 24[32] 32[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 16[32] 24[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 8[32] 16[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 0[32] 8[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048350} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048350} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048350} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048350} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048361:hlt    
    registers:
        ax      = { defs={} expr=v1397[32] }
        cx      = { defs={} expr=v1398[32] }
        dx      = { defs={} expr=v1399[32] }
        bx      = { defs={} expr=v1400[32] }
        sp      = { defs={} expr=v1401[32] }
        bp      = { defs={} expr=v1402[32] }
        si      = { defs={} expr=v1403[32] }
        di      = { defs={} expr=v1404[32] }
        es      = { defs={} expr=v1405[16] }
        cs      = { defs={} expr=v1406[16] }
        ss      = { defs={} expr=v1407[16] }
        ds      = { defs={} expr=v1408[16] }
        fs      = { defs={} expr=v1409[16] }
        gs      = { defs={} expr=v1410[16] }
        cf      = { defs={} expr=v1411[1] }
        ?1      = { defs={} expr=v1412[1] }
        pf      = { defs={} expr=v1413[1] }
        ?3      = { defs={} expr=v1414[1] }
        af      = { defs={} expr=v1415[1] }
        ?5      = { defs={} expr=v1416[1] }
        zf      = { defs={} expr=v1417[1] }
        sf      = { defs={} expr=v1418[1] }
        tf      = { defs={} expr=v1419[1] }
        if      = { defs={} expr=v1420[1] }
        df      = { defs={} expr=v1421[1] }
        of      = { defs={} expr=v1422[1] }
        iopl0   = { defs={} expr=v1423[1] }
        iopl1   = { defs={} expr=v1424[1] }
        nt      = { defs={} expr=v1425[1] }
        ?15     = { defs={} expr=v1426[1] }
        rf      = { defs={} expr=v1427[1] }
        vm      = { defs={} expr=v1428[1] }
        ac      = { defs={} expr=v1429[1] }
        vif     = { defs={} expr=v1430[1] }
        vip     = { defs={} expr=v1431[1] }
        id      = { defs={} expr=v1432[1] }
        ?22     = { defs={} expr=v1433[1] }
        ?23     = { defs={} expr=v1434[1] }
        ?24     = { defs={} expr=v1435[1] }
        ?25     = { defs={} expr=v1436[1] }
        ?26     = { defs={} expr=v1437[1] }
        ?27     = { defs={} expr=v1438[1] }
        ?28     = { defs={} expr=v1439[1] }
        ?29     = { defs={} expr=v1440[1] }
        ?30     = { defs={} expr=v1441[1] }
        ?31     = { defs={} expr=v1442[1] }
        ip      = { defs={0x08048361} expr=0x08048361[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048364:push   ebp
    registers:
        ax      = { defs={} expr=v1496[32] }
        cx      = { defs={} expr=v1497[32] }
        dx      = { defs={} expr=v1498[32] }
        bx      = { defs={} expr=v1499[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
        bp      = { defs={} expr=v1501[32] }
        si      = { defs={} expr=v1502[32] }
        di      = { defs={} expr=v1503[32] }
        es      = { defs={} expr=v1504[16] }
        cs      = { defs={} expr=v1505[16] }
        ss      = { defs={} expr=v1506[16] }
        ds      = { defs={} expr=v1507[16] }
        fs      = { defs={} expr=v1508[16] }
        gs      = { defs={} expr=v1509[16] }
        cf      = { defs={} expr=v1510[1] }
        ?1      = { defs={} expr=v1511[1] }
        pf      = { defs={} expr=v1512[1] }
        ?3      = { defs={} expr=v1513[1] }
        af      = { defs={} expr=v1514[1] }
        ?5      = { defs={} expr=v1515[1] }
        zf      = { defs={} expr=v1516[1] }
        sf      = { defs={} expr=v1517[1] }
        tf      = { defs={} expr=v1518[1] }
        if      = { defs={} expr=v1519[1] }
        df      = { defs={} expr=v1520[1] }
        of      = { defs={} expr=v1521[1] }
        iopl0   = { defs={} expr=v1522[1] }
        iopl1   = { defs={} expr=v1523[1] }
        nt      = { defs={} expr=v1524[1] }
        ?15     = { defs={} expr=v1525[1] }
        rf      = { defs={} expr=v1526[1] }
        vm      = { defs={} expr=v1527[1] }
        ac      = { defs={} expr=v1528[1] }
        vif     = { defs={} expr=v1529[1] }
        vip     = { defs={} expr=v1530[1] }
        id      = { defs={} expr=v1531[1] }
        ?22     = { defs={} expr=v1532[1] }
        ?23     = { defs={} expr=v1533[1] }
        ?24     = { defs={} expr=v1534[1] }
        ?25     = { defs={} expr=v1535[1] }
        ?26     = { defs={} expr=v1536[1] }
        ?27     = { defs={} expr=v1537[1] }
        ?28     = { defs={} expr=v1538[1] }
        ?29     = { defs={} expr=v1539[1] }
        ?30     = { defs={} expr=v1540[1] }
        ?31     = { defs={} expr=v1541[1] }
        ip      = { defs={0x08048364} expr=0x08048365[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 3[32]) }
          value = { defs={0x08048364} expr=(extract[8] 24[32] 32[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 2[32]) }
          value = { defs={0x08048364} expr=(extract[8] 16[32] 24[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 1[32]) }
          value = { defs={0x08048364} expr=(extract[8] 8[32] 16[32] v1501[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
          value = { defs={0x08048364} expr=(extract[8] 0[32] 8[32] v1501[32]) }
          flags = { }
    init mem:
0x8048365:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v1496[32] }
        cx      = { defs={} expr=v1497[32] }
        dx      = { defs={} expr=v1498[32] }
        bx      = { defs={} expr=v1499[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1500[32] -4[32]) }
        si      = { defs={} expr=v1502[32] }
        di      = { defs={} expr=v1503[32] }
        es      = { defs={} expr=v1504[16] }
        cs      = { defs={} expr=v1505[16] }
        ss      = { defs={} expr=v1506[16] }
        ds      = { defs={} expr=v1507[16] }
        fs      = { defs={} expr=v1508[16] }
        gs      = { defs={} expr=v1509[16] }
        cf      = { defs={} expr=v1510[1] }
        ?1      = { defs={} expr=v1511[1] }
        pf      = { defs={} expr=v1512[1] }
        ?3      = { defs={} expr=v1513[1] }
        af      = { defs={} expr=v1514[1] }
        ?5      = { defs={} expr=v1515[1] }
        zf      = { defs={} expr=v1516[1] }
        sf      = { defs={} expr=v1517[1] }
        tf      = { defs={} expr=v1518[1] }
        if      = { defs={} expr=v1519[1] }
        df      = { defs={} expr=v1520[1] }
        of      = { defs={} expr=v1521[1] }
        iopl0   = { defs={} expr=v1522[1] }
        iopl1   = { defs={} expr=v1523[1] }
        nt      = { defs={} expr=v1524[1] }
        ?15     = { defs={} expr=v1525[1] }
        rf      = { defs={} expr=v1526[1] }
        vm      = { defs={} expr=v1527[1] }
        ac      = { defs={} expr=v1528[1] }
        vif     = { defs={} expr=v1529[1] }
        vip     = { defs={} expr=v1530[1] }
        id      = { defs={} expr=v1531[1] }
        ?22     = { defs={} expr=v1532[1] }
        ?23     = { defs={} expr=v1533[1] }
        ?24     = { defs={} expr=v1534[1] }
        ?25     = { defs={} expr=v1535[1] }
        ?26     = { defs={} expr=v1536[1] }
        ?27     = { defs={} expr=v1537[1] }
        ?28     = { defs={} expr=v1538[1] }
        ?29     = { defs={} expr=v1539[1] }
        ?30     = { defs={} expr=v1540[1] }
        ?31     = { defs={} expr=v1541[1] }
        ip      = { defs={0x08048364,0x08048365} expr=0x08048367[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 3[32]) }
          value = { defs={0x08048364} expr=(extract[8] 24[32] 32[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 2[32]) }
          value = { defs={0x08048364} expr=(extract[8] 16[32] 24[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 1[32]) }
          value = { defs={0x08048364} expr=(extract[8] 8[32] 16[32] v1501[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
          value = { defs={0x08048364} expr=(extract[8] 0[32] 8[32] v1501[32]) }
          flags = { }
    init mem:
0x8048367:push   ebx
    registers:
        ax      = { defs={} expr=v1496[32] }
        cx      = { defs={} expr=v1497[32] }
        dx      = { defs={} expr=v1498[32] }
        bx      = { defs={} expr=v1499[32] }
        sp      = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1500[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1500[32] -4[32]) }
        si      = { defs={} expr=v1502[32] }
        di      = { defs={} expr=v1503[32] }
        es      = { defs={} expr=v1504[16] }
        cs      = { defs={} expr=v1505[16] }
        ss      = { defs={} expr=v1506[16] }
        ds      = { defs={} expr=v1507[16] }
        fs      = { defs={} expr=v1508[16] }
        gs      = { defs={} expr=v1509[16] }
        cf      = { defs={} expr=v1510[1] }
        ?1      = { defs={} expr=v1511[1] }
        pf      = { defs={} expr=v1512[1] }
        ?3      = { defs={} expr=v1513[1] }
        af      = { defs={} expr=v1514[1] }
        ?5      = { defs={} expr=v1515[1] }
        zf      = { defs={} expr=v1516[1] }
        sf      = { defs={} expr=v1517[1] }
        tf      = { defs={} expr=v1518[1] }
        if      = { defs={} expr=v1519[1] }
        df      = { defs={} expr=v1520[1] }
        of      = { defs={} expr=v1521[1] }
        iopl0   = { defs={} expr=v1522[1] }
        iopl1   = { defs={} expr=v1523[1] }
        nt      = { defs={} expr=v1524[1] }
        ?15     = { defs={} expr=v1525[1] }
        rf      = { defs={} expr=v1526[1] }
        vm      = { defs={} expr=v1527[1] }
        ac      = { defs={} expr=v1528[1] }
        vif     = { defs={} expr=v1529[1] }
        vip     = { defs={} expr=v1530[1] }
        id      = { defs={} expr=v1531[1] }
        ?22     = { defs={} expr=v1532[1] }
        ?23     = { defs={} expr=v1533[1] }
        ?24     = { defs={} expr=v1534[1] }
        ?25     = { defs={} expr=v1535[1] }
        ?26     = { defs={} expr=v1536[1] }
        ?27     = { defs={} expr=v1537[1] }
        ?28     = { defs={} expr=v1538[1] }
        ?29     = { defs={} expr=v1539[1] }
        ?30     = { defs={} expr=v1540[1] }
        ?31     = { defs={} expr=v1541[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367} expr=0x08048368[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048367} expr=(extract[8] 24[32] 32[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048367} expr=(extract[8] 16[32] 24[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048367} expr=(extract[8] 8[32] 16[32] v1499[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1500[32] -4[32]) -4[32]) }
          value = { defs={0x08048367} expr=(extract[8] 0[32] 8[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 3[32]) }
          value = { defs={0x08048364} expr=(extract[8] 24[32] 32[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 2[32]) }
          value = { defs={0x08048364} expr=(extract[8] 16[32] 24[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 1[32]) }
          value = { defs={0x08048364} expr=(extract[8] 8[32] 16[32] v1501[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
          value = { defs={0x08048364} expr=(extract[8] 0[32] 8[32] v1501[32]) }
          flags = { }
    init mem:
0x8048368:push   ecx
    registers:
        ax      = { defs={} expr=v1496[32] }
        cx      = { defs={} expr=v1497[32] }
        dx      = { defs={} expr=v1498[32] }
        bx      = { defs={} expr=v1499[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1500[32] -4[32]) }
        si      = { defs={} expr=v1502[32] }
        di      = { defs={} expr=v1503[32] }
        es      = { defs={} expr=v1504[16] }
        cs      = { defs={} expr=v1505[16] }
        ss      = { defs={} expr=v1506[16] }
        ds      = { defs={} expr=v1507[16] }
        fs      = { defs={} expr=v1508[16] }
        gs      = { defs={} expr=v1509[16] }
        cf      = { defs={} expr=v1510[1] }
        ?1      = { defs={} expr=v1511[1] }
        pf      = { defs={} expr=v1512[1] }
        ?3      = { defs={} expr=v1513[1] }
        af      = { defs={} expr=v1514[1] }
        ?5      = { defs={} expr=v1515[1] }
        zf      = { defs={} expr=v1516[1] }
        sf      = { defs={} expr=v1517[1] }
        tf      = { defs={} expr=v1518[1] }
        if      = { defs={} expr=v1519[1] }
        df      = { defs={} expr=v1520[1] }
        of      = { defs={} expr=v1521[1] }
        iopl0   = { defs={} expr=v1522[1] }
        iopl1   = { defs={} expr=v1523[1] }
        nt      = { defs={} expr=v1524[1] }
        ?15     = { defs={} expr=v1525[1] }
        rf      = { defs={} expr=v1526[1] }
        vm      = { defs={} expr=v1527[1] }
        ac      = { defs={} expr=v1528[1] }
        vif     = { defs={} expr=v1529[1] }
        vip     = { defs={} expr=v1530[1] }
        id      = { defs={} expr=v1531[1] }
        ?22     = { defs={} expr=v1532[1] }
        ?23     = { defs={} expr=v1533[1] }
        ?24     = { defs={} expr=v1534[1] }
        ?25     = { defs={} expr=v1535[1] }
        ?26     = { defs={} expr=v1536[1] }
        ?27     = { defs={} expr=v1537[1] }
        ?28     = { defs={} expr=v1538[1] }
        ?29     = { defs={} expr=v1539[1] }
        ?30     = { defs={} expr=v1540[1] }
        ?31     = { defs={} expr=v1541[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367,0x08048368} expr=0x08048369[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048368} expr=(extract[8] 24[32] 32[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048368} expr=(extract[8] 16[32] 24[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048368} expr=(extract[8] 8[32] 16[32] v1497[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048368} expr=(extract[8] 0[32] 8[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048367} expr=(extract[8] 24[32] 32[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048367} expr=(extract[8] 16[32] 24[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048367} expr=(extract[8] 8[32] 16[32] v1499[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1500[32] -4[32]) -4[32]) }
          value = { defs={0x08048367} expr=(extract[8] 0[32] 8[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 3[32]) }
          value = { defs={0x08048364} expr=(extract[8] 24[32] 32[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 2[32]) }
          value = { defs={0x08048364} expr=(extract[8] 16[32] 24[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 1[32]) }
          value = { defs={0x08048364} expr=(extract[8] 8[32] 16[32] v1501[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
          value = { defs={0x08048364} expr=(extract[8] 0[32] 8[32] v1501[32]) }
          flags = { }
    init mem:
0x8048369:call   0x0804836e<<Insn>>
    registers:
        ax      = { defs={} expr=v1496[32] }
        cx      = { defs={} expr=v1497[32] }
        dx      = { defs={} expr=v1498[32] }
        bx      = { defs={} expr=v1499[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1500[32] -4[32]) }
        si      = { defs={} expr=v1502[32] }
        di      = { defs={} expr=v1503[32] }
        es      = { defs={} expr=v1504[16] }
        cs      = { defs={} expr=v1505[16] }
        ss      = { defs={} expr=v1506[16] }
        ds      = { defs={} expr=v1507[16] }
        fs      = { defs={} expr=v1508[16] }
        gs      = { defs={} expr=v1509[16] }
        cf      = { defs={} expr=v1510[1] }
        ?1      = { defs={} expr=v1511[1] }
        pf      = { defs={} expr=v1512[1] }
        ?3      = { defs={} expr=v1513[1] }
        af      = { defs={} expr=v1514[1] }
        ?5      = { defs={} expr=v1515[1] }
        zf      = { defs={} expr=v1516[1] }
        sf      = { defs={} expr=v1517[1] }
        tf      = { defs={} expr=v1518[1] }
        if      = { defs={} expr=v1519[1] }
        df      = { defs={} expr=v1520[1] }
        of      = { defs={} expr=v1521[1] }
        iopl0   = { defs={} expr=v1522[1] }
        iopl1   = { defs={} expr=v1523[1] }
        nt      = { defs={} expr=v1524[1] }
        ?15     = { defs={} expr=v1525[1] }
        rf      = { defs={} expr=v1526[1] }
        vm      = { defs={} expr=v1527[1] }
        ac      = { defs={} expr=v1528[1] }
        vif     = { defs={} expr=v1529[1] }
        vip     = { defs={} expr=v1530[1] }
        id      = { defs={} expr=v1531[1] }
        ?22     = { defs={} expr=v1532[1] }
        ?23     = { defs={} expr=v1533[1] }
        ?24     = { defs={} expr=v1534[1] }
        ?25     = { defs={} expr=v1535[1] }
        ?26     = { defs={} expr=v1536[1] }
        ?27     = { defs={} expr=v1537[1] }
        ?28     = { defs={} expr=v1538[1] }
        ?29     = { defs={} expr=v1539[1] }
        ?30     = { defs={} expr=v1540[1] }
        ?31     = { defs={} expr=v1541[1] }
        ip      = { defs={0x08048369} expr=0x0804836e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048364,0x08048365,0x08048367,0x08048368,0x08048369} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048364,0x08048365,0x08048367,0x08048368,0x08048369} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048364,0x08048365,0x08048367,0x08048368,0x08048369} expr=-125[8] }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048364,0x08048365,0x08048367,0x08048368,0x08048369} expr=110[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048368} expr=(extract[8] 24[32] 32[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048368} expr=(extract[8] 16[32] 24[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048368} expr=(extract[8] 8[32] 16[32] v1497[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048368} expr=(extract[8] 0[32] 8[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048367} expr=(extract[8] 24[32] 32[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048367} expr=(extract[8] 16[32] 24[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048367} expr=(extract[8] 8[32] 16[32] v1499[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1500[32] -4[32]) -4[32]) }
          value = { defs={0x08048367} expr=(extract[8] 0[32] 8[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 3[32]) }
          value = { defs={0x08048364} expr=(extract[8] 24[32] 32[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 2[32]) }
          value = { defs={0x08048364} expr=(extract[8] 16[32] 24[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 1[32]) }
          value = { defs={0x08048364} expr=(extract[8] 8[32] 16[32] v1501[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
          value = { defs={0x08048364} expr=(extract[8] 0[32] 8[32] v1501[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804836e:pop    ebx
    registers:
        ax      = { defs={} expr=v1641[32] }
        cx      = { defs={} expr=v1642[32] }
        dx      = { defs={} expr=v1643[32] }
        bx      = { defs={0x0804836e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) }
        sp      = { defs={0x0804836e} expr=(add[32] v1645[32] 4[32]) }
        bp      = { defs={} expr=v1646[32] }
        si      = { defs={} expr=v1647[32] }
        di      = { defs={} expr=v1648[32] }
        es      = { defs={} expr=v1649[16] }
        cs      = { defs={} expr=v1650[16] }
        ss      = { defs={} expr=v1651[16] }
        ds      = { defs={} expr=v1652[16] }
        fs      = { defs={} expr=v1653[16] }
        gs      = { defs={} expr=v1654[16] }
        cf      = { defs={} expr=v1655[1] }
        ?1      = { defs={} expr=v1656[1] }
        pf      = { defs={} expr=v1657[1] }
        ?3      = { defs={} expr=v1658[1] }
        af      = { defs={} expr=v1659[1] }
        ?5      = { defs={} expr=v1660[1] }
        zf      = { defs={} expr=v1661[1] }
        sf      = { defs={} expr=v1662[1] }
        tf      = { defs={} expr=v1663[1] }
        if      = { defs={} expr=v1664[1] }
        df      = { defs={} expr=v1665[1] }
        of      = { defs={} expr=v1666[1] }
        iopl0   = { defs={} expr=v1667[1] }
        iopl1   = { defs={} expr=v1668[1] }
        nt      = { defs={} expr=v1669[1] }
        ?15     = { defs={} expr=v1670[1] }
        rf      = { defs={} expr=v1671[1] }
        vm      = { defs={} expr=v1672[1] }
        ac      = { defs={} expr=v1673[1] }
        vif     = { defs={} expr=v1674[1] }
        vip     = { defs={} expr=v1675[1] }
        id      = { defs={} expr=v1676[1] }
        ?22     = { defs={} expr=v1677[1] }
        ?23     = { defs={} expr=v1678[1] }
        ?24     = { defs={} expr=v1679[1] }
        ?25     = { defs={} expr=v1680[1] }
        ?26     = { defs={} expr=v1681[1] }
        ?27     = { defs={} expr=v1682[1] }
        ?28     = { defs={} expr=v1683[1] }
        ?29     = { defs={} expr=v1684[1] }
        ?30     = { defs={} expr=v1685[1] }
        ?31     = { defs={} expr=v1686[1] }
        ip      = { defs={0x0804836e} expr=0x0804836f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1645[32] 3[32]) }
          value = { defs={} expr=v1699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 2[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 1[32]) }
          value = { defs={} expr=v1697[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1645[32] }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
0x804836f:add    ebx, 0x0000135a
    registers:
        ax      = { defs={} expr=v1641[32] }
        cx      = { defs={} expr=v1642[32] }
        dx      = { defs={} expr=v1643[32] }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1645[32] 4[32]) }
        bp      = { defs={} expr=v1646[32] }
        si      = { defs={} expr=v1647[32] }
        di      = { defs={} expr=v1648[32] }
        es      = { defs={} expr=v1649[16] }
        cs      = { defs={} expr=v1650[16] }
        ss      = { defs={} expr=v1651[16] }
        ds      = { defs={} expr=v1652[16] }
        fs      = { defs={} expr=v1653[16] }
        gs      = { defs={} expr=v1654[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1656[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1658[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1660[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])) }
        tf      = { defs={} expr=v1663[1] }
        if      = { defs={} expr=v1664[1] }
        df      = { defs={} expr=v1665[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=0[1] }
        iopl0   = { defs={} expr=v1667[1] }
        iopl1   = { defs={} expr=v1668[1] }
        nt      = { defs={} expr=v1669[1] }
        ?15     = { defs={} expr=v1670[1] }
        rf      = { defs={} expr=v1671[1] }
        vm      = { defs={} expr=v1672[1] }
        ac      = { defs={} expr=v1673[1] }
        vif     = { defs={} expr=v1674[1] }
        vip     = { defs={} expr=v1675[1] }
        id      = { defs={} expr=v1676[1] }
        ?22     = { defs={} expr=v1677[1] }
        ?23     = { defs={} expr=v1678[1] }
        ?24     = { defs={} expr=v1679[1] }
        ?25     = { defs={} expr=v1680[1] }
        ?26     = { defs={} expr=v1681[1] }
        ?27     = { defs={} expr=v1682[1] }
        ?28     = { defs={} expr=v1683[1] }
        ?29     = { defs={} expr=v1684[1] }
        ?30     = { defs={} expr=v1685[1] }
        ?31     = { defs={} expr=v1686[1] }
        ip      = { defs={0x0804836e,0x0804836f} expr=0x08048375[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1645[32] 3[32]) }
          value = { defs={} expr=v1699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 2[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 1[32]) }
          value = { defs={} expr=v1697[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1645[32] }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
    registers:
        ax      = { defs={} expr=v1641[32] }
        cx      = { defs={} expr=v1642[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1645[32] 4[32]) }
        bp      = { defs={} expr=v1646[32] }
        si      = { defs={} expr=v1647[32] }
        di      = { defs={} expr=v1648[32] }
        es      = { defs={} expr=v1649[16] }
        cs      = { defs={} expr=v1650[16] }
        ss      = { defs={} expr=v1651[16] }
        ds      = { defs={} expr=v1652[16] }
        fs      = { defs={} expr=v1653[16] }
        gs      = { defs={} expr=v1654[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1656[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1658[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1660[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])) }
        tf      = { defs={} expr=v1663[1] }
        if      = { defs={} expr=v1664[1] }
        df      = { defs={} expr=v1665[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=0[1] }
        iopl0   = { defs={} expr=v1667[1] }
        iopl1   = { defs={} expr=v1668[1] }
        nt      = { defs={} expr=v1669[1] }
        ?15     = { defs={} expr=v1670[1] }
        rf      = { defs={} expr=v1671[1] }
        vm      = { defs={} expr=v1672[1] }
        ac      = { defs={} expr=v1673[1] }
        vif     = { defs={} expr=v1674[1] }
        vip     = { defs={} expr=v1675[1] }
        id      = { defs={} expr=v1676[1] }
        ?22     = { defs={} expr=v1677[1] }
        ?23     = { defs={} expr=v1678[1] }
        ?24     = { defs={} expr=v1679[1] }
        ?25     = { defs={} expr=v1680[1] }
        ?26     = { defs={} expr=v1681[1] }
        ?27     = { defs={} expr=v1682[1] }
        ?28     = { defs={} expr=v1683[1] }
        ?29     = { defs={} expr=v1684[1] }
        ?30     = { defs={} expr=v1685[1] }
        ?31     = { defs={} expr=v1686[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375} expr=0x0804837b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1766[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1764[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1762[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 3[32]) }
          value = { defs={} expr=v1699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 2[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 1[32]) }
          value = { defs={} expr=v1697[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1645[32] }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
0x804837b:test   edx, edx
    registers:
        ax      = { defs={} expr=v1641[32] }
        cx      = { defs={} expr=v1642[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1645[32] 4[32]) }
        bp      = { defs={} expr=v1646[32] }
        si      = { defs={} expr=v1647[32] }
        di      = { defs={} expr=v1648[32] }
        es      = { defs={} expr=v1649[16] }
        cs      = { defs={} expr=v1650[16] }
        ss      = { defs={} expr=v1651[16] }
        ds      = { defs={} expr=v1652[16] }
        fs      = { defs={} expr=v1653[16] }
        gs      = { defs={} expr=v1654[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1656[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))))))) }
        ?3      = { defs={} expr=v1658[1] }
        af      = { defs={0x0804837b} expr=v1804[1] }
        ?5      = { defs={} expr=v1660[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        tf      = { defs={} expr=v1663[1] }
        if      = { defs={} expr=v1664[1] }
        df      = { defs={} expr=v1665[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1667[1] }
        iopl1   = { defs={} expr=v1668[1] }
        nt      = { defs={} expr=v1669[1] }
        ?15     = { defs={} expr=v1670[1] }
        rf      = { defs={} expr=v1671[1] }
        vm      = { defs={} expr=v1672[1] }
        ac      = { defs={} expr=v1673[1] }
        vif     = { defs={} expr=v1674[1] }
        vip     = { defs={} expr=v1675[1] }
        id      = { defs={} expr=v1676[1] }
        ?22     = { defs={} expr=v1677[1] }
        ?23     = { defs={} expr=v1678[1] }
        ?24     = { defs={} expr=v1679[1] }
        ?25     = { defs={} expr=v1680[1] }
        ?26     = { defs={} expr=v1681[1] }
        ?27     = { defs={} expr=v1682[1] }
        ?28     = { defs={} expr=v1683[1] }
        ?29     = { defs={} expr=v1684[1] }
        ?30     = { defs={} expr=v1685[1] }
        ?31     = { defs={} expr=v1686[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b} expr=0x0804837d[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1766[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1764[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1762[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 3[32]) }
          value = { defs={} expr=v1699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 2[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 1[32]) }
          value = { defs={} expr=v1697[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1645[32] }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
0x804837d:je     0x08048384<<Insn>>
    registers:
        ax      = { defs={} expr=v1641[32] }
        cx      = { defs={} expr=v1642[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1645[32] 4[32]) }
        bp      = { defs={} expr=v1646[32] }
        si      = { defs={} expr=v1647[32] }
        di      = { defs={} expr=v1648[32] }
        es      = { defs={} expr=v1649[16] }
        cs      = { defs={} expr=v1650[16] }
        ss      = { defs={} expr=v1651[16] }
        ds      = { defs={} expr=v1652[16] }
        fs      = { defs={} expr=v1653[16] }
        gs      = { defs={} expr=v1654[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1656[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32])))))))))))) }
        ?3      = { defs={} expr=v1658[1] }
        af      = { defs={0x0804837b} expr=v1804[1] }
        ?5      = { defs={} expr=v1660[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        tf      = { defs={} expr=v1663[1] }
        if      = { defs={} expr=v1664[1] }
        df      = { defs={} expr=v1665[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1667[1] }
        iopl1   = { defs={} expr=v1668[1] }
        nt      = { defs={} expr=v1669[1] }
        ?15     = { defs={} expr=v1670[1] }
        rf      = { defs={} expr=v1671[1] }
        vm      = { defs={} expr=v1672[1] }
        ac      = { defs={} expr=v1673[1] }
        vif     = { defs={} expr=v1674[1] }
        vip     = { defs={} expr=v1675[1] }
        id      = { defs={} expr=v1676[1] }
        ?22     = { defs={} expr=v1677[1] }
        ?23     = { defs={} expr=v1678[1] }
        ?24     = { defs={} expr=v1679[1] }
        ?25     = { defs={} expr=v1680[1] }
        ?26     = { defs={} expr=v1681[1] }
        ?27     = { defs={} expr=v1682[1] }
        ?28     = { defs={} expr=v1683[1] }
        ?29     = { defs={} expr=v1684[1] }
        ?30     = { defs={} expr=v1685[1] }
        ?31     = { defs={} expr=v1686[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b,0x0804837d} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1761[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) v1760[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1763[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) v1762[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1765[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) v1764[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1767[8] (add[32] v1645[32] 3[32]) v1699[8]) (add[32] v1645[32] 2[32]) v1698[8]) (add[32] v1645[32] 1[32]) v1697[8]) v1645[32] v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) v1766[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]))))))) 0x08048384[32] 0x0804837f[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1766[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1764[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1762[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 3[32]) }
          value = { defs={} expr=v1699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 2[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 1[32]) }
          value = { defs={} expr=v1697[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1645[32] }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804837f:call   0x08048330<__gmon_start__@plt>
    registers:
        ax      = { defs={} expr=v1862[32] }
        cx      = { defs={} expr=v1863[32] }
        dx      = { defs={} expr=v1864[32] }
        bx      = { defs={} expr=v1865[32] }
        sp      = { defs={0x0804837f} expr=(add[32] v1866[32] -4[32]) }
        bp      = { defs={} expr=v1867[32] }
        si      = { defs={} expr=v1868[32] }
        di      = { defs={} expr=v1869[32] }
        es      = { defs={} expr=v1870[16] }
        cs      = { defs={} expr=v1871[16] }
        ss      = { defs={} expr=v1872[16] }
        ds      = { defs={} expr=v1873[16] }
        fs      = { defs={} expr=v1874[16] }
        gs      = { defs={} expr=v1875[16] }
        cf      = { defs={} expr=v1876[1] }
        ?1      = { defs={} expr=v1877[1] }
        pf      = { defs={} expr=v1878[1] }
        ?3      = { defs={} expr=v1879[1] }
        af      = { defs={} expr=v1880[1] }
        ?5      = { defs={} expr=v1881[1] }
        zf      = { defs={} expr=v1882[1] }
        sf      = { defs={} expr=v1883[1] }
        tf      = { defs={} expr=v1884[1] }
        if      = { defs={} expr=v1885[1] }
        df      = { defs={} expr=v1886[1] }
        of      = { defs={} expr=v1887[1] }
        iopl0   = { defs={} expr=v1888[1] }
        iopl1   = { defs={} expr=v1889[1] }
        nt      = { defs={} expr=v1890[1] }
        ?15     = { defs={} expr=v1891[1] }
        rf      = { defs={} expr=v1892[1] }
        vm      = { defs={} expr=v1893[1] }
        ac      = { defs={} expr=v1894[1] }
        vif     = { defs={} expr=v1895[1] }
        vip     = { defs={} expr=v1896[1] }
        id      = { defs={} expr=v1897[1] }
        ?22     = { defs={} expr=v1898[1] }
        ?23     = { defs={} expr=v1899[1] }
        ?24     = { defs={} expr=v1900[1] }
        ?25     = { defs={} expr=v1901[1] }
        ?26     = { defs={} expr=v1902[1] }
        ?27     = { defs={} expr=v1903[1] }
        ?28     = { defs={} expr=v1904[1] }
        ?29     = { defs={} expr=v1905[1] }
        ?30     = { defs={} expr=v1906[1] }
        ?31     = { defs={} expr=v1907[1] }
        ip      = { defs={0x0804837f} expr=0x08048330[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1866[32] -4[32]) 3[32]) }
          value = { defs={0x0804837f} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1866[32] -4[32]) 2[32]) }
          value = { defs={0x0804837f} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1866[32] -4[32]) 1[32]) }
          value = { defs={0x0804837f} expr=-125[8] }
          flags = { }
        address = { defs={0x0804837f} expr=(add[32] v1866[32] -4[32]) }
          value = { defs={0x0804837f} expr=-124[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048384:pop    eax
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2027[8]))) }
        cx      = { defs={} expr=v1970[32] }
        dx      = { defs={} expr=v1971[32] }
        bx      = { defs={} expr=v1972[32] }
        sp      = { defs={0x08048384} expr=(add[32] v1973[32] 4[32]) }
        bp      = { defs={} expr=v1974[32] }
        si      = { defs={} expr=v1975[32] }
        di      = { defs={} expr=v1976[32] }
        es      = { defs={} expr=v1977[16] }
        cs      = { defs={} expr=v1978[16] }
        ss      = { defs={} expr=v1979[16] }
        ds      = { defs={} expr=v1980[16] }
        fs      = { defs={} expr=v1981[16] }
        gs      = { defs={} expr=v1982[16] }
        cf      = { defs={} expr=v1983[1] }
        ?1      = { defs={} expr=v1984[1] }
        pf      = { defs={} expr=v1985[1] }
        ?3      = { defs={} expr=v1986[1] }
        af      = { defs={} expr=v1987[1] }
        ?5      = { defs={} expr=v1988[1] }
        zf      = { defs={} expr=v1989[1] }
        sf      = { defs={} expr=v1990[1] }
        tf      = { defs={} expr=v1991[1] }
        if      = { defs={} expr=v1992[1] }
        df      = { defs={} expr=v1993[1] }
        of      = { defs={} expr=v1994[1] }
        iopl0   = { defs={} expr=v1995[1] }
        iopl1   = { defs={} expr=v1996[1] }
        nt      = { defs={} expr=v1997[1] }
        ?15     = { defs={} expr=v1998[1] }
        rf      = { defs={} expr=v1999[1] }
        vm      = { defs={} expr=v2000[1] }
        ac      = { defs={} expr=v2001[1] }
        vif     = { defs={} expr=v2002[1] }
        vip     = { defs={} expr=v2003[1] }
        id      = { defs={} expr=v2004[1] }
        ?22     = { defs={} expr=v2005[1] }
        ?23     = { defs={} expr=v2006[1] }
        ?24     = { defs={} expr=v2007[1] }
        ?25     = { defs={} expr=v2008[1] }
        ?26     = { defs={} expr=v2009[1] }
        ?27     = { defs={} expr=v2010[1] }
        ?28     = { defs={} expr=v2011[1] }
        ?29     = { defs={} expr=v2012[1] }
        ?30     = { defs={} expr=v2013[1] }
        ?31     = { defs={} expr=v2014[1] }
        ip      = { defs={0x08048384} expr=0x08048385[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1973[32] 3[32]) }
          value = { defs={} expr=v2027[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1973[32] 2[32]) }
          value = { defs={} expr=v2026[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1973[32] 1[32]) }
          value = { defs={} expr=v2025[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1973[32] }
          value = { defs={} expr=v2024[8] }
          flags = { rdonly }
0x8048385:pop    ebx
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2027[8]))) }
        cx      = { defs={} expr=v1970[32] }
        dx      = { defs={} expr=v1971[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2044[8]))) }
        sp      = { defs={0x08048384,0x08048385} expr=(add[32] (add[32] v1973[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v1974[32] }
        si      = { defs={} expr=v1975[32] }
        di      = { defs={} expr=v1976[32] }
        es      = { defs={} expr=v1977[16] }
        cs      = { defs={} expr=v1978[16] }
        ss      = { defs={} expr=v1979[16] }
        ds      = { defs={} expr=v1980[16] }
        fs      = { defs={} expr=v1981[16] }
        gs      = { defs={} expr=v1982[16] }
        cf      = { defs={} expr=v1983[1] }
        ?1      = { defs={} expr=v1984[1] }
        pf      = { defs={} expr=v1985[1] }
        ?3      = { defs={} expr=v1986[1] }
        af      = { defs={} expr=v1987[1] }
        ?5      = { defs={} expr=v1988[1] }
        zf      = { defs={} expr=v1989[1] }
        sf      = { defs={} expr=v1990[1] }
        tf      = { defs={} expr=v1991[1] }
        if      = { defs={} expr=v1992[1] }
        df      = { defs={} expr=v1993[1] }
        of      = { defs={} expr=v1994[1] }
        iopl0   = { defs={} expr=v1995[1] }
        iopl1   = { defs={} expr=v1996[1] }
        nt      = { defs={} expr=v1997[1] }
        ?15     = { defs={} expr=v1998[1] }
        rf      = { defs={} expr=v1999[1] }
        vm      = { defs={} expr=v2000[1] }
        ac      = { defs={} expr=v2001[1] }
        vif     = { defs={} expr=v2002[1] }
        vip     = { defs={} expr=v2003[1] }
        id      = { defs={} expr=v2004[1] }
        ?22     = { defs={} expr=v2005[1] }
        ?23     = { defs={} expr=v2006[1] }
        ?24     = { defs={} expr=v2007[1] }
        ?25     = { defs={} expr=v2008[1] }
        ?26     = { defs={} expr=v2009[1] }
        ?27     = { defs={} expr=v2010[1] }
        ?28     = { defs={} expr=v2011[1] }
        ?29     = { defs={} expr=v2012[1] }
        ?30     = { defs={} expr=v2013[1] }
        ?31     = { defs={} expr=v2014[1] }
        ip      = { defs={0x08048384,0x08048385} expr=0x08048386[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1973[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2044[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1973[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2043[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1973[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2042[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1973[32] 4[32]) }
          value = { defs={} expr=v2041[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1973[32] 3[32]) }
          value = { defs={} expr=v2027[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1973[32] 2[32]) }
          value = { defs={} expr=v2026[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1973[32] 1[32]) }
          value = { defs={} expr=v2025[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1973[32] }
          value = { defs={} expr=v2024[8] }
          flags = { rdonly }
0x8048386:leave  
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2027[8]))) }
        cx      = { defs={} expr=v1970[32] }
        dx      = { defs={} expr=v1971[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2044[8]))) }
        sp      = { defs={0x08048386} expr=(add[32] v1974[32] 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2060[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) v1974[32] v2059[8]) v1974[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2062[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) (add[32] v1974[32] 1[32]) v2061[8]) (add[32] v1974[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2064[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) (add[32] v1974[32] 2[32]) v2063[8]) (add[32] v1974[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2066[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) (add[32] v1974[32] 3[32]) v2065[8]) (add[32] v1974[32] 3[32]))))) }
        si      = { defs={} expr=v1975[32] }
        di      = { defs={} expr=v1976[32] }
        es      = { defs={} expr=v1977[16] }
        cs      = { defs={} expr=v1978[16] }
        ss      = { defs={} expr=v1979[16] }
        ds      = { defs={} expr=v1980[16] }
        fs      = { defs={} expr=v1981[16] }
        gs      = { defs={} expr=v1982[16] }
        cf      = { defs={} expr=v1983[1] }
        ?1      = { defs={} expr=v1984[1] }
        pf      = { defs={} expr=v1985[1] }
        ?3      = { defs={} expr=v1986[1] }
        af      = { defs={} expr=v1987[1] }
        ?5      = { defs={} expr=v1988[1] }
        zf      = { defs={} expr=v1989[1] }
        sf      = { defs={} expr=v1990[1] }
        tf      = { defs={} expr=v1991[1] }
        if      = { defs={} expr=v1992[1] }
        df      = { defs={} expr=v1993[1] }
        of      = { defs={} expr=v1994[1] }
        iopl0   = { defs={} expr=v1995[1] }
        iopl1   = { defs={} expr=v1996[1] }
        nt      = { defs={} expr=v1997[1] }
        ?15     = { defs={} expr=v1998[1] }
        rf      = { defs={} expr=v1999[1] }
        vm      = { defs={} expr=v2000[1] }
        ac      = { defs={} expr=v2001[1] }
        vif     = { defs={} expr=v2002[1] }
        vip     = { defs={} expr=v2003[1] }
        id      = { defs={} expr=v2004[1] }
        ?22     = { defs={} expr=v2005[1] }
        ?23     = { defs={} expr=v2006[1] }
        ?24     = { defs={} expr=v2007[1] }
        ?25     = { defs={} expr=v2008[1] }
        ?26     = { defs={} expr=v2009[1] }
        ?27     = { defs={} expr=v2010[1] }
        ?28     = { defs={} expr=v2011[1] }
        ?29     = { defs={} expr=v2012[1] }
        ?30     = { defs={} expr=v2013[1] }
        ?31     = { defs={} expr=v2014[1] }
        ip      = { defs={0x08048384,0x08048385,0x08048386} expr=0x08048387[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1974[32] 3[32]) }
          value = { defs={} expr=v2065[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1974[32] 2[32]) }
          value = { defs={} expr=v2063[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1974[32] 1[32]) }
          value = { defs={} expr=v2061[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1974[32] }
          value = { defs={} expr=v2059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1973[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2044[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1973[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2043[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1973[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2042[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1973[32] 4[32]) }
          value = { defs={} expr=v2041[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1973[32] 3[32]) }
          value = { defs={} expr=v2027[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1973[32] 2[32]) }
          value = { defs={} expr=v2026[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1973[32] 1[32]) }
          value = { defs={} expr=v2025[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1973[32] }
          value = { defs={} expr=v2024[8] }
          flags = { rdonly }
0x8048387:ret    
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2027[8]))) }
        cx      = { defs={} expr=v1970[32] }
        dx      = { defs={} expr=v1971[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2044[8]))) }
        sp      = { defs={0x08048386,0x08048387} expr=(add[32] (add[32] v1974[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2060[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) v1974[32] v2059[8]) v1974[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2062[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) (add[32] v1974[32] 1[32]) v2061[8]) (add[32] v1974[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2064[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) (add[32] v1974[32] 2[32]) v2063[8]) (add[32] v1974[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2066[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) (add[32] v1974[32] 3[32]) v2065[8]) (add[32] v1974[32] 3[32]))))) }
        si      = { defs={} expr=v1975[32] }
        di      = { defs={} expr=v1976[32] }
        es      = { defs={} expr=v1977[16] }
        cs      = { defs={} expr=v1978[16] }
        ss      = { defs={} expr=v1979[16] }
        ds      = { defs={} expr=v1980[16] }
        fs      = { defs={} expr=v1981[16] }
        gs      = { defs={} expr=v1982[16] }
        cf      = { defs={} expr=v1983[1] }
        ?1      = { defs={} expr=v1984[1] }
        pf      = { defs={} expr=v1985[1] }
        ?3      = { defs={} expr=v1986[1] }
        af      = { defs={} expr=v1987[1] }
        ?5      = { defs={} expr=v1988[1] }
        zf      = { defs={} expr=v1989[1] }
        sf      = { defs={} expr=v1990[1] }
        tf      = { defs={} expr=v1991[1] }
        if      = { defs={} expr=v1992[1] }
        df      = { defs={} expr=v1993[1] }
        of      = { defs={} expr=v1994[1] }
        iopl0   = { defs={} expr=v1995[1] }
        iopl1   = { defs={} expr=v1996[1] }
        nt      = { defs={} expr=v1997[1] }
        ?15     = { defs={} expr=v1998[1] }
        rf      = { defs={} expr=v1999[1] }
        vm      = { defs={} expr=v2000[1] }
        ac      = { defs={} expr=v2001[1] }
        vif     = { defs={} expr=v2002[1] }
        vip     = { defs={} expr=v2003[1] }
        id      = { defs={} expr=v2004[1] }
        ?22     = { defs={} expr=v2005[1] }
        ?23     = { defs={} expr=v2006[1] }
        ?24     = { defs={} expr=v2007[1] }
        ?25     = { defs={} expr=v2008[1] }
        ?26     = { defs={} expr=v2009[1] }
        ?27     = { defs={} expr=v2010[1] }
        ?28     = { defs={} expr=v2011[1] }
        ?29     = { defs={} expr=v2012[1] }
        ?30     = { defs={} expr=v2013[1] }
        ?31     = { defs={} expr=v2014[1] }
        ip      = { defs={0x08048387} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2082[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) (add[32] v1974[32] 4[32]) v2081[8]) (add[32] v1974[32] 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2084[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) (add[32] (add[32] v1974[32] 4[32]) 1[32]) v2083[8]) (add[32] (add[32] v1974[32] 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2086[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) (add[32] (add[32] v1974[32] 4[32]) 2[32]) v2085[8]) (add[32] (add[32] v1974[32] 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2088[8] (add[32] (add[32] v1973[32] 4[32]) 3[32]) v2044[8]) (add[32] (add[32] v1973[32] 4[32]) 2[32]) v2043[8]) (add[32] (add[32] v1973[32] 4[32]) 1[32]) v2042[8]) (add[32] v1973[32] 4[32]) v2041[8]) (add[32] v1973[32] 3[32]) v2027[8]) (add[32] v1973[32] 2[32]) v2026[8]) (add[32] v1973[32] 1[32]) v2025[8]) v1973[32] v2024[8]) (add[32] (add[32] v1974[32] 4[32]) 3[32]) v2087[8]) (add[32] (add[32] v1974[32] 4[32]) 3[32]))))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1974[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2087[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1974[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2085[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1974[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2083[8] }
          flags = { rdonly }
        address = { defs={0x08048386,0x08048387} expr=(add[32] v1974[32] 4[32]) }
          value = { defs={} expr=v2081[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1974[32] 3[32]) }
          value = { defs={} expr=v2065[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1974[32] 2[32]) }
          value = { defs={} expr=v2063[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1974[32] 1[32]) }
          value = { defs={} expr=v2061[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1974[32] }
          value = { defs={} expr=v2059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1973[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2044[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1973[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2043[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1973[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2042[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1973[32] 4[32]) }
          value = { defs={} expr=v2041[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1973[32] 3[32]) }
          value = { defs={} expr=v2027[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1973[32] 2[32]) }
          value = { defs={} expr=v2026[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1973[32] 1[32]) }
          value = { defs={} expr=v2025[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1973[32] }
          value = { defs={} expr=v2024[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048390:push   ebp
    registers:
        ax      = { defs={} expr=v2143[32] }
        cx      = { defs={} expr=v2144[32] }
        dx      = { defs={} expr=v2145[32] }
        bx      = { defs={} expr=v2146[32] }
        sp      = { defs={0x08048390} expr=(add[32] v2147[32] -4[32]) }
        bp      = { defs={} expr=v2148[32] }
        si      = { defs={} expr=v2149[32] }
        di      = { defs={} expr=v2150[32] }
        es      = { defs={} expr=v2151[16] }
        cs      = { defs={} expr=v2152[16] }
        ss      = { defs={} expr=v2153[16] }
        ds      = { defs={} expr=v2154[16] }
        fs      = { defs={} expr=v2155[16] }
        gs      = { defs={} expr=v2156[16] }
        cf      = { defs={} expr=v2157[1] }
        ?1      = { defs={} expr=v2158[1] }
        pf      = { defs={} expr=v2159[1] }
        ?3      = { defs={} expr=v2160[1] }
        af      = { defs={} expr=v2161[1] }
        ?5      = { defs={} expr=v2162[1] }
        zf      = { defs={} expr=v2163[1] }
        sf      = { defs={} expr=v2164[1] }
        tf      = { defs={} expr=v2165[1] }
        if      = { defs={} expr=v2166[1] }
        df      = { defs={} expr=v2167[1] }
        of      = { defs={} expr=v2168[1] }
        iopl0   = { defs={} expr=v2169[1] }
        iopl1   = { defs={} expr=v2170[1] }
        nt      = { defs={} expr=v2171[1] }
        ?15     = { defs={} expr=v2172[1] }
        rf      = { defs={} expr=v2173[1] }
        vm      = { defs={} expr=v2174[1] }
        ac      = { defs={} expr=v2175[1] }
        vif     = { defs={} expr=v2176[1] }
        vip     = { defs={} expr=v2177[1] }
        id      = { defs={} expr=v2178[1] }
        ?22     = { defs={} expr=v2179[1] }
        ?23     = { defs={} expr=v2180[1] }
        ?24     = { defs={} expr=v2181[1] }
        ?25     = { defs={} expr=v2182[1] }
        ?26     = { defs={} expr=v2183[1] }
        ?27     = { defs={} expr=v2184[1] }
        ?28     = { defs={} expr=v2185[1] }
        ?29     = { defs={} expr=v2186[1] }
        ?30     = { defs={} expr=v2187[1] }
        ?31     = { defs={} expr=v2188[1] }
        ip      = { defs={0x08048390} expr=0x08048391[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 3[32]) }
          value = { defs={0x08048390} expr=(extract[8] 24[32] 32[32] v2148[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 2[32]) }
          value = { defs={0x08048390} expr=(extract[8] 16[32] 24[32] v2148[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 1[32]) }
          value = { defs={0x08048390} expr=(extract[8] 8[32] 16[32] v2148[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2147[32] -4[32]) }
          value = { defs={0x08048390} expr=(extract[8] 0[32] 8[32] v2148[32]) }
          flags = { }
    init mem:
0x8048391:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2143[32] }
        cx      = { defs={} expr=v2144[32] }
        dx      = { defs={} expr=v2145[32] }
        bx      = { defs={} expr=v2146[32] }
        sp      = { defs={0x08048390} expr=(add[32] v2147[32] -4[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2147[32] -4[32]) }
        si      = { defs={} expr=v2149[32] }
        di      = { defs={} expr=v2150[32] }
        es      = { defs={} expr=v2151[16] }
        cs      = { defs={} expr=v2152[16] }
        ss      = { defs={} expr=v2153[16] }
        ds      = { defs={} expr=v2154[16] }
        fs      = { defs={} expr=v2155[16] }
        gs      = { defs={} expr=v2156[16] }
        cf      = { defs={} expr=v2157[1] }
        ?1      = { defs={} expr=v2158[1] }
        pf      = { defs={} expr=v2159[1] }
        ?3      = { defs={} expr=v2160[1] }
        af      = { defs={} expr=v2161[1] }
        ?5      = { defs={} expr=v2162[1] }
        zf      = { defs={} expr=v2163[1] }
        sf      = { defs={} expr=v2164[1] }
        tf      = { defs={} expr=v2165[1] }
        if      = { defs={} expr=v2166[1] }
        df      = { defs={} expr=v2167[1] }
        of      = { defs={} expr=v2168[1] }
        iopl0   = { defs={} expr=v2169[1] }
        iopl1   = { defs={} expr=v2170[1] }
        nt      = { defs={} expr=v2171[1] }
        ?15     = { defs={} expr=v2172[1] }
        rf      = { defs={} expr=v2173[1] }
        vm      = { defs={} expr=v2174[1] }
        ac      = { defs={} expr=v2175[1] }
        vif     = { defs={} expr=v2176[1] }
        vip     = { defs={} expr=v2177[1] }
        id      = { defs={} expr=v2178[1] }
        ?22     = { defs={} expr=v2179[1] }
        ?23     = { defs={} expr=v2180[1] }
        ?24     = { defs={} expr=v2181[1] }
        ?25     = { defs={} expr=v2182[1] }
        ?26     = { defs={} expr=v2183[1] }
        ?27     = { defs={} expr=v2184[1] }
        ?28     = { defs={} expr=v2185[1] }
        ?29     = { defs={} expr=v2186[1] }
        ?30     = { defs={} expr=v2187[1] }
        ?31     = { defs={} expr=v2188[1] }
        ip      = { defs={0x08048390,0x08048391} expr=0x08048393[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 3[32]) }
          value = { defs={0x08048390} expr=(extract[8] 24[32] 32[32] v2148[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 2[32]) }
          value = { defs={0x08048390} expr=(extract[8] 16[32] 24[32] v2148[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 1[32]) }
          value = { defs={0x08048390} expr=(extract[8] 8[32] 16[32] v2148[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2147[32] -4[32]) }
          value = { defs={0x08048390} expr=(extract[8] 0[32] 8[32] v2148[32]) }
          flags = { }
    init mem:
0x8048393:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2143[32] }
        cx      = { defs={} expr=v2144[32] }
        dx      = { defs={} expr=v2145[32] }
        bx      = { defs={} expr=v2146[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2147[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2147[32] -4[32]) }
        si      = { defs={} expr=v2149[32] }
        di      = { defs={} expr=v2150[32] }
        es      = { defs={} expr=v2151[16] }
        cs      = { defs={} expr=v2152[16] }
        ss      = { defs={} expr=v2153[16] }
        ds      = { defs={} expr=v2154[16] }
        fs      = { defs={} expr=v2155[16] }
        gs      = { defs={} expr=v2156[16] }
        cf      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2147[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2147[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2158[1] }
        pf      = { defs={0x08048390,0x08048393} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2147[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2147[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2147[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2147[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2147[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2147[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2147[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2147[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2160[1] }
        af      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2147[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2147[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2162[1] }
        zf      = { defs={0x08048390,0x08048393} expr=(zerop[1] (add[32] (add[32] v2147[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048390,0x08048393} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2147[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2165[1] }
        if      = { defs={} expr=v2166[1] }
        df      = { defs={} expr=v2167[1] }
        of      = { defs={0x08048390,0x08048393} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2147[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2147[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2147[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2147[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2169[1] }
        iopl1   = { defs={} expr=v2170[1] }
        nt      = { defs={} expr=v2171[1] }
        ?15     = { defs={} expr=v2172[1] }
        rf      = { defs={} expr=v2173[1] }
        vm      = { defs={} expr=v2174[1] }
        ac      = { defs={} expr=v2175[1] }
        vif     = { defs={} expr=v2176[1] }
        vip     = { defs={} expr=v2177[1] }
        id      = { defs={} expr=v2178[1] }
        ?22     = { defs={} expr=v2179[1] }
        ?23     = { defs={} expr=v2180[1] }
        ?24     = { defs={} expr=v2181[1] }
        ?25     = { defs={} expr=v2182[1] }
        ?26     = { defs={} expr=v2183[1] }
        ?27     = { defs={} expr=v2184[1] }
        ?28     = { defs={} expr=v2185[1] }
        ?29     = { defs={} expr=v2186[1] }
        ?30     = { defs={} expr=v2187[1] }
        ?31     = { defs={} expr=v2188[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393} expr=0x08048396[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 3[32]) }
          value = { defs={0x08048390} expr=(extract[8] 24[32] 32[32] v2148[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 2[32]) }
          value = { defs={0x08048390} expr=(extract[8] 16[32] 24[32] v2148[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 1[32]) }
          value = { defs={0x08048390} expr=(extract[8] 8[32] 16[32] v2148[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2147[32] -4[32]) }
          value = { defs={0x08048390} expr=(extract[8] 0[32] 8[32] v2148[32]) }
          flags = { }
    init mem:
0x8048396:cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00
    registers:
        ax      = { defs={} expr=v2143[32] }
        cx      = { defs={} expr=v2144[32] }
        dx      = { defs={} expr=v2145[32] }
        bx      = { defs={} expr=v2146[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2147[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2147[32] -4[32]) }
        si      = { defs={} expr=v2149[32] }
        di      = { defs={} expr=v2150[32] }
        es      = { defs={} expr=v2151[16] }
        cs      = { defs={} expr=v2152[16] }
        ss      = { defs={} expr=v2153[16] }
        ds      = { defs={} expr=v2154[16] }
        fs      = { defs={} expr=v2155[16] }
        gs      = { defs={} expr=v2156[16] }
        cf      = { defs={0x08048390,0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) -256[9])))))) }
        ?1      = { defs={} expr=v2158[1] }
        pf      = { defs={0x08048390,0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (extract[1] 1[32] 2[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 2[32] 3[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (extract[1] 3[32] 4[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (extract[1] 5[32] 6[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 6[32] 7[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])))))) }
        ?3      = { defs={} expr=v2160[1] }
        af      = { defs={0x08048390,0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) -256[9])))))) }
        ?5      = { defs={} expr=v2162[1] }
        zf      = { defs={0x08048390,0x08048396} expr=(zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) }
        sf      = { defs={0x08048390,0x08048396} expr=(extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) }
        tf      = { defs={} expr=v2165[1] }
        if      = { defs={} expr=v2166[1] }
        df      = { defs={} expr=v2167[1] }
        of      = { defs={0x08048390,0x08048396} expr=0[1] }
        iopl0   = { defs={} expr=v2169[1] }
        iopl1   = { defs={} expr=v2170[1] }
        nt      = { defs={} expr=v2171[1] }
        ?15     = { defs={} expr=v2172[1] }
        rf      = { defs={} expr=v2173[1] }
        vm      = { defs={} expr=v2174[1] }
        ac      = { defs={} expr=v2175[1] }
        vif     = { defs={} expr=v2176[1] }
        vip     = { defs={} expr=v2177[1] }
        id      = { defs={} expr=v2178[1] }
        ?22     = { defs={} expr=v2179[1] }
        ?23     = { defs={} expr=v2180[1] }
        ?24     = { defs={} expr=v2181[1] }
        ?25     = { defs={} expr=v2182[1] }
        ?26     = { defs={} expr=v2183[1] }
        ?27     = { defs={} expr=v2184[1] }
        ?28     = { defs={} expr=v2185[1] }
        ?29     = { defs={} expr=v2186[1] }
        ?30     = { defs={} expr=v2187[1] }
        ?31     = { defs={} expr=v2188[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396} expr=0x0804839d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 3[32]) }
          value = { defs={0x08048390} expr=(extract[8] 24[32] 32[32] v2148[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 2[32]) }
          value = { defs={0x08048390} expr=(extract[8] 16[32] 24[32] v2148[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 1[32]) }
          value = { defs={0x08048390} expr=(extract[8] 8[32] 16[32] v2148[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2147[32] -4[32]) }
          value = { defs={0x08048390} expr=(extract[8] 0[32] 8[32] v2148[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v2264[8] }
          flags = { rdonly }
0x804839d:jne    0x080483cc<<Insn>>
    registers:
        ax      = { defs={} expr=v2143[32] }
        cx      = { defs={} expr=v2144[32] }
        dx      = { defs={} expr=v2145[32] }
        bx      = { defs={} expr=v2146[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2147[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2147[32] -4[32]) }
        si      = { defs={} expr=v2149[32] }
        di      = { defs={} expr=v2150[32] }
        es      = { defs={} expr=v2151[16] }
        cs      = { defs={} expr=v2152[16] }
        ss      = { defs={} expr=v2153[16] }
        ds      = { defs={} expr=v2154[16] }
        fs      = { defs={} expr=v2155[16] }
        gs      = { defs={} expr=v2156[16] }
        cf      = { defs={0x08048390,0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) -256[9])))))) }
        ?1      = { defs={} expr=v2158[1] }
        pf      = { defs={0x08048390,0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (extract[1] 1[32] 2[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 2[32] 3[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (extract[1] 3[32] 4[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (extract[1] 5[32] 6[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 6[32] 7[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])))))) }
        ?3      = { defs={} expr=v2160[1] }
        af      = { defs={0x08048390,0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) -256[9])))))) }
        ?5      = { defs={} expr=v2162[1] }
        zf      = { defs={0x08048390,0x08048396} expr=(zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) }
        sf      = { defs={0x08048390,0x08048396} expr=(extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32])) }
        tf      = { defs={} expr=v2165[1] }
        if      = { defs={} expr=v2166[1] }
        df      = { defs={} expr=v2167[1] }
        of      = { defs={0x08048390,0x08048396} expr=0[1] }
        iopl0   = { defs={} expr=v2169[1] }
        iopl1   = { defs={} expr=v2170[1] }
        nt      = { defs={} expr=v2171[1] }
        ?15     = { defs={} expr=v2172[1] }
        rf      = { defs={} expr=v2173[1] }
        vm      = { defs={} expr=v2174[1] }
        ac      = { defs={} expr=v2175[1] }
        vif     = { defs={} expr=v2176[1] }
        vip     = { defs={} expr=v2177[1] }
        id      = { defs={} expr=v2178[1] }
        ?22     = { defs={} expr=v2179[1] }
        ?23     = { defs={} expr=v2180[1] }
        ?24     = { defs={} expr=v2181[1] }
        ?25     = { defs={} expr=v2182[1] }
        ?26     = { defs={} expr=v2183[1] }
        ?27     = { defs={} expr=v2184[1] }
        ?28     = { defs={} expr=v2185[1] }
        ?29     = { defs={} expr=v2186[1] }
        ?30     = { defs={} expr=v2187[1] }
        ?31     = { defs={} expr=v2188[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396,0x0804839d} expr=(ite[32] (invert[1] (zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] (add[32] (add[32] v2147[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2148[32])) (add[32] (add[32] v2147[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2148[32])) (add[32] v2147[32] -4[32]) (extract[8] 0[32] 8[32] v2148[32])) 0x080496f4[32] v2264[8]) 0x080496f4[32]))) 0x080483cc[32] 0x0804839f[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 3[32]) }
          value = { defs={0x08048390} expr=(extract[8] 24[32] 32[32] v2148[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 2[32]) }
          value = { defs={0x08048390} expr=(extract[8] 16[32] 24[32] v2148[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2147[32] -4[32]) 1[32]) }
          value = { defs={0x08048390} expr=(extract[8] 8[32] 16[32] v2148[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2147[32] -4[32]) }
          value = { defs={0x08048390} expr=(extract[8] 0[32] 8[32] v2148[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v2264[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) }
        cx      = { defs={} expr=v2370[32] }
        dx      = { defs={} expr=v2371[32] }
        bx      = { defs={} expr=v2372[32] }
        sp      = { defs={} expr=v2373[32] }
        bp      = { defs={} expr=v2374[32] }
        si      = { defs={} expr=v2375[32] }
        di      = { defs={} expr=v2376[32] }
        es      = { defs={} expr=v2377[16] }
        cs      = { defs={} expr=v2378[16] }
        ss      = { defs={} expr=v2379[16] }
        ds      = { defs={} expr=v2380[16] }
        fs      = { defs={} expr=v2381[16] }
        gs      = { defs={} expr=v2382[16] }
        cf      = { defs={} expr=v2383[1] }
        ?1      = { defs={} expr=v2384[1] }
        pf      = { defs={} expr=v2385[1] }
        ?3      = { defs={} expr=v2386[1] }
        af      = { defs={} expr=v2387[1] }
        ?5      = { defs={} expr=v2388[1] }
        zf      = { defs={} expr=v2389[1] }
        sf      = { defs={} expr=v2390[1] }
        tf      = { defs={} expr=v2391[1] }
        if      = { defs={} expr=v2392[1] }
        df      = { defs={} expr=v2393[1] }
        of      = { defs={} expr=v2394[1] }
        iopl0   = { defs={} expr=v2395[1] }
        iopl1   = { defs={} expr=v2396[1] }
        nt      = { defs={} expr=v2397[1] }
        ?15     = { defs={} expr=v2398[1] }
        rf      = { defs={} expr=v2399[1] }
        vm      = { defs={} expr=v2400[1] }
        ac      = { defs={} expr=v2401[1] }
        vif     = { defs={} expr=v2402[1] }
        vip     = { defs={} expr=v2403[1] }
        id      = { defs={} expr=v2404[1] }
        ?22     = { defs={} expr=v2405[1] }
        ?23     = { defs={} expr=v2406[1] }
        ?24     = { defs={} expr=v2407[1] }
        ?25     = { defs={} expr=v2408[1] }
        ?26     = { defs={} expr=v2409[1] }
        ?27     = { defs={} expr=v2410[1] }
        ?28     = { defs={} expr=v2411[1] }
        ?29     = { defs={} expr=v2412[1] }
        ?30     = { defs={} expr=v2413[1] }
        ?31     = { defs={} expr=v2414[1] }
        ip      = { defs={0x0804839f} expr=0x080483a4[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2424[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2423[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2422[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2421[8] }
          flags = { rdonly }
0x80483a4:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) }
        cx      = { defs={} expr=v2370[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) }
        bx      = { defs={} expr=v2372[32] }
        sp      = { defs={} expr=v2373[32] }
        bp      = { defs={} expr=v2374[32] }
        si      = { defs={} expr=v2375[32] }
        di      = { defs={} expr=v2376[32] }
        es      = { defs={} expr=v2377[16] }
        cs      = { defs={} expr=v2378[16] }
        ss      = { defs={} expr=v2379[16] }
        ds      = { defs={} expr=v2380[16] }
        fs      = { defs={} expr=v2381[16] }
        gs      = { defs={} expr=v2382[16] }
        cf      = { defs={} expr=v2383[1] }
        ?1      = { defs={} expr=v2384[1] }
        pf      = { defs={} expr=v2385[1] }
        ?3      = { defs={} expr=v2386[1] }
        af      = { defs={} expr=v2387[1] }
        ?5      = { defs={} expr=v2388[1] }
        zf      = { defs={} expr=v2389[1] }
        sf      = { defs={} expr=v2390[1] }
        tf      = { defs={} expr=v2391[1] }
        if      = { defs={} expr=v2392[1] }
        df      = { defs={} expr=v2393[1] }
        of      = { defs={} expr=v2394[1] }
        iopl0   = { defs={} expr=v2395[1] }
        iopl1   = { defs={} expr=v2396[1] }
        nt      = { defs={} expr=v2397[1] }
        ?15     = { defs={} expr=v2398[1] }
        rf      = { defs={} expr=v2399[1] }
        vm      = { defs={} expr=v2400[1] }
        ac      = { defs={} expr=v2401[1] }
        vif     = { defs={} expr=v2402[1] }
        vip     = { defs={} expr=v2403[1] }
        id      = { defs={} expr=v2404[1] }
        ?22     = { defs={} expr=v2405[1] }
        ?23     = { defs={} expr=v2406[1] }
        ?24     = { defs={} expr=v2407[1] }
        ?25     = { defs={} expr=v2408[1] }
        ?26     = { defs={} expr=v2409[1] }
        ?27     = { defs={} expr=v2410[1] }
        ?28     = { defs={} expr=v2411[1] }
        ?29     = { defs={} expr=v2412[1] }
        ?30     = { defs={} expr=v2413[1] }
        ?31     = { defs={} expr=v2414[1] }
        ip      = { defs={0x0804839f,0x080483a4} expr=0x080483a6[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) 3[32]) }
          value = { defs={} expr=v2439[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) 2[32]) }
          value = { defs={} expr=v2438[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) 1[32]) }
          value = { defs={} expr=v2437[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) }
          value = { defs={} expr=v2436[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2424[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2423[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2422[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2421[8] }
          flags = { rdonly }
0x80483a6:test   edx, edx
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) }
        cx      = { defs={} expr=v2370[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) }
        bx      = { defs={} expr=v2372[32] }
        sp      = { defs={} expr=v2373[32] }
        bp      = { defs={} expr=v2374[32] }
        si      = { defs={} expr=v2375[32] }
        di      = { defs={} expr=v2376[32] }
        es      = { defs={} expr=v2377[16] }
        cs      = { defs={} expr=v2378[16] }
        ss      = { defs={} expr=v2379[16] }
        ds      = { defs={} expr=v2380[16] }
        fs      = { defs={} expr=v2381[16] }
        gs      = { defs={} expr=v2382[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v2384[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))))))) }
        ?3      = { defs={} expr=v2386[1] }
        af      = { defs={0x080483a6} expr=v2476[1] }
        ?5      = { defs={} expr=v2388[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))))) }
        tf      = { defs={} expr=v2391[1] }
        if      = { defs={} expr=v2392[1] }
        df      = { defs={} expr=v2393[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v2395[1] }
        iopl1   = { defs={} expr=v2396[1] }
        nt      = { defs={} expr=v2397[1] }
        ?15     = { defs={} expr=v2398[1] }
        rf      = { defs={} expr=v2399[1] }
        vm      = { defs={} expr=v2400[1] }
        ac      = { defs={} expr=v2401[1] }
        vif     = { defs={} expr=v2402[1] }
        vip     = { defs={} expr=v2403[1] }
        id      = { defs={} expr=v2404[1] }
        ?22     = { defs={} expr=v2405[1] }
        ?23     = { defs={} expr=v2406[1] }
        ?24     = { defs={} expr=v2407[1] }
        ?25     = { defs={} expr=v2408[1] }
        ?26     = { defs={} expr=v2409[1] }
        ?27     = { defs={} expr=v2410[1] }
        ?28     = { defs={} expr=v2411[1] }
        ?29     = { defs={} expr=v2412[1] }
        ?30     = { defs={} expr=v2413[1] }
        ?31     = { defs={} expr=v2414[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6} expr=0x080483a8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) 3[32]) }
          value = { defs={} expr=v2439[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) 2[32]) }
          value = { defs={} expr=v2438[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) 1[32]) }
          value = { defs={} expr=v2437[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) }
          value = { defs={} expr=v2436[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2424[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2423[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2422[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2421[8] }
          flags = { rdonly }
0x80483a8:je     0x080483c5<<Insn>>
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) }
        cx      = { defs={} expr=v2370[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) }
        bx      = { defs={} expr=v2372[32] }
        sp      = { defs={} expr=v2373[32] }
        bp      = { defs={} expr=v2374[32] }
        si      = { defs={} expr=v2375[32] }
        di      = { defs={} expr=v2376[32] }
        es      = { defs={} expr=v2377[16] }
        cs      = { defs={} expr=v2378[16] }
        ss      = { defs={} expr=v2379[16] }
        ds      = { defs={} expr=v2380[16] }
        fs      = { defs={} expr=v2381[16] }
        gs      = { defs={} expr=v2382[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v2384[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8])))))))))) }
        ?3      = { defs={} expr=v2386[1] }
        af      = { defs={0x080483a6} expr=v2476[1] }
        ?5      = { defs={} expr=v2388[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))))) }
        tf      = { defs={} expr=v2391[1] }
        if      = { defs={} expr=v2392[1] }
        df      = { defs={} expr=v2393[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v2395[1] }
        iopl1   = { defs={} expr=v2396[1] }
        nt      = { defs={} expr=v2397[1] }
        ?15     = { defs={} expr=v2398[1] }
        rf      = { defs={} expr=v2399[1] }
        vm      = { defs={} expr=v2400[1] }
        ac      = { defs={} expr=v2401[1] }
        vif     = { defs={} expr=v2402[1] }
        vip     = { defs={} expr=v2403[1] }
        id      = { defs={} expr=v2404[1] }
        ?22     = { defs={} expr=v2405[1] }
        ?23     = { defs={} expr=v2406[1] }
        ?24     = { defs={} expr=v2407[1] }
        ?25     = { defs={} expr=v2408[1] }
        ?26     = { defs={} expr=v2409[1] }
        ?27     = { defs={} expr=v2410[1] }
        ?28     = { defs={} expr=v2411[1] }
        ?29     = { defs={} expr=v2412[1] }
        ?30     = { defs={} expr=v2413[1] }
        ?31     = { defs={} expr=v2414[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6,0x080483a8} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2436[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2437[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2438[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2439[8]))))) 0x080483c5[32] 0x080483aa[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) 3[32]) }
          value = { defs={} expr=v2439[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) 2[32]) }
          value = { defs={} expr=v2438[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) 1[32]) }
          value = { defs={} expr=v2437[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2421[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2422[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2423[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2424[8]))) }
          value = { defs={} expr=v2436[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2424[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2423[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2422[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2421[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483aa:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v2534[32] }
        cx      = { defs={} expr=v2535[32] }
        dx      = { defs={} expr=v2536[32] }
        bx      = { defs={} expr=v2537[32] }
        sp      = { defs={} expr=v2538[32] }
        bp      = { defs={} expr=v2539[32] }
        si      = { defs={0x080483aa} expr=v2540[32] }
        di      = { defs={} expr=v2541[32] }
        es      = { defs={} expr=v2542[16] }
        cs      = { defs={} expr=v2543[16] }
        ss      = { defs={} expr=v2544[16] }
        ds      = { defs={} expr=v2545[16] }
        fs      = { defs={} expr=v2546[16] }
        gs      = { defs={} expr=v2547[16] }
        cf      = { defs={} expr=v2548[1] }
        ?1      = { defs={} expr=v2549[1] }
        pf      = { defs={} expr=v2550[1] }
        ?3      = { defs={} expr=v2551[1] }
        af      = { defs={} expr=v2552[1] }
        ?5      = { defs={} expr=v2553[1] }
        zf      = { defs={} expr=v2554[1] }
        sf      = { defs={} expr=v2555[1] }
        tf      = { defs={} expr=v2556[1] }
        if      = { defs={} expr=v2557[1] }
        df      = { defs={} expr=v2558[1] }
        of      = { defs={} expr=v2559[1] }
        iopl0   = { defs={} expr=v2560[1] }
        iopl1   = { defs={} expr=v2561[1] }
        nt      = { defs={} expr=v2562[1] }
        ?15     = { defs={} expr=v2563[1] }
        rf      = { defs={} expr=v2564[1] }
        vm      = { defs={} expr=v2565[1] }
        ac      = { defs={} expr=v2566[1] }
        vif     = { defs={} expr=v2567[1] }
        vip     = { defs={} expr=v2568[1] }
        id      = { defs={} expr=v2569[1] }
        ?22     = { defs={} expr=v2570[1] }
        ?23     = { defs={} expr=v2571[1] }
        ?24     = { defs={} expr=v2572[1] }
        ?25     = { defs={} expr=v2573[1] }
        ?26     = { defs={} expr=v2574[1] }
        ?27     = { defs={} expr=v2575[1] }
        ?28     = { defs={} expr=v2576[1] }
        ?29     = { defs={} expr=v2577[1] }
        ?30     = { defs={} expr=v2578[1] }
        ?31     = { defs={} expr=v2579[1] }
        ip      = { defs={0x080483aa} expr=0x080483b0[32] }
    memory:
    init mem:
0x80483b0:add    eax, 0x04
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2534[32] 4[32]) }
        cx      = { defs={} expr=v2535[32] }
        dx      = { defs={} expr=v2536[32] }
        bx      = { defs={} expr=v2537[32] }
        sp      = { defs={} expr=v2538[32] }
        bp      = { defs={} expr=v2539[32] }
        si      = { defs={0x080483aa} expr=v2540[32] }
        di      = { defs={} expr=v2541[32] }
        es      = { defs={} expr=v2542[16] }
        cs      = { defs={} expr=v2543[16] }
        ss      = { defs={} expr=v2544[16] }
        ds      = { defs={} expr=v2545[16] }
        fs      = { defs={} expr=v2546[16] }
        gs      = { defs={} expr=v2547[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2549[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2551[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2553[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2534[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2534[32] 4[32])) }
        tf      = { defs={} expr=v2556[1] }
        if      = { defs={} expr=v2557[1] }
        df      = { defs={} expr=v2558[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2560[1] }
        iopl1   = { defs={} expr=v2561[1] }
        nt      = { defs={} expr=v2562[1] }
        ?15     = { defs={} expr=v2563[1] }
        rf      = { defs={} expr=v2564[1] }
        vm      = { defs={} expr=v2565[1] }
        ac      = { defs={} expr=v2566[1] }
        vif     = { defs={} expr=v2567[1] }
        vip     = { defs={} expr=v2568[1] }
        id      = { defs={} expr=v2569[1] }
        ?22     = { defs={} expr=v2570[1] }
        ?23     = { defs={} expr=v2571[1] }
        ?24     = { defs={} expr=v2572[1] }
        ?25     = { defs={} expr=v2573[1] }
        ?26     = { defs={} expr=v2574[1] }
        ?27     = { defs={} expr=v2575[1] }
        ?28     = { defs={} expr=v2576[1] }
        ?29     = { defs={} expr=v2577[1] }
        ?30     = { defs={} expr=v2578[1] }
        ?31     = { defs={} expr=v2579[1] }
        ip      = { defs={0x080483aa,0x080483b0} expr=0x080483b3[32] }
    memory:
    init mem:
0x80483b3:mov    DWORD PTR ds:[0x080496f0<.data+8>], eax
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2534[32] 4[32]) }
        cx      = { defs={} expr=v2535[32] }
        dx      = { defs={} expr=v2536[32] }
        bx      = { defs={} expr=v2537[32] }
        sp      = { defs={} expr=v2538[32] }
        bp      = { defs={} expr=v2539[32] }
        si      = { defs={0x080483aa} expr=v2540[32] }
        di      = { defs={} expr=v2541[32] }
        es      = { defs={} expr=v2542[16] }
        cs      = { defs={} expr=v2543[16] }
        ss      = { defs={} expr=v2544[16] }
        ds      = { defs={} expr=v2545[16] }
        fs      = { defs={} expr=v2546[16] }
        gs      = { defs={} expr=v2547[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2549[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2551[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2553[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2534[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2534[32] 4[32])) }
        tf      = { defs={} expr=v2556[1] }
        if      = { defs={} expr=v2557[1] }
        df      = { defs={} expr=v2558[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2560[1] }
        iopl1   = { defs={} expr=v2561[1] }
        nt      = { defs={} expr=v2562[1] }
        ?15     = { defs={} expr=v2563[1] }
        rf      = { defs={} expr=v2564[1] }
        vm      = { defs={} expr=v2565[1] }
        ac      = { defs={} expr=v2566[1] }
        vif     = { defs={} expr=v2567[1] }
        vip     = { defs={} expr=v2568[1] }
        id      = { defs={} expr=v2569[1] }
        ?22     = { defs={} expr=v2570[1] }
        ?23     = { defs={} expr=v2571[1] }
        ?24     = { defs={} expr=v2572[1] }
        ?25     = { defs={} expr=v2573[1] }
        ?26     = { defs={} expr=v2574[1] }
        ?27     = { defs={} expr=v2575[1] }
        ?28     = { defs={} expr=v2576[1] }
        ?29     = { defs={} expr=v2577[1] }
        ?30     = { defs={} expr=v2578[1] }
        ?31     = { defs={} expr=v2579[1] }
        ip      = { defs={0x080483aa,0x080483b0,0x080483b3} expr=0x080483b8[32] }
    memory:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 24[32] 32[32] (add[32] v2534[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 16[32] 24[32] (add[32] v2534[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 8[32] 16[32] (add[32] v2534[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32])) }
          flags = { }
    init mem:
0x80483b8:call   edx
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2534[32] 4[32]) }
        cx      = { defs={} expr=v2535[32] }
        dx      = { defs={} expr=v2536[32] }
        bx      = { defs={} expr=v2537[32] }
        sp      = { defs={0x080483b8} expr=(add[32] v2538[32] -4[32]) }
        bp      = { defs={} expr=v2539[32] }
        si      = { defs={0x080483aa} expr=v2540[32] }
        di      = { defs={} expr=v2541[32] }
        es      = { defs={} expr=v2542[16] }
        cs      = { defs={} expr=v2543[16] }
        ss      = { defs={} expr=v2544[16] }
        ds      = { defs={} expr=v2545[16] }
        fs      = { defs={} expr=v2546[16] }
        gs      = { defs={} expr=v2547[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2549[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2551[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2553[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2534[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2534[32] 4[32])) }
        tf      = { defs={} expr=v2556[1] }
        if      = { defs={} expr=v2557[1] }
        df      = { defs={} expr=v2558[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2534[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2534[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2560[1] }
        iopl1   = { defs={} expr=v2561[1] }
        nt      = { defs={} expr=v2562[1] }
        ?15     = { defs={} expr=v2563[1] }
        rf      = { defs={} expr=v2564[1] }
        vm      = { defs={} expr=v2565[1] }
        ac      = { defs={} expr=v2566[1] }
        vif     = { defs={} expr=v2567[1] }
        vip     = { defs={} expr=v2568[1] }
        id      = { defs={} expr=v2569[1] }
        ?22     = { defs={} expr=v2570[1] }
        ?23     = { defs={} expr=v2571[1] }
        ?24     = { defs={} expr=v2572[1] }
        ?25     = { defs={} expr=v2573[1] }
        ?26     = { defs={} expr=v2574[1] }
        ?27     = { defs={} expr=v2575[1] }
        ?28     = { defs={} expr=v2576[1] }
        ?29     = { defs={} expr=v2577[1] }
        ?30     = { defs={} expr=v2578[1] }
        ?31     = { defs={} expr=v2579[1] }
        ip      = { defs={0x080483b8} expr=v2536[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2538[32] -4[32]) 3[32]) }
          value = { defs={0x080483aa,0x080483b0,0x080483b3,0x080483b8} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2538[32] -4[32]) 2[32]) }
          value = { defs={0x080483aa,0x080483b0,0x080483b3,0x080483b8} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2538[32] -4[32]) 1[32]) }
          value = { defs={0x080483aa,0x080483b0,0x080483b3,0x080483b8} expr=-125[8] }
          flags = { }
        address = { defs={0x080483b8} expr=(add[32] v2538[32] -4[32]) }
          value = { defs={0x080483aa,0x080483b0,0x080483b3,0x080483b8} expr=-70[8] }
          flags = { }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 24[32] 32[32] (add[32] v2534[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 16[32] 24[32] (add[32] v2534[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 8[32] 16[32] (add[32] v2534[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 0[32] 8[32] (add[32] v2534[32] 4[32])) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) }
        cx      = { defs={} expr=v2705[32] }
        dx      = { defs={} expr=v2706[32] }
        bx      = { defs={} expr=v2707[32] }
        sp      = { defs={} expr=v2708[32] }
        bp      = { defs={} expr=v2709[32] }
        si      = { defs={} expr=v2710[32] }
        di      = { defs={} expr=v2711[32] }
        es      = { defs={} expr=v2712[16] }
        cs      = { defs={} expr=v2713[16] }
        ss      = { defs={} expr=v2714[16] }
        ds      = { defs={} expr=v2715[16] }
        fs      = { defs={} expr=v2716[16] }
        gs      = { defs={} expr=v2717[16] }
        cf      = { defs={} expr=v2718[1] }
        ?1      = { defs={} expr=v2719[1] }
        pf      = { defs={} expr=v2720[1] }
        ?3      = { defs={} expr=v2721[1] }
        af      = { defs={} expr=v2722[1] }
        ?5      = { defs={} expr=v2723[1] }
        zf      = { defs={} expr=v2724[1] }
        sf      = { defs={} expr=v2725[1] }
        tf      = { defs={} expr=v2726[1] }
        if      = { defs={} expr=v2727[1] }
        df      = { defs={} expr=v2728[1] }
        of      = { defs={} expr=v2729[1] }
        iopl0   = { defs={} expr=v2730[1] }
        iopl1   = { defs={} expr=v2731[1] }
        nt      = { defs={} expr=v2732[1] }
        ?15     = { defs={} expr=v2733[1] }
        rf      = { defs={} expr=v2734[1] }
        vm      = { defs={} expr=v2735[1] }
        ac      = { defs={} expr=v2736[1] }
        vif     = { defs={} expr=v2737[1] }
        vip     = { defs={} expr=v2738[1] }
        id      = { defs={} expr=v2739[1] }
        ?22     = { defs={} expr=v2740[1] }
        ?23     = { defs={} expr=v2741[1] }
        ?24     = { defs={} expr=v2742[1] }
        ?25     = { defs={} expr=v2743[1] }
        ?26     = { defs={} expr=v2744[1] }
        ?27     = { defs={} expr=v2745[1] }
        ?28     = { defs={} expr=v2746[1] }
        ?29     = { defs={} expr=v2747[1] }
        ?30     = { defs={} expr=v2748[1] }
        ?31     = { defs={} expr=v2749[1] }
        ip      = { defs={0x080483ba} expr=0x080483bf[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2759[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2758[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2757[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2756[8] }
          flags = { rdonly }
0x80483bf:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) }
        cx      = { defs={} expr=v2705[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) }
        bx      = { defs={} expr=v2707[32] }
        sp      = { defs={} expr=v2708[32] }
        bp      = { defs={} expr=v2709[32] }
        si      = { defs={} expr=v2710[32] }
        di      = { defs={} expr=v2711[32] }
        es      = { defs={} expr=v2712[16] }
        cs      = { defs={} expr=v2713[16] }
        ss      = { defs={} expr=v2714[16] }
        ds      = { defs={} expr=v2715[16] }
        fs      = { defs={} expr=v2716[16] }
        gs      = { defs={} expr=v2717[16] }
        cf      = { defs={} expr=v2718[1] }
        ?1      = { defs={} expr=v2719[1] }
        pf      = { defs={} expr=v2720[1] }
        ?3      = { defs={} expr=v2721[1] }
        af      = { defs={} expr=v2722[1] }
        ?5      = { defs={} expr=v2723[1] }
        zf      = { defs={} expr=v2724[1] }
        sf      = { defs={} expr=v2725[1] }
        tf      = { defs={} expr=v2726[1] }
        if      = { defs={} expr=v2727[1] }
        df      = { defs={} expr=v2728[1] }
        of      = { defs={} expr=v2729[1] }
        iopl0   = { defs={} expr=v2730[1] }
        iopl1   = { defs={} expr=v2731[1] }
        nt      = { defs={} expr=v2732[1] }
        ?15     = { defs={} expr=v2733[1] }
        rf      = { defs={} expr=v2734[1] }
        vm      = { defs={} expr=v2735[1] }
        ac      = { defs={} expr=v2736[1] }
        vif     = { defs={} expr=v2737[1] }
        vip     = { defs={} expr=v2738[1] }
        id      = { defs={} expr=v2739[1] }
        ?22     = { defs={} expr=v2740[1] }
        ?23     = { defs={} expr=v2741[1] }
        ?24     = { defs={} expr=v2742[1] }
        ?25     = { defs={} expr=v2743[1] }
        ?26     = { defs={} expr=v2744[1] }
        ?27     = { defs={} expr=v2745[1] }
        ?28     = { defs={} expr=v2746[1] }
        ?29     = { defs={} expr=v2747[1] }
        ?30     = { defs={} expr=v2748[1] }
        ?31     = { defs={} expr=v2749[1] }
        ip      = { defs={0x080483ba,0x080483bf} expr=0x080483c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) 3[32]) }
          value = { defs={} expr=v2774[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) 2[32]) }
          value = { defs={} expr=v2773[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) 1[32]) }
          value = { defs={} expr=v2772[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) }
          value = { defs={} expr=v2771[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2759[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2758[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2757[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2756[8] }
          flags = { rdonly }
0x80483c1:test   edx, edx
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) }
        cx      = { defs={} expr=v2705[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) }
        bx      = { defs={} expr=v2707[32] }
        sp      = { defs={} expr=v2708[32] }
        bp      = { defs={} expr=v2709[32] }
        si      = { defs={} expr=v2710[32] }
        di      = { defs={} expr=v2711[32] }
        es      = { defs={} expr=v2712[16] }
        cs      = { defs={} expr=v2713[16] }
        ss      = { defs={} expr=v2714[16] }
        ds      = { defs={} expr=v2715[16] }
        fs      = { defs={} expr=v2716[16] }
        gs      = { defs={} expr=v2717[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v2719[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))))))) }
        ?3      = { defs={} expr=v2721[1] }
        af      = { defs={0x080483c1} expr=v2811[1] }
        ?5      = { defs={} expr=v2723[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))))) }
        tf      = { defs={} expr=v2726[1] }
        if      = { defs={} expr=v2727[1] }
        df      = { defs={} expr=v2728[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v2730[1] }
        iopl1   = { defs={} expr=v2731[1] }
        nt      = { defs={} expr=v2732[1] }
        ?15     = { defs={} expr=v2733[1] }
        rf      = { defs={} expr=v2734[1] }
        vm      = { defs={} expr=v2735[1] }
        ac      = { defs={} expr=v2736[1] }
        vif     = { defs={} expr=v2737[1] }
        vip     = { defs={} expr=v2738[1] }
        id      = { defs={} expr=v2739[1] }
        ?22     = { defs={} expr=v2740[1] }
        ?23     = { defs={} expr=v2741[1] }
        ?24     = { defs={} expr=v2742[1] }
        ?25     = { defs={} expr=v2743[1] }
        ?26     = { defs={} expr=v2744[1] }
        ?27     = { defs={} expr=v2745[1] }
        ?28     = { defs={} expr=v2746[1] }
        ?29     = { defs={} expr=v2747[1] }
        ?30     = { defs={} expr=v2748[1] }
        ?31     = { defs={} expr=v2749[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1} expr=0x080483c3[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) 3[32]) }
          value = { defs={} expr=v2774[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) 2[32]) }
          value = { defs={} expr=v2773[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) 1[32]) }
          value = { defs={} expr=v2772[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) }
          value = { defs={} expr=v2771[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2759[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2758[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2757[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2756[8] }
          flags = { rdonly }
0x80483c3:jne    0x080483b0<<Insn>>
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) }
        cx      = { defs={} expr=v2705[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) }
        bx      = { defs={} expr=v2707[32] }
        sp      = { defs={} expr=v2708[32] }
        bp      = { defs={} expr=v2709[32] }
        si      = { defs={} expr=v2710[32] }
        di      = { defs={} expr=v2711[32] }
        es      = { defs={} expr=v2712[16] }
        cs      = { defs={} expr=v2713[16] }
        ss      = { defs={} expr=v2714[16] }
        ds      = { defs={} expr=v2715[16] }
        fs      = { defs={} expr=v2716[16] }
        gs      = { defs={} expr=v2717[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v2719[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))))))) }
        ?3      = { defs={} expr=v2721[1] }
        af      = { defs={0x080483c1} expr=v2811[1] }
        ?5      = { defs={} expr=v2723[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))))) }
        tf      = { defs={} expr=v2726[1] }
        if      = { defs={} expr=v2727[1] }
        df      = { defs={} expr=v2728[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v2730[1] }
        iopl1   = { defs={} expr=v2731[1] }
        nt      = { defs={} expr=v2732[1] }
        ?15     = { defs={} expr=v2733[1] }
        rf      = { defs={} expr=v2734[1] }
        vm      = { defs={} expr=v2735[1] }
        ac      = { defs={} expr=v2736[1] }
        vif     = { defs={} expr=v2737[1] }
        vip     = { defs={} expr=v2738[1] }
        id      = { defs={} expr=v2739[1] }
        ?22     = { defs={} expr=v2740[1] }
        ?23     = { defs={} expr=v2741[1] }
        ?24     = { defs={} expr=v2742[1] }
        ?25     = { defs={} expr=v2743[1] }
        ?26     = { defs={} expr=v2744[1] }
        ?27     = { defs={} expr=v2745[1] }
        ?28     = { defs={} expr=v2746[1] }
        ?29     = { defs={} expr=v2747[1] }
        ?30     = { defs={} expr=v2748[1] }
        ?31     = { defs={} expr=v2749[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1,0x080483c3} expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2771[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2772[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2773[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2774[8])))))) 0x080483b0[32] 0x080483c5[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) 3[32]) }
          value = { defs={} expr=v2774[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) 2[32]) }
          value = { defs={} expr=v2773[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) 1[32]) }
          value = { defs={} expr=v2772[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2756[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2757[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2758[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2759[8]))) }
          value = { defs={} expr=v2771[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2759[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2758[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2757[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2756[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483c5:mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01
    registers:
        ax      = { defs={} expr=v2870[32] }
        cx      = { defs={} expr=v2871[32] }
        dx      = { defs={} expr=v2872[32] }
        bx      = { defs={} expr=v2873[32] }
        sp      = { defs={} expr=v2874[32] }
        bp      = { defs={} expr=v2875[32] }
        si      = { defs={} expr=v2876[32] }
        di      = { defs={} expr=v2877[32] }
        es      = { defs={} expr=v2878[16] }
        cs      = { defs={} expr=v2879[16] }
        ss      = { defs={} expr=v2880[16] }
        ds      = { defs={} expr=v2881[16] }
        fs      = { defs={} expr=v2882[16] }
        gs      = { defs={} expr=v2883[16] }
        cf      = { defs={} expr=v2884[1] }
        ?1      = { defs={} expr=v2885[1] }
        pf      = { defs={} expr=v2886[1] }
        ?3      = { defs={} expr=v2887[1] }
        af      = { defs={} expr=v2888[1] }
        ?5      = { defs={} expr=v2889[1] }
        zf      = { defs={} expr=v2890[1] }
        sf      = { defs={} expr=v2891[1] }
        tf      = { defs={} expr=v2892[1] }
        if      = { defs={} expr=v2893[1] }
        df      = { defs={} expr=v2894[1] }
        of      = { defs={} expr=v2895[1] }
        iopl0   = { defs={} expr=v2896[1] }
        iopl1   = { defs={} expr=v2897[1] }
        nt      = { defs={} expr=v2898[1] }
        ?15     = { defs={} expr=v2899[1] }
        rf      = { defs={} expr=v2900[1] }
        vm      = { defs={} expr=v2901[1] }
        ac      = { defs={} expr=v2902[1] }
        vif     = { defs={} expr=v2903[1] }
        vip     = { defs={} expr=v2904[1] }
        id      = { defs={} expr=v2905[1] }
        ?22     = { defs={} expr=v2906[1] }
        ?23     = { defs={} expr=v2907[1] }
        ?24     = { defs={} expr=v2908[1] }
        ?25     = { defs={} expr=v2909[1] }
        ?26     = { defs={} expr=v2910[1] }
        ?27     = { defs={} expr=v2911[1] }
        ?28     = { defs={} expr=v2912[1] }
        ?29     = { defs={} expr=v2913[1] }
        ?30     = { defs={} expr=v2914[1] }
        ?31     = { defs={} expr=v2915[1] }
        ip      = { defs={0x080483c5} expr=0x080483cc[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={0x080483c5} expr=1[8] }
          flags = { }
    init mem:
0x80483cc:leave  
    registers:
        ax      = { defs={} expr=v2870[32] }
        cx      = { defs={} expr=v2871[32] }
        dx      = { defs={} expr=v2872[32] }
        bx      = { defs={} expr=v2873[32] }
        sp      = { defs={0x080483cc} expr=(add[32] v2875[32] 4[32]) }
        bp      = { defs={0x080483c5,0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2931[8] 0x080496f4[32] 1[8]) v2875[32] v2930[8]) v2875[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2933[8] 0x080496f4[32] 1[8]) (add[32] v2875[32] 1[32]) v2932[8]) (add[32] v2875[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2935[8] 0x080496f4[32] 1[8]) (add[32] v2875[32] 2[32]) v2934[8]) (add[32] v2875[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2937[8] 0x080496f4[32] 1[8]) (add[32] v2875[32] 3[32]) v2936[8]) (add[32] v2875[32] 3[32]))))) }
        si      = { defs={} expr=v2876[32] }
        di      = { defs={} expr=v2877[32] }
        es      = { defs={} expr=v2878[16] }
        cs      = { defs={} expr=v2879[16] }
        ss      = { defs={} expr=v2880[16] }
        ds      = { defs={} expr=v2881[16] }
        fs      = { defs={} expr=v2882[16] }
        gs      = { defs={} expr=v2883[16] }
        cf      = { defs={} expr=v2884[1] }
        ?1      = { defs={} expr=v2885[1] }
        pf      = { defs={} expr=v2886[1] }
        ?3      = { defs={} expr=v2887[1] }
        af      = { defs={} expr=v2888[1] }
        ?5      = { defs={} expr=v2889[1] }
        zf      = { defs={} expr=v2890[1] }
        sf      = { defs={} expr=v2891[1] }
        tf      = { defs={} expr=v2892[1] }
        if      = { defs={} expr=v2893[1] }
        df      = { defs={} expr=v2894[1] }
        of      = { defs={} expr=v2895[1] }
        iopl0   = { defs={} expr=v2896[1] }
        iopl1   = { defs={} expr=v2897[1] }
        nt      = { defs={} expr=v2898[1] }
        ?15     = { defs={} expr=v2899[1] }
        rf      = { defs={} expr=v2900[1] }
        vm      = { defs={} expr=v2901[1] }
        ac      = { defs={} expr=v2902[1] }
        vif     = { defs={} expr=v2903[1] }
        vip     = { defs={} expr=v2904[1] }
        id      = { defs={} expr=v2905[1] }
        ?22     = { defs={} expr=v2906[1] }
        ?23     = { defs={} expr=v2907[1] }
        ?24     = { defs={} expr=v2908[1] }
        ?25     = { defs={} expr=v2909[1] }
        ?26     = { defs={} expr=v2910[1] }
        ?27     = { defs={} expr=v2911[1] }
        ?28     = { defs={} expr=v2912[1] }
        ?29     = { defs={} expr=v2913[1] }
        ?30     = { defs={} expr=v2914[1] }
        ?31     = { defs={} expr=v2915[1] }
        ip      = { defs={0x080483c5,0x080483cc} expr=0x080483cd[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={0x080483c5} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v2875[32] 3[32]) }
          value = { defs={} expr=v2936[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2875[32] 2[32]) }
          value = { defs={} expr=v2934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2875[32] 1[32]) }
          value = { defs={} expr=v2932[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2875[32] }
          value = { defs={} expr=v2930[8] }
          flags = { rdonly }
0x80483cd:ret    
    registers:
        ax      = { defs={} expr=v2870[32] }
        cx      = { defs={} expr=v2871[32] }
        dx      = { defs={} expr=v2872[32] }
        bx      = { defs={} expr=v2873[32] }
        sp      = { defs={0x080483cc,0x080483cd} expr=(add[32] (add[32] v2875[32] 4[32]) 4[32]) }
        bp      = { defs={0x080483c5,0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2931[8] 0x080496f4[32] 1[8]) v2875[32] v2930[8]) v2875[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2933[8] 0x080496f4[32] 1[8]) (add[32] v2875[32] 1[32]) v2932[8]) (add[32] v2875[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2935[8] 0x080496f4[32] 1[8]) (add[32] v2875[32] 2[32]) v2934[8]) (add[32] v2875[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2937[8] 0x080496f4[32] 1[8]) (add[32] v2875[32] 3[32]) v2936[8]) (add[32] v2875[32] 3[32]))))) }
        si      = { defs={} expr=v2876[32] }
        di      = { defs={} expr=v2877[32] }
        es      = { defs={} expr=v2878[16] }
        cs      = { defs={} expr=v2879[16] }
        ss      = { defs={} expr=v2880[16] }
        ds      = { defs={} expr=v2881[16] }
        fs      = { defs={} expr=v2882[16] }
        gs      = { defs={} expr=v2883[16] }
        cf      = { defs={} expr=v2884[1] }
        ?1      = { defs={} expr=v2885[1] }
        pf      = { defs={} expr=v2886[1] }
        ?3      = { defs={} expr=v2887[1] }
        af      = { defs={} expr=v2888[1] }
        ?5      = { defs={} expr=v2889[1] }
        zf      = { defs={} expr=v2890[1] }
        sf      = { defs={} expr=v2891[1] }
        tf      = { defs={} expr=v2892[1] }
        if      = { defs={} expr=v2893[1] }
        df      = { defs={} expr=v2894[1] }
        of      = { defs={} expr=v2895[1] }
        iopl0   = { defs={} expr=v2896[1] }
        iopl1   = { defs={} expr=v2897[1] }
        nt      = { defs={} expr=v2898[1] }
        ?15     = { defs={} expr=v2899[1] }
        rf      = { defs={} expr=v2900[1] }
        vm      = { defs={} expr=v2901[1] }
        ac      = { defs={} expr=v2902[1] }
        vif     = { defs={} expr=v2903[1] }
        vip     = { defs={} expr=v2904[1] }
        id      = { defs={} expr=v2905[1] }
        ?22     = { defs={} expr=v2906[1] }
        ?23     = { defs={} expr=v2907[1] }
        ?24     = { defs={} expr=v2908[1] }
        ?25     = { defs={} expr=v2909[1] }
        ?26     = { defs={} expr=v2910[1] }
        ?27     = { defs={} expr=v2911[1] }
        ?28     = { defs={} expr=v2912[1] }
        ?29     = { defs={} expr=v2913[1] }
        ?30     = { defs={} expr=v2914[1] }
        ?31     = { defs={} expr=v2915[1] }
        ip      = { defs={0x080483c5,0x080483cd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2953[8] 0x080496f4[32] 1[8]) (add[32] v2875[32] 4[32]) v2952[8]) (add[32] v2875[32] 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2955[8] 0x080496f4[32] 1[8]) (add[32] (add[32] v2875[32] 4[32]) 1[32]) v2954[8]) (add[32] (add[32] v2875[32] 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2957[8] 0x080496f4[32] 1[8]) (add[32] (add[32] v2875[32] 4[32]) 2[32]) v2956[8]) (add[32] (add[32] v2875[32] 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2959[8] 0x080496f4[32] 1[8]) (add[32] (add[32] v2875[32] 4[32]) 3[32]) v2958[8]) (add[32] (add[32] v2875[32] 4[32]) 3[32]))))) }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={0x080483c5} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2875[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2958[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2875[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2956[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2875[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2954[8] }
          flags = { rdonly }
        address = { defs={0x080483cc,0x080483cd} expr=(add[32] v2875[32] 4[32]) }
          value = { defs={} expr=v2952[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2875[32] 3[32]) }
          value = { defs={} expr=v2936[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2875[32] 2[32]) }
          value = { defs={} expr=v2934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2875[32] 1[32]) }
          value = { defs={} expr=v2932[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2875[32] }
          value = { defs={} expr=v2930[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483d0:push   ebp
    registers:
        ax      = { defs={} expr=v3014[32] }
        cx      = { defs={} expr=v3015[32] }
        dx      = { defs={} expr=v3016[32] }
        bx      = { defs={} expr=v3017[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v3018[32] -4[32]) }
        bp      = { defs={} expr=v3019[32] }
        si      = { defs={} expr=v3020[32] }
        di      = { defs={} expr=v3021[32] }
        es      = { defs={} expr=v3022[16] }
        cs      = { defs={} expr=v3023[16] }
        ss      = { defs={} expr=v3024[16] }
        ds      = { defs={} expr=v3025[16] }
        fs      = { defs={} expr=v3026[16] }
        gs      = { defs={} expr=v3027[16] }
        cf      = { defs={} expr=v3028[1] }
        ?1      = { defs={} expr=v3029[1] }
        pf      = { defs={} expr=v3030[1] }
        ?3      = { defs={} expr=v3031[1] }
        af      = { defs={} expr=v3032[1] }
        ?5      = { defs={} expr=v3033[1] }
        zf      = { defs={} expr=v3034[1] }
        sf      = { defs={} expr=v3035[1] }
        tf      = { defs={} expr=v3036[1] }
        if      = { defs={} expr=v3037[1] }
        df      = { defs={} expr=v3038[1] }
        of      = { defs={} expr=v3039[1] }
        iopl0   = { defs={} expr=v3040[1] }
        iopl1   = { defs={} expr=v3041[1] }
        nt      = { defs={} expr=v3042[1] }
        ?15     = { defs={} expr=v3043[1] }
        rf      = { defs={} expr=v3044[1] }
        vm      = { defs={} expr=v3045[1] }
        ac      = { defs={} expr=v3046[1] }
        vif     = { defs={} expr=v3047[1] }
        vip     = { defs={} expr=v3048[1] }
        id      = { defs={} expr=v3049[1] }
        ?22     = { defs={} expr=v3050[1] }
        ?23     = { defs={} expr=v3051[1] }
        ?24     = { defs={} expr=v3052[1] }
        ?25     = { defs={} expr=v3053[1] }
        ?26     = { defs={} expr=v3054[1] }
        ?27     = { defs={} expr=v3055[1] }
        ?28     = { defs={} expr=v3056[1] }
        ?29     = { defs={} expr=v3057[1] }
        ?30     = { defs={} expr=v3058[1] }
        ?31     = { defs={} expr=v3059[1] }
        ip      = { defs={0x080483d0} expr=0x080483d1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v3019[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v3018[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v3019[32]) }
          flags = { }
    init mem:
0x80483d1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3014[32] }
        cx      = { defs={} expr=v3015[32] }
        dx      = { defs={} expr=v3016[32] }
        bx      = { defs={} expr=v3017[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v3018[32] -4[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v3018[32] -4[32]) }
        si      = { defs={} expr=v3020[32] }
        di      = { defs={} expr=v3021[32] }
        es      = { defs={} expr=v3022[16] }
        cs      = { defs={} expr=v3023[16] }
        ss      = { defs={} expr=v3024[16] }
        ds      = { defs={} expr=v3025[16] }
        fs      = { defs={} expr=v3026[16] }
        gs      = { defs={} expr=v3027[16] }
        cf      = { defs={} expr=v3028[1] }
        ?1      = { defs={} expr=v3029[1] }
        pf      = { defs={} expr=v3030[1] }
        ?3      = { defs={} expr=v3031[1] }
        af      = { defs={} expr=v3032[1] }
        ?5      = { defs={} expr=v3033[1] }
        zf      = { defs={} expr=v3034[1] }
        sf      = { defs={} expr=v3035[1] }
        tf      = { defs={} expr=v3036[1] }
        if      = { defs={} expr=v3037[1] }
        df      = { defs={} expr=v3038[1] }
        of      = { defs={} expr=v3039[1] }
        iopl0   = { defs={} expr=v3040[1] }
        iopl1   = { defs={} expr=v3041[1] }
        nt      = { defs={} expr=v3042[1] }
        ?15     = { defs={} expr=v3043[1] }
        rf      = { defs={} expr=v3044[1] }
        vm      = { defs={} expr=v3045[1] }
        ac      = { defs={} expr=v3046[1] }
        vif     = { defs={} expr=v3047[1] }
        vip     = { defs={} expr=v3048[1] }
        id      = { defs={} expr=v3049[1] }
        ?22     = { defs={} expr=v3050[1] }
        ?23     = { defs={} expr=v3051[1] }
        ?24     = { defs={} expr=v3052[1] }
        ?25     = { defs={} expr=v3053[1] }
        ?26     = { defs={} expr=v3054[1] }
        ?27     = { defs={} expr=v3055[1] }
        ?28     = { defs={} expr=v3056[1] }
        ?29     = { defs={} expr=v3057[1] }
        ?30     = { defs={} expr=v3058[1] }
        ?31     = { defs={} expr=v3059[1] }
        ip      = { defs={0x080483d0,0x080483d1} expr=0x080483d3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v3019[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v3018[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v3019[32]) }
          flags = { }
    init mem:
0x80483d3:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v3014[32] }
        cx      = { defs={} expr=v3015[32] }
        dx      = { defs={} expr=v3016[32] }
        bx      = { defs={} expr=v3017[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v3018[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v3018[32] -4[32]) }
        si      = { defs={} expr=v3020[32] }
        di      = { defs={} expr=v3021[32] }
        es      = { defs={} expr=v3022[16] }
        cs      = { defs={} expr=v3023[16] }
        ss      = { defs={} expr=v3024[16] }
        ds      = { defs={} expr=v3025[16] }
        fs      = { defs={} expr=v3026[16] }
        gs      = { defs={} expr=v3027[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3029[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3031[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3033[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v3018[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3018[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3036[1] }
        if      = { defs={} expr=v3037[1] }
        df      = { defs={} expr=v3038[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3040[1] }
        iopl1   = { defs={} expr=v3041[1] }
        nt      = { defs={} expr=v3042[1] }
        ?15     = { defs={} expr=v3043[1] }
        rf      = { defs={} expr=v3044[1] }
        vm      = { defs={} expr=v3045[1] }
        ac      = { defs={} expr=v3046[1] }
        vif     = { defs={} expr=v3047[1] }
        vip     = { defs={} expr=v3048[1] }
        id      = { defs={} expr=v3049[1] }
        ?22     = { defs={} expr=v3050[1] }
        ?23     = { defs={} expr=v3051[1] }
        ?24     = { defs={} expr=v3052[1] }
        ?25     = { defs={} expr=v3053[1] }
        ?26     = { defs={} expr=v3054[1] }
        ?27     = { defs={} expr=v3055[1] }
        ?28     = { defs={} expr=v3056[1] }
        ?29     = { defs={} expr=v3057[1] }
        ?30     = { defs={} expr=v3058[1] }
        ?31     = { defs={} expr=v3059[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3} expr=0x080483d6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v3019[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v3018[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v3019[32]) }
          flags = { }
    init mem:
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8<.jcr>]
    registers:
        ax      = { defs={0x080483d0,0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) }
        cx      = { defs={} expr=v3015[32] }
        dx      = { defs={} expr=v3016[32] }
        bx      = { defs={} expr=v3017[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v3018[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v3018[32] -4[32]) }
        si      = { defs={} expr=v3020[32] }
        di      = { defs={} expr=v3021[32] }
        es      = { defs={} expr=v3022[16] }
        cs      = { defs={} expr=v3023[16] }
        ss      = { defs={} expr=v3024[16] }
        ds      = { defs={} expr=v3025[16] }
        fs      = { defs={} expr=v3026[16] }
        gs      = { defs={} expr=v3027[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3029[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3018[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3031[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3033[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v3018[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3018[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3036[1] }
        if      = { defs={} expr=v3037[1] }
        df      = { defs={} expr=v3038[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3018[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3040[1] }
        iopl1   = { defs={} expr=v3041[1] }
        nt      = { defs={} expr=v3042[1] }
        ?15     = { defs={} expr=v3043[1] }
        rf      = { defs={} expr=v3044[1] }
        vm      = { defs={} expr=v3045[1] }
        ac      = { defs={} expr=v3046[1] }
        vif     = { defs={} expr=v3047[1] }
        vip     = { defs={} expr=v3048[1] }
        id      = { defs={} expr=v3049[1] }
        ?22     = { defs={} expr=v3050[1] }
        ?23     = { defs={} expr=v3051[1] }
        ?24     = { defs={} expr=v3052[1] }
        ?25     = { defs={} expr=v3053[1] }
        ?26     = { defs={} expr=v3054[1] }
        ?27     = { defs={} expr=v3055[1] }
        ?28     = { defs={} expr=v3056[1] }
        ?29     = { defs={} expr=v3057[1] }
        ?30     = { defs={} expr=v3058[1] }
        ?31     = { defs={} expr=v3059[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6} expr=0x080483db[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v3019[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v3018[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v3019[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3140[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3138[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3136[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3134[8] }
          flags = { rdonly }
0x80483db:test   eax, eax
    registers:
        ax      = { defs={0x080483d0,0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) }
        cx      = { defs={} expr=v3015[32] }
        dx      = { defs={} expr=v3016[32] }
        bx      = { defs={} expr=v3017[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v3018[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v3018[32] -4[32]) }
        si      = { defs={} expr=v3020[32] }
        di      = { defs={} expr=v3021[32] }
        es      = { defs={} expr=v3022[16] }
        cs      = { defs={} expr=v3023[16] }
        ss      = { defs={} expr=v3024[16] }
        ds      = { defs={} expr=v3025[16] }
        fs      = { defs={} expr=v3026[16] }
        gs      = { defs={} expr=v3027[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v3029[1] }
        pf      = { defs={0x080483d0,0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))))))) }
        ?3      = { defs={} expr=v3031[1] }
        af      = { defs={0x080483db} expr=v3178[1] }
        ?5      = { defs={} expr=v3033[1] }
        zf      = { defs={0x080483d0,0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))))) }
        sf      = { defs={0x080483d0,0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))))) }
        tf      = { defs={} expr=v3036[1] }
        if      = { defs={} expr=v3037[1] }
        df      = { defs={} expr=v3038[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v3040[1] }
        iopl1   = { defs={} expr=v3041[1] }
        nt      = { defs={} expr=v3042[1] }
        ?15     = { defs={} expr=v3043[1] }
        rf      = { defs={} expr=v3044[1] }
        vm      = { defs={} expr=v3045[1] }
        ac      = { defs={} expr=v3046[1] }
        vif     = { defs={} expr=v3047[1] }
        vip     = { defs={} expr=v3048[1] }
        id      = { defs={} expr=v3049[1] }
        ?22     = { defs={} expr=v3050[1] }
        ?23     = { defs={} expr=v3051[1] }
        ?24     = { defs={} expr=v3052[1] }
        ?25     = { defs={} expr=v3053[1] }
        ?26     = { defs={} expr=v3054[1] }
        ?27     = { defs={} expr=v3055[1] }
        ?28     = { defs={} expr=v3056[1] }
        ?29     = { defs={} expr=v3057[1] }
        ?30     = { defs={} expr=v3058[1] }
        ?31     = { defs={} expr=v3059[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db} expr=0x080483dd[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v3019[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v3018[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v3019[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3140[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3138[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3136[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3134[8] }
          flags = { rdonly }
0x80483dd:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483d0,0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) }
        cx      = { defs={} expr=v3015[32] }
        dx      = { defs={} expr=v3016[32] }
        bx      = { defs={} expr=v3017[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v3018[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v3018[32] -4[32]) }
        si      = { defs={} expr=v3020[32] }
        di      = { defs={} expr=v3021[32] }
        es      = { defs={} expr=v3022[16] }
        cs      = { defs={} expr=v3023[16] }
        ss      = { defs={} expr=v3024[16] }
        ds      = { defs={} expr=v3025[16] }
        fs      = { defs={} expr=v3026[16] }
        gs      = { defs={} expr=v3027[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v3029[1] }
        pf      = { defs={0x080483d0,0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32]))))))))))) }
        ?3      = { defs={} expr=v3031[1] }
        af      = { defs={0x080483db} expr=v3178[1] }
        ?5      = { defs={} expr=v3033[1] }
        zf      = { defs={0x080483d0,0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))))) }
        sf      = { defs={0x080483d0,0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))))) }
        tf      = { defs={} expr=v3036[1] }
        if      = { defs={} expr=v3037[1] }
        df      = { defs={} expr=v3038[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v3040[1] }
        iopl1   = { defs={} expr=v3041[1] }
        nt      = { defs={} expr=v3042[1] }
        ?15     = { defs={} expr=v3043[1] }
        rf      = { defs={} expr=v3044[1] }
        vm      = { defs={} expr=v3045[1] }
        ac      = { defs={} expr=v3046[1] }
        vif     = { defs={} expr=v3047[1] }
        vip     = { defs={} expr=v3048[1] }
        id      = { defs={} expr=v3049[1] }
        ?22     = { defs={} expr=v3050[1] }
        ?23     = { defs={} expr=v3051[1] }
        ?24     = { defs={} expr=v3052[1] }
        ?25     = { defs={} expr=v3053[1] }
        ?26     = { defs={} expr=v3054[1] }
        ?27     = { defs={} expr=v3055[1] }
        ?28     = { defs={} expr=v3056[1] }
        ?29     = { defs={} expr=v3057[1] }
        ?30     = { defs={} expr=v3058[1] }
        ?31     = { defs={} expr=v3059[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db,0x080483dd} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3135[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f8[32] v3134[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3137[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495f9[32] v3136[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3139[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fa[32] v3138[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3141[8] (add[32] (add[32] v3018[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3019[32])) (add[32] (add[32] v3018[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3019[32])) (add[32] v3018[32] -4[32]) (extract[8] 0[32] 8[32] v3019[32])) 0x080495fb[32] v3140[8]) 0x080495fb[32])))))) 0x08048400[32] 0x080483df[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v3019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3018[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v3019[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v3018[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v3019[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3140[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3138[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3136[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3134[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483df:mov    eax, 0x00000000
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3237[32] }
        dx      = { defs={} expr=v3238[32] }
        bx      = { defs={} expr=v3239[32] }
        sp      = { defs={} expr=v3240[32] }
        bp      = { defs={} expr=v3241[32] }
        si      = { defs={} expr=v3242[32] }
        di      = { defs={} expr=v3243[32] }
        es      = { defs={} expr=v3244[16] }
        cs      = { defs={} expr=v3245[16] }
        ss      = { defs={} expr=v3246[16] }
        ds      = { defs={} expr=v3247[16] }
        fs      = { defs={} expr=v3248[16] }
        gs      = { defs={} expr=v3249[16] }
        cf      = { defs={} expr=v3250[1] }
        ?1      = { defs={} expr=v3251[1] }
        pf      = { defs={} expr=v3252[1] }
        ?3      = { defs={} expr=v3253[1] }
        af      = { defs={} expr=v3254[1] }
        ?5      = { defs={} expr=v3255[1] }
        zf      = { defs={} expr=v3256[1] }
        sf      = { defs={} expr=v3257[1] }
        tf      = { defs={} expr=v3258[1] }
        if      = { defs={} expr=v3259[1] }
        df      = { defs={} expr=v3260[1] }
        of      = { defs={} expr=v3261[1] }
        iopl0   = { defs={} expr=v3262[1] }
        iopl1   = { defs={} expr=v3263[1] }
        nt      = { defs={} expr=v3264[1] }
        ?15     = { defs={} expr=v3265[1] }
        rf      = { defs={} expr=v3266[1] }
        vm      = { defs={} expr=v3267[1] }
        ac      = { defs={} expr=v3268[1] }
        vif     = { defs={} expr=v3269[1] }
        vip     = { defs={} expr=v3270[1] }
        id      = { defs={} expr=v3271[1] }
        ?22     = { defs={} expr=v3272[1] }
        ?23     = { defs={} expr=v3273[1] }
        ?24     = { defs={} expr=v3274[1] }
        ?25     = { defs={} expr=v3275[1] }
        ?26     = { defs={} expr=v3276[1] }
        ?27     = { defs={} expr=v3277[1] }
        ?28     = { defs={} expr=v3278[1] }
        ?29     = { defs={} expr=v3279[1] }
        ?30     = { defs={} expr=v3280[1] }
        ?31     = { defs={} expr=v3281[1] }
        ip      = { defs={0x080483df} expr=0x080483e4[32] }
    memory:
    init mem:
0x80483e4:test   eax, eax
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3237[32] }
        dx      = { defs={} expr=v3238[32] }
        bx      = { defs={} expr=v3239[32] }
        sp      = { defs={} expr=v3240[32] }
        bp      = { defs={} expr=v3241[32] }
        si      = { defs={} expr=v3242[32] }
        di      = { defs={} expr=v3243[32] }
        es      = { defs={} expr=v3244[16] }
        cs      = { defs={} expr=v3245[16] }
        ss      = { defs={} expr=v3246[16] }
        ds      = { defs={} expr=v3247[16] }
        fs      = { defs={} expr=v3248[16] }
        gs      = { defs={} expr=v3249[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3251[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3253[1] }
        af      = { defs={0x080483e4} expr=v3318[1] }
        ?5      = { defs={} expr=v3255[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3258[1] }
        if      = { defs={} expr=v3259[1] }
        df      = { defs={} expr=v3260[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3262[1] }
        iopl1   = { defs={} expr=v3263[1] }
        nt      = { defs={} expr=v3264[1] }
        ?15     = { defs={} expr=v3265[1] }
        rf      = { defs={} expr=v3266[1] }
        vm      = { defs={} expr=v3267[1] }
        ac      = { defs={} expr=v3268[1] }
        vif     = { defs={} expr=v3269[1] }
        vip     = { defs={} expr=v3270[1] }
        id      = { defs={} expr=v3271[1] }
        ?22     = { defs={} expr=v3272[1] }
        ?23     = { defs={} expr=v3273[1] }
        ?24     = { defs={} expr=v3274[1] }
        ?25     = { defs={} expr=v3275[1] }
        ?26     = { defs={} expr=v3276[1] }
        ?27     = { defs={} expr=v3277[1] }
        ?28     = { defs={} expr=v3278[1] }
        ?29     = { defs={} expr=v3279[1] }
        ?30     = { defs={} expr=v3280[1] }
        ?31     = { defs={} expr=v3281[1] }
        ip      = { defs={0x080483df,0x080483e4} expr=0x080483e6[32] }
    memory:
    init mem:
0x80483e6:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3237[32] }
        dx      = { defs={} expr=v3238[32] }
        bx      = { defs={} expr=v3239[32] }
        sp      = { defs={} expr=v3240[32] }
        bp      = { defs={} expr=v3241[32] }
        si      = { defs={} expr=v3242[32] }
        di      = { defs={} expr=v3243[32] }
        es      = { defs={} expr=v3244[16] }
        cs      = { defs={} expr=v3245[16] }
        ss      = { defs={} expr=v3246[16] }
        ds      = { defs={} expr=v3247[16] }
        fs      = { defs={} expr=v3248[16] }
        gs      = { defs={} expr=v3249[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3251[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3253[1] }
        af      = { defs={0x080483e4} expr=v3318[1] }
        ?5      = { defs={} expr=v3255[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3258[1] }
        if      = { defs={} expr=v3259[1] }
        df      = { defs={} expr=v3260[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3262[1] }
        iopl1   = { defs={} expr=v3263[1] }
        nt      = { defs={} expr=v3264[1] }
        ?15     = { defs={} expr=v3265[1] }
        rf      = { defs={} expr=v3266[1] }
        vm      = { defs={} expr=v3267[1] }
        ac      = { defs={} expr=v3268[1] }
        vif     = { defs={} expr=v3269[1] }
        vip     = { defs={} expr=v3270[1] }
        id      = { defs={} expr=v3271[1] }
        ?22     = { defs={} expr=v3272[1] }
        ?23     = { defs={} expr=v3273[1] }
        ?24     = { defs={} expr=v3274[1] }
        ?25     = { defs={} expr=v3275[1] }
        ?26     = { defs={} expr=v3276[1] }
        ?27     = { defs={} expr=v3277[1] }
        ?28     = { defs={} expr=v3278[1] }
        ?29     = { defs={} expr=v3279[1] }
        ?30     = { defs={} expr=v3280[1] }
        ?31     = { defs={} expr=v3281[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6} expr=0x08048400[32] }
    memory:
    init mem:
0x8048400:mov    esp, ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3237[32] }
        dx      = { defs={} expr=v3238[32] }
        bx      = { defs={} expr=v3239[32] }
        sp      = { defs={0x08048400} expr=v3241[32] }
        bp      = { defs={} expr=v3241[32] }
        si      = { defs={} expr=v3242[32] }
        di      = { defs={} expr=v3243[32] }
        es      = { defs={} expr=v3244[16] }
        cs      = { defs={} expr=v3245[16] }
        ss      = { defs={} expr=v3246[16] }
        ds      = { defs={} expr=v3247[16] }
        fs      = { defs={} expr=v3248[16] }
        gs      = { defs={} expr=v3249[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3251[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3253[1] }
        af      = { defs={0x080483e4} expr=v3318[1] }
        ?5      = { defs={} expr=v3255[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3258[1] }
        if      = { defs={} expr=v3259[1] }
        df      = { defs={} expr=v3260[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3262[1] }
        iopl1   = { defs={} expr=v3263[1] }
        nt      = { defs={} expr=v3264[1] }
        ?15     = { defs={} expr=v3265[1] }
        rf      = { defs={} expr=v3266[1] }
        vm      = { defs={} expr=v3267[1] }
        ac      = { defs={} expr=v3268[1] }
        vif     = { defs={} expr=v3269[1] }
        vip     = { defs={} expr=v3270[1] }
        id      = { defs={} expr=v3271[1] }
        ?22     = { defs={} expr=v3272[1] }
        ?23     = { defs={} expr=v3273[1] }
        ?24     = { defs={} expr=v3274[1] }
        ?25     = { defs={} expr=v3275[1] }
        ?26     = { defs={} expr=v3276[1] }
        ?27     = { defs={} expr=v3277[1] }
        ?28     = { defs={} expr=v3278[1] }
        ?29     = { defs={} expr=v3279[1] }
        ?30     = { defs={} expr=v3280[1] }
        ?31     = { defs={} expr=v3281[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400} expr=0x08048402[32] }
    memory:
    init mem:
0x8048402:pop    ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3237[32] }
        dx      = { defs={} expr=v3238[32] }
        bx      = { defs={} expr=v3239[32] }
        sp      = { defs={0x08048400,0x08048402} expr=(add[32] v3241[32] 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3341[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3342[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3343[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3344[8]))) }
        si      = { defs={} expr=v3242[32] }
        di      = { defs={} expr=v3243[32] }
        es      = { defs={} expr=v3244[16] }
        cs      = { defs={} expr=v3245[16] }
        ss      = { defs={} expr=v3246[16] }
        ds      = { defs={} expr=v3247[16] }
        fs      = { defs={} expr=v3248[16] }
        gs      = { defs={} expr=v3249[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3251[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3253[1] }
        af      = { defs={0x080483e4} expr=v3318[1] }
        ?5      = { defs={} expr=v3255[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3258[1] }
        if      = { defs={} expr=v3259[1] }
        df      = { defs={} expr=v3260[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3262[1] }
        iopl1   = { defs={} expr=v3263[1] }
        nt      = { defs={} expr=v3264[1] }
        ?15     = { defs={} expr=v3265[1] }
        rf      = { defs={} expr=v3266[1] }
        vm      = { defs={} expr=v3267[1] }
        ac      = { defs={} expr=v3268[1] }
        vif     = { defs={} expr=v3269[1] }
        vip     = { defs={} expr=v3270[1] }
        id      = { defs={} expr=v3271[1] }
        ?22     = { defs={} expr=v3272[1] }
        ?23     = { defs={} expr=v3273[1] }
        ?24     = { defs={} expr=v3274[1] }
        ?25     = { defs={} expr=v3275[1] }
        ?26     = { defs={} expr=v3276[1] }
        ?27     = { defs={} expr=v3277[1] }
        ?28     = { defs={} expr=v3278[1] }
        ?29     = { defs={} expr=v3279[1] }
        ?30     = { defs={} expr=v3280[1] }
        ?31     = { defs={} expr=v3281[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400,0x08048402} expr=0x08048403[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3241[32] 3[32]) }
          value = { defs={} expr=v3344[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3241[32] 2[32]) }
          value = { defs={} expr=v3343[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3241[32] 1[32]) }
          value = { defs={} expr=v3342[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402} expr=v3241[32] }
          value = { defs={} expr=v3341[8] }
          flags = { rdonly }
0x8048403:ret    
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3237[32] }
        dx      = { defs={} expr=v3238[32] }
        bx      = { defs={} expr=v3239[32] }
        sp      = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] (add[32] v3241[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3341[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3342[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3343[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3344[8]))) }
        si      = { defs={} expr=v3242[32] }
        di      = { defs={} expr=v3243[32] }
        es      = { defs={} expr=v3244[16] }
        cs      = { defs={} expr=v3245[16] }
        ss      = { defs={} expr=v3246[16] }
        ds      = { defs={} expr=v3247[16] }
        fs      = { defs={} expr=v3248[16] }
        gs      = { defs={} expr=v3249[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3251[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3253[1] }
        af      = { defs={0x080483e4} expr=v3318[1] }
        ?5      = { defs={} expr=v3255[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3258[1] }
        if      = { defs={} expr=v3259[1] }
        df      = { defs={} expr=v3260[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3262[1] }
        iopl1   = { defs={} expr=v3263[1] }
        nt      = { defs={} expr=v3264[1] }
        ?15     = { defs={} expr=v3265[1] }
        rf      = { defs={} expr=v3266[1] }
        vm      = { defs={} expr=v3267[1] }
        ac      = { defs={} expr=v3268[1] }
        vif     = { defs={} expr=v3269[1] }
        vip     = { defs={} expr=v3270[1] }
        id      = { defs={} expr=v3271[1] }
        ?22     = { defs={} expr=v3272[1] }
        ?23     = { defs={} expr=v3273[1] }
        ?24     = { defs={} expr=v3274[1] }
        ?25     = { defs={} expr=v3275[1] }
        ?26     = { defs={} expr=v3276[1] }
        ?27     = { defs={} expr=v3277[1] }
        ?28     = { defs={} expr=v3278[1] }
        ?29     = { defs={} expr=v3279[1] }
        ?30     = { defs={} expr=v3280[1] }
        ?31     = { defs={} expr=v3281[1] }
        ip      = { defs={0x08048403} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3358[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3359[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3360[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3361[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3241[32] 4[32]) 3[32]) }
          value = { defs={} expr=v3361[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3241[32] 4[32]) 2[32]) }
          value = { defs={} expr=v3360[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3241[32] 4[32]) 1[32]) }
          value = { defs={} expr=v3359[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] v3241[32] 4[32]) }
          value = { defs={} expr=v3358[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3241[32] 3[32]) }
          value = { defs={} expr=v3344[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3241[32] 2[32]) }
          value = { defs={} expr=v3343[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3241[32] 1[32]) }
          value = { defs={} expr=v3342[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402} expr=v3241[32] }
          value = { defs={} expr=v3341[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>
    registers:
        ax      = { defs={} expr=v3416[32] }
        cx      = { defs={} expr=v3417[32] }
        dx      = { defs={} expr=v3418[32] }
        bx      = { defs={} expr=v3419[32] }
        sp      = { defs={} expr=v3420[32] }
        bp      = { defs={} expr=v3421[32] }
        si      = { defs={} expr=v3422[32] }
        di      = { defs={} expr=v3423[32] }
        es      = { defs={} expr=v3424[16] }
        cs      = { defs={} expr=v3425[16] }
        ss      = { defs={} expr=v3426[16] }
        ds      = { defs={} expr=v3427[16] }
        fs      = { defs={} expr=v3428[16] }
        gs      = { defs={} expr=v3429[16] }
        cf      = { defs={} expr=v3430[1] }
        ?1      = { defs={} expr=v3431[1] }
        pf      = { defs={} expr=v3432[1] }
        ?3      = { defs={} expr=v3433[1] }
        af      = { defs={} expr=v3434[1] }
        ?5      = { defs={} expr=v3435[1] }
        zf      = { defs={} expr=v3436[1] }
        sf      = { defs={} expr=v3437[1] }
        tf      = { defs={} expr=v3438[1] }
        if      = { defs={} expr=v3439[1] }
        df      = { defs={} expr=v3440[1] }
        of      = { defs={} expr=v3441[1] }
        iopl0   = { defs={} expr=v3442[1] }
        iopl1   = { defs={} expr=v3443[1] }
        nt      = { defs={} expr=v3444[1] }
        ?15     = { defs={} expr=v3445[1] }
        rf      = { defs={} expr=v3446[1] }
        vm      = { defs={} expr=v3447[1] }
        ac      = { defs={} expr=v3448[1] }
        vif     = { defs={} expr=v3449[1] }
        vip     = { defs={} expr=v3450[1] }
        id      = { defs={} expr=v3451[1] }
        ?22     = { defs={} expr=v3452[1] }
        ?23     = { defs={} expr=v3453[1] }
        ?24     = { defs={} expr=v3454[1] }
        ?25     = { defs={} expr=v3455[1] }
        ?26     = { defs={} expr=v3456[1] }
        ?27     = { defs={} expr=v3457[1] }
        ?28     = { defs={} expr=v3458[1] }
        ?29     = { defs={} expr=v3459[1] }
        ?30     = { defs={} expr=v3460[1] }
        ?31     = { defs={} expr=v3461[1] }
        ip      = { defs={0x080483e8} expr=0x080483ef[32] }
    memory:
        address = { defs={} expr=(add[32] v3420[32] 3[32]) }
          value = { defs={0x080483e8} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3420[32] 2[32]) }
          value = { defs={0x080483e8} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3420[32] 1[32]) }
          value = { defs={0x080483e8} expr=-107[8] }
          flags = { }
        address = { defs={0x080483e8} expr=v3420[32] }
          value = { defs={0x080483e8} expr=-8[8] }
          flags = { }
    init mem:
0x80483ef:call   0x00000000
    registers:
        ax      = { defs={} expr=v3416[32] }
        cx      = { defs={} expr=v3417[32] }
        dx      = { defs={} expr=v3418[32] }
        bx      = { defs={} expr=v3419[32] }
        sp      = { defs={0x080483ef} expr=(add[32] v3420[32] -4[32]) }
        bp      = { defs={} expr=v3421[32] }
        si      = { defs={} expr=v3422[32] }
        di      = { defs={} expr=v3423[32] }
        es      = { defs={} expr=v3424[16] }
        cs      = { defs={} expr=v3425[16] }
        ss      = { defs={} expr=v3426[16] }
        ds      = { defs={} expr=v3427[16] }
        fs      = { defs={} expr=v3428[16] }
        gs      = { defs={} expr=v3429[16] }
        cf      = { defs={} expr=v3430[1] }
        ?1      = { defs={} expr=v3431[1] }
        pf      = { defs={} expr=v3432[1] }
        ?3      = { defs={} expr=v3433[1] }
        af      = { defs={} expr=v3434[1] }
        ?5      = { defs={} expr=v3435[1] }
        zf      = { defs={} expr=v3436[1] }
        sf      = { defs={} expr=v3437[1] }
        tf      = { defs={} expr=v3438[1] }
        if      = { defs={} expr=v3439[1] }
        df      = { defs={} expr=v3440[1] }
        of      = { defs={} expr=v3441[1] }
        iopl0   = { defs={} expr=v3442[1] }
        iopl1   = { defs={} expr=v3443[1] }
        nt      = { defs={} expr=v3444[1] }
        ?15     = { defs={} expr=v3445[1] }
        rf      = { defs={} expr=v3446[1] }
        vm      = { defs={} expr=v3447[1] }
        ac      = { defs={} expr=v3448[1] }
        vif     = { defs={} expr=v3449[1] }
        vip     = { defs={} expr=v3450[1] }
        id      = { defs={} expr=v3451[1] }
        ?22     = { defs={} expr=v3452[1] }
        ?23     = { defs={} expr=v3453[1] }
        ?24     = { defs={} expr=v3454[1] }
        ?25     = { defs={} expr=v3455[1] }
        ?26     = { defs={} expr=v3456[1] }
        ?27     = { defs={} expr=v3457[1] }
        ?28     = { defs={} expr=v3458[1] }
        ?29     = { defs={} expr=v3459[1] }
        ?30     = { defs={} expr=v3460[1] }
        ?31     = { defs={} expr=v3461[1] }
        ip      = { defs={0x080483ef} expr=0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3420[32] -4[32]) 3[32]) }
          value = { defs={0x080483e8,0x080483ef} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3420[32] -4[32]) 2[32]) }
          value = { defs={0x080483e8,0x080483ef} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3420[32] -4[32]) 1[32]) }
          value = { defs={0x080483e8,0x080483ef} expr=-125[8] }
          flags = { }
        address = { defs={0x080483ef} expr=(add[32] v3420[32] -4[32]) }
          value = { defs={0x080483e8,0x080483ef} expr=-12[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3420[32] 3[32]) }
          value = { defs={0x080483e8} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3420[32] 2[32]) }
          value = { defs={0x080483e8} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3420[32] 1[32]) }
          value = { defs={0x080483e8} expr=-107[8] }
          flags = { }
        address = { defs={0x080483e8} expr=v3420[32] }
          value = { defs={0x080483e8} expr=-8[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483f4:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3531[32] }
        cx      = { defs={} expr=v3532[32] }
        dx      = { defs={} expr=v3533[32] }
        bx      = { defs={} expr=v3534[32] }
        sp      = { defs={} expr=v3535[32] }
        bp      = { defs={} expr=v3536[32] }
        si      = { defs={0x080483f4} expr=v3537[32] }
        di      = { defs={} expr=v3538[32] }
        es      = { defs={} expr=v3539[16] }
        cs      = { defs={} expr=v3540[16] }
        ss      = { defs={} expr=v3541[16] }
        ds      = { defs={} expr=v3542[16] }
        fs      = { defs={} expr=v3543[16] }
        gs      = { defs={} expr=v3544[16] }
        cf      = { defs={} expr=v3545[1] }
        ?1      = { defs={} expr=v3546[1] }
        pf      = { defs={} expr=v3547[1] }
        ?3      = { defs={} expr=v3548[1] }
        af      = { defs={} expr=v3549[1] }
        ?5      = { defs={} expr=v3550[1] }
        zf      = { defs={} expr=v3551[1] }
        sf      = { defs={} expr=v3552[1] }
        tf      = { defs={} expr=v3553[1] }
        if      = { defs={} expr=v3554[1] }
        df      = { defs={} expr=v3555[1] }
        of      = { defs={} expr=v3556[1] }
        iopl0   = { defs={} expr=v3557[1] }
        iopl1   = { defs={} expr=v3558[1] }
        nt      = { defs={} expr=v3559[1] }
        ?15     = { defs={} expr=v3560[1] }
        rf      = { defs={} expr=v3561[1] }
        vm      = { defs={} expr=v3562[1] }
        ac      = { defs={} expr=v3563[1] }
        vif     = { defs={} expr=v3564[1] }
        vip     = { defs={} expr=v3565[1] }
        id      = { defs={} expr=v3566[1] }
        ?22     = { defs={} expr=v3567[1] }
        ?23     = { defs={} expr=v3568[1] }
        ?24     = { defs={} expr=v3569[1] }
        ?25     = { defs={} expr=v3570[1] }
        ?26     = { defs={} expr=v3571[1] }
        ?27     = { defs={} expr=v3572[1] }
        ?28     = { defs={} expr=v3573[1] }
        ?29     = { defs={} expr=v3574[1] }
        ?30     = { defs={} expr=v3575[1] }
        ?31     = { defs={} expr=v3576[1] }
        ip      = { defs={0x080483f4} expr=0x080483fa[32] }
    memory:
    init mem:
0x80483fa:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3531[32] }
        cx      = { defs={} expr=v3532[32] }
        dx      = { defs={} expr=v3533[32] }
        bx      = { defs={} expr=v3534[32] }
        sp      = { defs={} expr=v3535[32] }
        bp      = { defs={} expr=v3536[32] }
        si      = { defs={0x080483f4} expr=v3537[32] }
        di      = { defs={0x080483fa} expr=v3538[32] }
        es      = { defs={} expr=v3539[16] }
        cs      = { defs={} expr=v3540[16] }
        ss      = { defs={} expr=v3541[16] }
        ds      = { defs={} expr=v3542[16] }
        fs      = { defs={} expr=v3543[16] }
        gs      = { defs={} expr=v3544[16] }
        cf      = { defs={} expr=v3545[1] }
        ?1      = { defs={} expr=v3546[1] }
        pf      = { defs={} expr=v3547[1] }
        ?3      = { defs={} expr=v3548[1] }
        af      = { defs={} expr=v3549[1] }
        ?5      = { defs={} expr=v3550[1] }
        zf      = { defs={} expr=v3551[1] }
        sf      = { defs={} expr=v3552[1] }
        tf      = { defs={} expr=v3553[1] }
        if      = { defs={} expr=v3554[1] }
        df      = { defs={} expr=v3555[1] }
        of      = { defs={} expr=v3556[1] }
        iopl0   = { defs={} expr=v3557[1] }
        iopl1   = { defs={} expr=v3558[1] }
        nt      = { defs={} expr=v3559[1] }
        ?15     = { defs={} expr=v3560[1] }
        rf      = { defs={} expr=v3561[1] }
        vm      = { defs={} expr=v3562[1] }
        ac      = { defs={} expr=v3563[1] }
        vif     = { defs={} expr=v3564[1] }
        vip     = { defs={} expr=v3565[1] }
        id      = { defs={} expr=v3566[1] }
        ?22     = { defs={} expr=v3567[1] }
        ?23     = { defs={} expr=v3568[1] }
        ?24     = { defs={} expr=v3569[1] }
        ?25     = { defs={} expr=v3570[1] }
        ?26     = { defs={} expr=v3571[1] }
        ?27     = { defs={} expr=v3572[1] }
        ?28     = { defs={} expr=v3573[1] }
        ?29     = { defs={} expr=v3574[1] }
        ?30     = { defs={} expr=v3575[1] }
        ?31     = { defs={} expr=v3576[1] }
        ip      = { defs={0x080483f4,0x080483fa} expr=0x08048400[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048410:push   ebp
    registers:
        ax      = { defs={} expr=v3638[32] }
        cx      = { defs={} expr=v3639[32] }
        dx      = { defs={} expr=v3640[32] }
        bx      = { defs={} expr=v3641[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3642[32] -4[32]) }
        bp      = { defs={} expr=v3643[32] }
        si      = { defs={} expr=v3644[32] }
        di      = { defs={} expr=v3645[32] }
        es      = { defs={} expr=v3646[16] }
        cs      = { defs={} expr=v3647[16] }
        ss      = { defs={} expr=v3648[16] }
        ds      = { defs={} expr=v3649[16] }
        fs      = { defs={} expr=v3650[16] }
        gs      = { defs={} expr=v3651[16] }
        cf      = { defs={} expr=v3652[1] }
        ?1      = { defs={} expr=v3653[1] }
        pf      = { defs={} expr=v3654[1] }
        ?3      = { defs={} expr=v3655[1] }
        af      = { defs={} expr=v3656[1] }
        ?5      = { defs={} expr=v3657[1] }
        zf      = { defs={} expr=v3658[1] }
        sf      = { defs={} expr=v3659[1] }
        tf      = { defs={} expr=v3660[1] }
        if      = { defs={} expr=v3661[1] }
        df      = { defs={} expr=v3662[1] }
        of      = { defs={} expr=v3663[1] }
        iopl0   = { defs={} expr=v3664[1] }
        iopl1   = { defs={} expr=v3665[1] }
        nt      = { defs={} expr=v3666[1] }
        ?15     = { defs={} expr=v3667[1] }
        rf      = { defs={} expr=v3668[1] }
        vm      = { defs={} expr=v3669[1] }
        ac      = { defs={} expr=v3670[1] }
        vif     = { defs={} expr=v3671[1] }
        vip     = { defs={} expr=v3672[1] }
        id      = { defs={} expr=v3673[1] }
        ?22     = { defs={} expr=v3674[1] }
        ?23     = { defs={} expr=v3675[1] }
        ?24     = { defs={} expr=v3676[1] }
        ?25     = { defs={} expr=v3677[1] }
        ?26     = { defs={} expr=v3678[1] }
        ?27     = { defs={} expr=v3679[1] }
        ?28     = { defs={} expr=v3680[1] }
        ?29     = { defs={} expr=v3681[1] }
        ?30     = { defs={} expr=v3682[1] }
        ?31     = { defs={} expr=v3683[1] }
        ip      = { defs={0x08048410} expr=0x08048411[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3643[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3642[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3643[32]) }
          flags = { }
    init mem:
0x8048411:mov    edx, 0x08048480<handler>
    registers:
        ax      = { defs={} expr=v3638[32] }
        cx      = { defs={} expr=v3639[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3641[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3642[32] -4[32]) }
        bp      = { defs={} expr=v3643[32] }
        si      = { defs={} expr=v3644[32] }
        di      = { defs={} expr=v3645[32] }
        es      = { defs={} expr=v3646[16] }
        cs      = { defs={} expr=v3647[16] }
        ss      = { defs={} expr=v3648[16] }
        ds      = { defs={} expr=v3649[16] }
        fs      = { defs={} expr=v3650[16] }
        gs      = { defs={} expr=v3651[16] }
        cf      = { defs={} expr=v3652[1] }
        ?1      = { defs={} expr=v3653[1] }
        pf      = { defs={} expr=v3654[1] }
        ?3      = { defs={} expr=v3655[1] }
        af      = { defs={} expr=v3656[1] }
        ?5      = { defs={} expr=v3657[1] }
        zf      = { defs={} expr=v3658[1] }
        sf      = { defs={} expr=v3659[1] }
        tf      = { defs={} expr=v3660[1] }
        if      = { defs={} expr=v3661[1] }
        df      = { defs={} expr=v3662[1] }
        of      = { defs={} expr=v3663[1] }
        iopl0   = { defs={} expr=v3664[1] }
        iopl1   = { defs={} expr=v3665[1] }
        nt      = { defs={} expr=v3666[1] }
        ?15     = { defs={} expr=v3667[1] }
        rf      = { defs={} expr=v3668[1] }
        vm      = { defs={} expr=v3669[1] }
        ac      = { defs={} expr=v3670[1] }
        vif     = { defs={} expr=v3671[1] }
        vip     = { defs={} expr=v3672[1] }
        id      = { defs={} expr=v3673[1] }
        ?22     = { defs={} expr=v3674[1] }
        ?23     = { defs={} expr=v3675[1] }
        ?24     = { defs={} expr=v3676[1] }
        ?25     = { defs={} expr=v3677[1] }
        ?26     = { defs={} expr=v3678[1] }
        ?27     = { defs={} expr=v3679[1] }
        ?28     = { defs={} expr=v3680[1] }
        ?29     = { defs={} expr=v3681[1] }
        ?30     = { defs={} expr=v3682[1] }
        ?31     = { defs={} expr=v3683[1] }
        ip      = { defs={0x08048410,0x08048411} expr=0x08048416[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3643[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3642[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3643[32]) }
          flags = { }
    init mem:
0x8048416:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3638[32] }
        cx      = { defs={} expr=v3639[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3641[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3642[32] -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3642[32] -4[32]) }
        si      = { defs={} expr=v3644[32] }
        di      = { defs={} expr=v3645[32] }
        es      = { defs={} expr=v3646[16] }
        cs      = { defs={} expr=v3647[16] }
        ss      = { defs={} expr=v3648[16] }
        ds      = { defs={} expr=v3649[16] }
        fs      = { defs={} expr=v3650[16] }
        gs      = { defs={} expr=v3651[16] }
        cf      = { defs={} expr=v3652[1] }
        ?1      = { defs={} expr=v3653[1] }
        pf      = { defs={} expr=v3654[1] }
        ?3      = { defs={} expr=v3655[1] }
        af      = { defs={} expr=v3656[1] }
        ?5      = { defs={} expr=v3657[1] }
        zf      = { defs={} expr=v3658[1] }
        sf      = { defs={} expr=v3659[1] }
        tf      = { defs={} expr=v3660[1] }
        if      = { defs={} expr=v3661[1] }
        df      = { defs={} expr=v3662[1] }
        of      = { defs={} expr=v3663[1] }
        iopl0   = { defs={} expr=v3664[1] }
        iopl1   = { defs={} expr=v3665[1] }
        nt      = { defs={} expr=v3666[1] }
        ?15     = { defs={} expr=v3667[1] }
        rf      = { defs={} expr=v3668[1] }
        vm      = { defs={} expr=v3669[1] }
        ac      = { defs={} expr=v3670[1] }
        vif     = { defs={} expr=v3671[1] }
        vip     = { defs={} expr=v3672[1] }
        id      = { defs={} expr=v3673[1] }
        ?22     = { defs={} expr=v3674[1] }
        ?23     = { defs={} expr=v3675[1] }
        ?24     = { defs={} expr=v3676[1] }
        ?25     = { defs={} expr=v3677[1] }
        ?26     = { defs={} expr=v3678[1] }
        ?27     = { defs={} expr=v3679[1] }
        ?28     = { defs={} expr=v3680[1] }
        ?29     = { defs={} expr=v3681[1] }
        ?30     = { defs={} expr=v3682[1] }
        ?31     = { defs={} expr=v3683[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416} expr=0x08048418[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3643[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3642[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3643[32]) }
          flags = { }
    init mem:
0x8048418:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v3638[32] }
        cx      = { defs={} expr=v3639[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3641[32] }
        sp      = { defs={0x08048410,0x08048418} expr=(add[32] (add[32] v3642[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3642[32] -4[32]) }
        si      = { defs={} expr=v3644[32] }
        di      = { defs={} expr=v3645[32] }
        es      = { defs={} expr=v3646[16] }
        cs      = { defs={} expr=v3647[16] }
        ss      = { defs={} expr=v3648[16] }
        ds      = { defs={} expr=v3649[16] }
        fs      = { defs={} expr=v3650[16] }
        gs      = { defs={} expr=v3651[16] }
        cf      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3642[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3642[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3653[1] }
        pf      = { defs={0x08048410,0x08048418} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3642[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3642[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3655[1] }
        af      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3642[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3642[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3657[1] }
        zf      = { defs={0x08048410,0x08048418} expr=(zerop[1] (add[32] (add[32] v3642[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048410,0x08048418} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3642[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3660[1] }
        if      = { defs={} expr=v3661[1] }
        df      = { defs={} expr=v3662[1] }
        of      = { defs={0x08048410,0x08048418} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3642[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3642[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3642[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3642[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3664[1] }
        iopl1   = { defs={} expr=v3665[1] }
        nt      = { defs={} expr=v3666[1] }
        ?15     = { defs={} expr=v3667[1] }
        rf      = { defs={} expr=v3668[1] }
        vm      = { defs={} expr=v3669[1] }
        ac      = { defs={} expr=v3670[1] }
        vif     = { defs={} expr=v3671[1] }
        vip     = { defs={} expr=v3672[1] }
        id      = { defs={} expr=v3673[1] }
        ?22     = { defs={} expr=v3674[1] }
        ?23     = { defs={} expr=v3675[1] }
        ?24     = { defs={} expr=v3676[1] }
        ?25     = { defs={} expr=v3677[1] }
        ?26     = { defs={} expr=v3678[1] }
        ?27     = { defs={} expr=v3679[1] }
        ?28     = { defs={} expr=v3680[1] }
        ?29     = { defs={} expr=v3681[1] }
        ?30     = { defs={} expr=v3682[1] }
        ?31     = { defs={} expr=v3683[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418} expr=0x0804841b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3643[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3642[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3643[32]) }
          flags = { }
    init mem:
0x804841b:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v3638[32] }
        cx      = { defs={} expr=v3639[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3641[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3642[32] -4[32]) }
        si      = { defs={} expr=v3644[32] }
        di      = { defs={} expr=v3645[32] }
        es      = { defs={} expr=v3646[16] }
        cs      = { defs={} expr=v3647[16] }
        ss      = { defs={} expr=v3648[16] }
        ds      = { defs={} expr=v3649[16] }
        fs      = { defs={} expr=v3650[16] }
        gs      = { defs={} expr=v3651[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3653[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3655[1] }
        af      = { defs={0x0804841b} expr=v3788[1] }
        ?5      = { defs={} expr=v3657[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3660[1] }
        if      = { defs={} expr=v3661[1] }
        df      = { defs={} expr=v3662[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3664[1] }
        iopl1   = { defs={} expr=v3665[1] }
        nt      = { defs={} expr=v3666[1] }
        ?15     = { defs={} expr=v3667[1] }
        rf      = { defs={} expr=v3668[1] }
        vm      = { defs={} expr=v3669[1] }
        ac      = { defs={} expr=v3670[1] }
        vif     = { defs={} expr=v3671[1] }
        vip     = { defs={} expr=v3672[1] }
        id      = { defs={} expr=v3673[1] }
        ?22     = { defs={} expr=v3674[1] }
        ?23     = { defs={} expr=v3675[1] }
        ?24     = { defs={} expr=v3676[1] }
        ?25     = { defs={} expr=v3677[1] }
        ?26     = { defs={} expr=v3678[1] }
        ?27     = { defs={} expr=v3679[1] }
        ?28     = { defs={} expr=v3680[1] }
        ?29     = { defs={} expr=v3681[1] }
        ?30     = { defs={} expr=v3682[1] }
        ?31     = { defs={} expr=v3683[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b} expr=0x0804841e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3643[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3642[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3643[32]) }
          flags = { }
    init mem:
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
    registers:
        ax      = { defs={} expr=v3638[32] }
        cx      = { defs={} expr=v3639[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3641[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3642[32] -4[32]) }
        si      = { defs={} expr=v3644[32] }
        di      = { defs={} expr=v3645[32] }
        es      = { defs={} expr=v3646[16] }
        cs      = { defs={} expr=v3647[16] }
        ss      = { defs={} expr=v3648[16] }
        ds      = { defs={} expr=v3649[16] }
        fs      = { defs={} expr=v3650[16] }
        gs      = { defs={} expr=v3651[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3653[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3655[1] }
        af      = { defs={0x0804841b} expr=v3788[1] }
        ?5      = { defs={} expr=v3657[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3660[1] }
        if      = { defs={} expr=v3661[1] }
        df      = { defs={} expr=v3662[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3664[1] }
        iopl1   = { defs={} expr=v3665[1] }
        nt      = { defs={} expr=v3666[1] }
        ?15     = { defs={} expr=v3667[1] }
        rf      = { defs={} expr=v3668[1] }
        vm      = { defs={} expr=v3669[1] }
        ac      = { defs={} expr=v3670[1] }
        vif     = { defs={} expr=v3671[1] }
        vip     = { defs={} expr=v3672[1] }
        id      = { defs={} expr=v3673[1] }
        ?22     = { defs={} expr=v3674[1] }
        ?23     = { defs={} expr=v3675[1] }
        ?24     = { defs={} expr=v3676[1] }
        ?25     = { defs={} expr=v3677[1] }
        ?26     = { defs={} expr=v3678[1] }
        ?27     = { defs={} expr=v3679[1] }
        ?28     = { defs={} expr=v3680[1] }
        ?29     = { defs={} expr=v3681[1] }
        ?30     = { defs={} expr=v3682[1] }
        ?31     = { defs={} expr=v3683[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e} expr=0x08048422[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={0x08048411,0x0804841e} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={0x08048411,0x0804841e} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3643[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3642[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3643[32]) }
          flags = { }
    init mem:
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
    registers:
        ax      = { defs={} expr=v3638[32] }
        cx      = { defs={} expr=v3639[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3641[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3642[32] -4[32]) }
        si      = { defs={} expr=v3644[32] }
        di      = { defs={} expr=v3645[32] }
        es      = { defs={} expr=v3646[16] }
        cs      = { defs={} expr=v3647[16] }
        ss      = { defs={} expr=v3648[16] }
        ds      = { defs={} expr=v3649[16] }
        fs      = { defs={} expr=v3650[16] }
        gs      = { defs={} expr=v3651[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3653[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3655[1] }
        af      = { defs={0x0804841b} expr=v3788[1] }
        ?5      = { defs={} expr=v3657[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3660[1] }
        if      = { defs={} expr=v3661[1] }
        df      = { defs={} expr=v3662[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3664[1] }
        iopl1   = { defs={} expr=v3665[1] }
        nt      = { defs={} expr=v3666[1] }
        ?15     = { defs={} expr=v3667[1] }
        rf      = { defs={} expr=v3668[1] }
        vm      = { defs={} expr=v3669[1] }
        ac      = { defs={} expr=v3670[1] }
        vif     = { defs={} expr=v3671[1] }
        vip     = { defs={} expr=v3672[1] }
        id      = { defs={} expr=v3673[1] }
        ?22     = { defs={} expr=v3674[1] }
        ?23     = { defs={} expr=v3675[1] }
        ?24     = { defs={} expr=v3676[1] }
        ?25     = { defs={} expr=v3677[1] }
        ?26     = { defs={} expr=v3678[1] }
        ?27     = { defs={} expr=v3679[1] }
        ?28     = { defs={} expr=v3680[1] }
        ?29     = { defs={} expr=v3681[1] }
        ?30     = { defs={} expr=v3682[1] }
        ?31     = { defs={} expr=v3683[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422} expr=0x08048429[32] }
    memory:
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048422} expr=(bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={0x08048422} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={0x08048411,0x0804841e} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={0x08048411,0x0804841e} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3643[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3642[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3643[32]) }
          flags = { }
    init mem:
0x8048429:call   0x080482f0<signal@plt>
    registers:
        ax      = { defs={} expr=v3638[32] }
        cx      = { defs={} expr=v3639[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3641[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3642[32] -4[32]) }
        si      = { defs={} expr=v3644[32] }
        di      = { defs={} expr=v3645[32] }
        es      = { defs={} expr=v3646[16] }
        cs      = { defs={} expr=v3647[16] }
        ss      = { defs={} expr=v3648[16] }
        ds      = { defs={} expr=v3649[16] }
        fs      = { defs={} expr=v3650[16] }
        gs      = { defs={} expr=v3651[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3653[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3655[1] }
        af      = { defs={0x0804841b} expr=v3788[1] }
        ?5      = { defs={} expr=v3657[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3660[1] }
        if      = { defs={} expr=v3661[1] }
        df      = { defs={} expr=v3662[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3664[1] }
        iopl1   = { defs={} expr=v3665[1] }
        nt      = { defs={} expr=v3666[1] }
        ?15     = { defs={} expr=v3667[1] }
        rf      = { defs={} expr=v3668[1] }
        vm      = { defs={} expr=v3669[1] }
        ac      = { defs={} expr=v3670[1] }
        vif     = { defs={} expr=v3671[1] }
        vip     = { defs={} expr=v3672[1] }
        id      = { defs={} expr=v3673[1] }
        ?22     = { defs={} expr=v3674[1] }
        ?23     = { defs={} expr=v3675[1] }
        ?24     = { defs={} expr=v3676[1] }
        ?25     = { defs={} expr=v3677[1] }
        ?26     = { defs={} expr=v3678[1] }
        ?27     = { defs={} expr=v3679[1] }
        ?28     = { defs={} expr=v3680[1] }
        ?29     = { defs={} expr=v3681[1] }
        ?30     = { defs={} expr=v3682[1] }
        ?31     = { defs={} expr=v3683[1] }
        ip      = { defs={0x08048429} expr=0x080482f0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422,0x08048429} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422,0x08048429} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422,0x08048429} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) -4[32]) }
          value = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422,0x08048429} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048422} expr=(bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={0x08048422} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={0x08048411,0x0804841e} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={0x08048411,0x0804841e} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3642[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3643[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3642[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3643[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3642[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3643[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804842e:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v3869[32] }
        cx      = { defs={} expr=v3870[32] }
        dx      = { defs={} expr=v3871[32] }
        bx      = { defs={} expr=v3872[32] }
        sp      = { defs={0x0804842e} expr=v3874[32] }
        bp      = { defs={} expr=v3874[32] }
        si      = { defs={} expr=v3875[32] }
        di      = { defs={} expr=v3876[32] }
        es      = { defs={} expr=v3877[16] }
        cs      = { defs={} expr=v3878[16] }
        ss      = { defs={} expr=v3879[16] }
        ds      = { defs={} expr=v3880[16] }
        fs      = { defs={} expr=v3881[16] }
        gs      = { defs={} expr=v3882[16] }
        cf      = { defs={} expr=v3883[1] }
        ?1      = { defs={} expr=v3884[1] }
        pf      = { defs={} expr=v3885[1] }
        ?3      = { defs={} expr=v3886[1] }
        af      = { defs={} expr=v3887[1] }
        ?5      = { defs={} expr=v3888[1] }
        zf      = { defs={} expr=v3889[1] }
        sf      = { defs={} expr=v3890[1] }
        tf      = { defs={} expr=v3891[1] }
        if      = { defs={} expr=v3892[1] }
        df      = { defs={} expr=v3893[1] }
        of      = { defs={} expr=v3894[1] }
        iopl0   = { defs={} expr=v3895[1] }
        iopl1   = { defs={} expr=v3896[1] }
        nt      = { defs={} expr=v3897[1] }
        ?15     = { defs={} expr=v3898[1] }
        rf      = { defs={} expr=v3899[1] }
        vm      = { defs={} expr=v3900[1] }
        ac      = { defs={} expr=v3901[1] }
        vif     = { defs={} expr=v3902[1] }
        vip     = { defs={} expr=v3903[1] }
        id      = { defs={} expr=v3904[1] }
        ?22     = { defs={} expr=v3905[1] }
        ?23     = { defs={} expr=v3906[1] }
        ?24     = { defs={} expr=v3907[1] }
        ?25     = { defs={} expr=v3908[1] }
        ?26     = { defs={} expr=v3909[1] }
        ?27     = { defs={} expr=v3910[1] }
        ?28     = { defs={} expr=v3911[1] }
        ?29     = { defs={} expr=v3912[1] }
        ?30     = { defs={} expr=v3913[1] }
        ?31     = { defs={} expr=v3914[1] }
        ip      = { defs={0x0804842e} expr=0x08048430[32] }
    memory:
    init mem:
0x8048430:xor    eax, eax
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3870[32] }
        dx      = { defs={} expr=v3871[32] }
        bx      = { defs={} expr=v3872[32] }
        sp      = { defs={0x0804842e} expr=v3874[32] }
        bp      = { defs={} expr=v3874[32] }
        si      = { defs={} expr=v3875[32] }
        di      = { defs={} expr=v3876[32] }
        es      = { defs={} expr=v3877[16] }
        cs      = { defs={} expr=v3878[16] }
        ss      = { defs={} expr=v3879[16] }
        ds      = { defs={} expr=v3880[16] }
        fs      = { defs={} expr=v3881[16] }
        gs      = { defs={} expr=v3882[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3884[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3886[1] }
        af      = { defs={0x08048430} expr=v3953[1] }
        ?5      = { defs={} expr=v3888[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3891[1] }
        if      = { defs={} expr=v3892[1] }
        df      = { defs={} expr=v3893[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3895[1] }
        iopl1   = { defs={} expr=v3896[1] }
        nt      = { defs={} expr=v3897[1] }
        ?15     = { defs={} expr=v3898[1] }
        rf      = { defs={} expr=v3899[1] }
        vm      = { defs={} expr=v3900[1] }
        ac      = { defs={} expr=v3901[1] }
        vif     = { defs={} expr=v3902[1] }
        vip     = { defs={} expr=v3903[1] }
        id      = { defs={} expr=v3904[1] }
        ?22     = { defs={} expr=v3905[1] }
        ?23     = { defs={} expr=v3906[1] }
        ?24     = { defs={} expr=v3907[1] }
        ?25     = { defs={} expr=v3908[1] }
        ?26     = { defs={} expr=v3909[1] }
        ?27     = { defs={} expr=v3910[1] }
        ?28     = { defs={} expr=v3911[1] }
        ?29     = { defs={} expr=v3912[1] }
        ?30     = { defs={} expr=v3913[1] }
        ?31     = { defs={} expr=v3914[1] }
        ip      = { defs={0x0804842e,0x08048430} expr=0x08048432[32] }
    memory:
    init mem:
0x8048432:pop    ebp
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3870[32] }
        dx      = { defs={} expr=v3871[32] }
        bx      = { defs={} expr=v3872[32] }
        sp      = { defs={0x0804842e,0x08048432} expr=(add[32] v3874[32] 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3964[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3965[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3966[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3967[8]))) }
        si      = { defs={} expr=v3875[32] }
        di      = { defs={} expr=v3876[32] }
        es      = { defs={} expr=v3877[16] }
        cs      = { defs={} expr=v3878[16] }
        ss      = { defs={} expr=v3879[16] }
        ds      = { defs={} expr=v3880[16] }
        fs      = { defs={} expr=v3881[16] }
        gs      = { defs={} expr=v3882[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3884[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3886[1] }
        af      = { defs={0x08048430} expr=v3953[1] }
        ?5      = { defs={} expr=v3888[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3891[1] }
        if      = { defs={} expr=v3892[1] }
        df      = { defs={} expr=v3893[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3895[1] }
        iopl1   = { defs={} expr=v3896[1] }
        nt      = { defs={} expr=v3897[1] }
        ?15     = { defs={} expr=v3898[1] }
        rf      = { defs={} expr=v3899[1] }
        vm      = { defs={} expr=v3900[1] }
        ac      = { defs={} expr=v3901[1] }
        vif     = { defs={} expr=v3902[1] }
        vip     = { defs={} expr=v3903[1] }
        id      = { defs={} expr=v3904[1] }
        ?22     = { defs={} expr=v3905[1] }
        ?23     = { defs={} expr=v3906[1] }
        ?24     = { defs={} expr=v3907[1] }
        ?25     = { defs={} expr=v3908[1] }
        ?26     = { defs={} expr=v3909[1] }
        ?27     = { defs={} expr=v3910[1] }
        ?28     = { defs={} expr=v3911[1] }
        ?29     = { defs={} expr=v3912[1] }
        ?30     = { defs={} expr=v3913[1] }
        ?31     = { defs={} expr=v3914[1] }
        ip      = { defs={0x0804842e,0x08048430,0x08048432} expr=0x08048433[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3874[32] 3[32]) }
          value = { defs={} expr=v3967[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3874[32] 2[32]) }
          value = { defs={} expr=v3966[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3874[32] 1[32]) }
          value = { defs={} expr=v3965[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432} expr=v3874[32] }
          value = { defs={} expr=v3964[8] }
          flags = { rdonly }
0x8048433:ret    
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3870[32] }
        dx      = { defs={} expr=v3871[32] }
        bx      = { defs={} expr=v3872[32] }
        sp      = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] (add[32] v3874[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3964[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3965[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3966[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3967[8]))) }
        si      = { defs={} expr=v3875[32] }
        di      = { defs={} expr=v3876[32] }
        es      = { defs={} expr=v3877[16] }
        cs      = { defs={} expr=v3878[16] }
        ss      = { defs={} expr=v3879[16] }
        ds      = { defs={} expr=v3880[16] }
        fs      = { defs={} expr=v3881[16] }
        gs      = { defs={} expr=v3882[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3884[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3886[1] }
        af      = { defs={0x08048430} expr=v3953[1] }
        ?5      = { defs={} expr=v3888[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3891[1] }
        if      = { defs={} expr=v3892[1] }
        df      = { defs={} expr=v3893[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3895[1] }
        iopl1   = { defs={} expr=v3896[1] }
        nt      = { defs={} expr=v3897[1] }
        ?15     = { defs={} expr=v3898[1] }
        rf      = { defs={} expr=v3899[1] }
        vm      = { defs={} expr=v3900[1] }
        ac      = { defs={} expr=v3901[1] }
        vif     = { defs={} expr=v3902[1] }
        vip     = { defs={} expr=v3903[1] }
        id      = { defs={} expr=v3904[1] }
        ?22     = { defs={} expr=v3905[1] }
        ?23     = { defs={} expr=v3906[1] }
        ?24     = { defs={} expr=v3907[1] }
        ?25     = { defs={} expr=v3908[1] }
        ?26     = { defs={} expr=v3909[1] }
        ?27     = { defs={} expr=v3910[1] }
        ?28     = { defs={} expr=v3911[1] }
        ?29     = { defs={} expr=v3912[1] }
        ?30     = { defs={} expr=v3913[1] }
        ?31     = { defs={} expr=v3914[1] }
        ip      = { defs={0x08048433} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3981[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3982[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3983[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3984[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3874[32] 4[32]) 3[32]) }
          value = { defs={} expr=v3984[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3874[32] 4[32]) 2[32]) }
          value = { defs={} expr=v3983[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3874[32] 4[32]) 1[32]) }
          value = { defs={} expr=v3982[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] v3874[32] 4[32]) }
          value = { defs={} expr=v3981[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3874[32] 3[32]) }
          value = { defs={} expr=v3967[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3874[32] 2[32]) }
          value = { defs={} expr=v3966[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3874[32] 1[32]) }
          value = { defs={} expr=v3965[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432} expr=v3874[32] }
          value = { defs={} expr=v3964[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048440:push   ebp
    registers:
        ax      = { defs={} expr=v4039[32] }
        cx      = { defs={} expr=v4040[32] }
        dx      = { defs={} expr=v4041[32] }
        bx      = { defs={} expr=v4042[32] }
        sp      = { defs={0x08048440} expr=(add[32] v4043[32] -4[32]) }
        bp      = { defs={} expr=v4044[32] }
        si      = { defs={} expr=v4045[32] }
        di      = { defs={} expr=v4046[32] }
        es      = { defs={} expr=v4047[16] }
        cs      = { defs={} expr=v4048[16] }
        ss      = { defs={} expr=v4049[16] }
        ds      = { defs={} expr=v4050[16] }
        fs      = { defs={} expr=v4051[16] }
        gs      = { defs={} expr=v4052[16] }
        cf      = { defs={} expr=v4053[1] }
        ?1      = { defs={} expr=v4054[1] }
        pf      = { defs={} expr=v4055[1] }
        ?3      = { defs={} expr=v4056[1] }
        af      = { defs={} expr=v4057[1] }
        ?5      = { defs={} expr=v4058[1] }
        zf      = { defs={} expr=v4059[1] }
        sf      = { defs={} expr=v4060[1] }
        tf      = { defs={} expr=v4061[1] }
        if      = { defs={} expr=v4062[1] }
        df      = { defs={} expr=v4063[1] }
        of      = { defs={} expr=v4064[1] }
        iopl0   = { defs={} expr=v4065[1] }
        iopl1   = { defs={} expr=v4066[1] }
        nt      = { defs={} expr=v4067[1] }
        ?15     = { defs={} expr=v4068[1] }
        rf      = { defs={} expr=v4069[1] }
        vm      = { defs={} expr=v4070[1] }
        ac      = { defs={} expr=v4071[1] }
        vif     = { defs={} expr=v4072[1] }
        vip     = { defs={} expr=v4073[1] }
        id      = { defs={} expr=v4074[1] }
        ?22     = { defs={} expr=v4075[1] }
        ?23     = { defs={} expr=v4076[1] }
        ?24     = { defs={} expr=v4077[1] }
        ?25     = { defs={} expr=v4078[1] }
        ?26     = { defs={} expr=v4079[1] }
        ?27     = { defs={} expr=v4080[1] }
        ?28     = { defs={} expr=v4081[1] }
        ?29     = { defs={} expr=v4082[1] }
        ?30     = { defs={} expr=v4083[1] }
        ?31     = { defs={} expr=v4084[1] }
        ip      = { defs={0x08048440} expr=0x08048441[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 3[32]) }
          value = { defs={0x08048440} expr=(extract[8] 24[32] 32[32] v4044[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 2[32]) }
          value = { defs={0x08048440} expr=(extract[8] 16[32] 24[32] v4044[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 1[32]) }
          value = { defs={0x08048440} expr=(extract[8] 8[32] 16[32] v4044[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v4043[32] -4[32]) }
          value = { defs={0x08048440} expr=(extract[8] 0[32] 8[32] v4044[32]) }
          flags = { }
    init mem:
0x8048441:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4039[32] }
        cx      = { defs={} expr=v4040[32] }
        dx      = { defs={} expr=v4041[32] }
        bx      = { defs={} expr=v4042[32] }
        sp      = { defs={0x08048440} expr=(add[32] v4043[32] -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v4043[32] -4[32]) }
        si      = { defs={} expr=v4045[32] }
        di      = { defs={} expr=v4046[32] }
        es      = { defs={} expr=v4047[16] }
        cs      = { defs={} expr=v4048[16] }
        ss      = { defs={} expr=v4049[16] }
        ds      = { defs={} expr=v4050[16] }
        fs      = { defs={} expr=v4051[16] }
        gs      = { defs={} expr=v4052[16] }
        cf      = { defs={} expr=v4053[1] }
        ?1      = { defs={} expr=v4054[1] }
        pf      = { defs={} expr=v4055[1] }
        ?3      = { defs={} expr=v4056[1] }
        af      = { defs={} expr=v4057[1] }
        ?5      = { defs={} expr=v4058[1] }
        zf      = { defs={} expr=v4059[1] }
        sf      = { defs={} expr=v4060[1] }
        tf      = { defs={} expr=v4061[1] }
        if      = { defs={} expr=v4062[1] }
        df      = { defs={} expr=v4063[1] }
        of      = { defs={} expr=v4064[1] }
        iopl0   = { defs={} expr=v4065[1] }
        iopl1   = { defs={} expr=v4066[1] }
        nt      = { defs={} expr=v4067[1] }
        ?15     = { defs={} expr=v4068[1] }
        rf      = { defs={} expr=v4069[1] }
        vm      = { defs={} expr=v4070[1] }
        ac      = { defs={} expr=v4071[1] }
        vif     = { defs={} expr=v4072[1] }
        vip     = { defs={} expr=v4073[1] }
        id      = { defs={} expr=v4074[1] }
        ?22     = { defs={} expr=v4075[1] }
        ?23     = { defs={} expr=v4076[1] }
        ?24     = { defs={} expr=v4077[1] }
        ?25     = { defs={} expr=v4078[1] }
        ?26     = { defs={} expr=v4079[1] }
        ?27     = { defs={} expr=v4080[1] }
        ?28     = { defs={} expr=v4081[1] }
        ?29     = { defs={} expr=v4082[1] }
        ?30     = { defs={} expr=v4083[1] }
        ?31     = { defs={} expr=v4084[1] }
        ip      = { defs={0x08048440,0x08048441} expr=0x08048443[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 3[32]) }
          value = { defs={0x08048440} expr=(extract[8] 24[32] 32[32] v4044[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 2[32]) }
          value = { defs={0x08048440} expr=(extract[8] 16[32] 24[32] v4044[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 1[32]) }
          value = { defs={0x08048440} expr=(extract[8] 8[32] 16[32] v4044[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v4043[32] -4[32]) }
          value = { defs={0x08048440} expr=(extract[8] 0[32] 8[32] v4044[32]) }
          flags = { }
    init mem:
0x8048443:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v4039[32] }
        cx      = { defs={} expr=v4040[32] }
        dx      = { defs={} expr=v4041[32] }
        bx      = { defs={} expr=v4042[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v4043[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v4043[32] -4[32]) }
        si      = { defs={} expr=v4045[32] }
        di      = { defs={} expr=v4046[32] }
        es      = { defs={} expr=v4047[16] }
        cs      = { defs={} expr=v4048[16] }
        ss      = { defs={} expr=v4049[16] }
        ds      = { defs={} expr=v4050[16] }
        fs      = { defs={} expr=v4051[16] }
        gs      = { defs={} expr=v4052[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4054[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4056[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4058[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v4043[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4043[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4061[1] }
        if      = { defs={} expr=v4062[1] }
        df      = { defs={} expr=v4063[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4065[1] }
        iopl1   = { defs={} expr=v4066[1] }
        nt      = { defs={} expr=v4067[1] }
        ?15     = { defs={} expr=v4068[1] }
        rf      = { defs={} expr=v4069[1] }
        vm      = { defs={} expr=v4070[1] }
        ac      = { defs={} expr=v4071[1] }
        vif     = { defs={} expr=v4072[1] }
        vip     = { defs={} expr=v4073[1] }
        id      = { defs={} expr=v4074[1] }
        ?22     = { defs={} expr=v4075[1] }
        ?23     = { defs={} expr=v4076[1] }
        ?24     = { defs={} expr=v4077[1] }
        ?25     = { defs={} expr=v4078[1] }
        ?26     = { defs={} expr=v4079[1] }
        ?27     = { defs={} expr=v4080[1] }
        ?28     = { defs={} expr=v4081[1] }
        ?29     = { defs={} expr=v4082[1] }
        ?30     = { defs={} expr=v4083[1] }
        ?31     = { defs={} expr=v4084[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443} expr=0x08048446[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 3[32]) }
          value = { defs={0x08048440} expr=(extract[8] 24[32] 32[32] v4044[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 2[32]) }
          value = { defs={0x08048440} expr=(extract[8] 16[32] 24[32] v4044[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 1[32]) }
          value = { defs={0x08048440} expr=(extract[8] 8[32] 16[32] v4044[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v4043[32] -4[32]) }
          value = { defs={0x08048440} expr=(extract[8] 0[32] 8[32] v4044[32]) }
          flags = { }
    init mem:
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v4039[32] }
        cx      = { defs={} expr=v4040[32] }
        dx      = { defs={} expr=v4041[32] }
        bx      = { defs={} expr=v4042[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v4043[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v4043[32] -4[32]) }
        si      = { defs={} expr=v4045[32] }
        di      = { defs={} expr=v4046[32] }
        es      = { defs={} expr=v4047[16] }
        cs      = { defs={} expr=v4048[16] }
        ss      = { defs={} expr=v4049[16] }
        ds      = { defs={} expr=v4050[16] }
        fs      = { defs={} expr=v4051[16] }
        gs      = { defs={} expr=v4052[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4054[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4056[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4058[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v4043[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4043[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4061[1] }
        if      = { defs={} expr=v4062[1] }
        df      = { defs={} expr=v4063[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4065[1] }
        iopl1   = { defs={} expr=v4066[1] }
        nt      = { defs={} expr=v4067[1] }
        ?15     = { defs={} expr=v4068[1] }
        rf      = { defs={} expr=v4069[1] }
        vm      = { defs={} expr=v4070[1] }
        ac      = { defs={} expr=v4071[1] }
        vif     = { defs={} expr=v4072[1] }
        vip     = { defs={} expr=v4073[1] }
        id      = { defs={} expr=v4074[1] }
        ?22     = { defs={} expr=v4075[1] }
        ?23     = { defs={} expr=v4076[1] }
        ?24     = { defs={} expr=v4077[1] }
        ?25     = { defs={} expr=v4078[1] }
        ?26     = { defs={} expr=v4079[1] }
        ?27     = { defs={} expr=v4080[1] }
        ?28     = { defs={} expr=v4081[1] }
        ?29     = { defs={} expr=v4082[1] }
        ?30     = { defs={} expr=v4083[1] }
        ?31     = { defs={} expr=v4084[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443,0x08048446} expr=0x0804844d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x08048446} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x08048446} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x08048446} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x08048446} expr=(add[32] (add[32] v4043[32] -4[32]) -8[32]) }
          value = { defs={0x08048446} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 3[32]) }
          value = { defs={0x08048440} expr=(extract[8] 24[32] 32[32] v4044[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 2[32]) }
          value = { defs={0x08048440} expr=(extract[8] 16[32] 24[32] v4044[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 1[32]) }
          value = { defs={0x08048440} expr=(extract[8] 8[32] 16[32] v4044[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v4043[32] -4[32]) }
          value = { defs={0x08048440} expr=(extract[8] 0[32] 8[32] v4044[32]) }
          flags = { }
    init mem:
0x804844d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v4039[32] }
        cx      = { defs={} expr=v4040[32] }
        dx      = { defs={} expr=v4041[32] }
        bx      = { defs={} expr=v4042[32] }
        sp      = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v4043[32] -4[32]) }
        si      = { defs={} expr=v4045[32] }
        di      = { defs={} expr=v4046[32] }
        es      = { defs={} expr=v4047[16] }
        cs      = { defs={} expr=v4048[16] }
        ss      = { defs={} expr=v4049[16] }
        ds      = { defs={} expr=v4050[16] }
        fs      = { defs={} expr=v4051[16] }
        gs      = { defs={} expr=v4052[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4054[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4056[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4058[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v4043[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4043[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4061[1] }
        if      = { defs={} expr=v4062[1] }
        df      = { defs={} expr=v4063[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4043[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4065[1] }
        iopl1   = { defs={} expr=v4066[1] }
        nt      = { defs={} expr=v4067[1] }
        ?15     = { defs={} expr=v4068[1] }
        rf      = { defs={} expr=v4069[1] }
        vm      = { defs={} expr=v4070[1] }
        ac      = { defs={} expr=v4071[1] }
        vif     = { defs={} expr=v4072[1] }
        vip     = { defs={} expr=v4073[1] }
        id      = { defs={} expr=v4074[1] }
        ?22     = { defs={} expr=v4075[1] }
        ?23     = { defs={} expr=v4076[1] }
        ?24     = { defs={} expr=v4077[1] }
        ?25     = { defs={} expr=v4078[1] }
        ?26     = { defs={} expr=v4079[1] }
        ?27     = { defs={} expr=v4080[1] }
        ?28     = { defs={} expr=v4081[1] }
        ?29     = { defs={} expr=v4082[1] }
        ?30     = { defs={} expr=v4083[1] }
        ?31     = { defs={} expr=v4084[1] }
        ip      = { defs={0x0804844d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={0x08048440,0x08048441,0x08048443,0x08048446,0x0804844d} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={0x08048440,0x08048441,0x08048443,0x08048446,0x0804844d} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={0x08048440,0x08048441,0x08048443,0x08048446,0x0804844d} expr=-124[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={0x08048440,0x08048441,0x08048443,0x08048446,0x0804844d} expr=82[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x08048446} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x08048446} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4043[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x08048446} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x08048446} expr=(add[32] (add[32] v4043[32] -4[32]) -8[32]) }
          value = { defs={0x08048446} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 3[32]) }
          value = { defs={0x08048440} expr=(extract[8] 24[32] 32[32] v4044[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 2[32]) }
          value = { defs={0x08048440} expr=(extract[8] 16[32] 24[32] v4044[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4043[32] -4[32]) 1[32]) }
          value = { defs={0x08048440} expr=(extract[8] 8[32] 16[32] v4044[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v4043[32] -4[32]) }
          value = { defs={0x08048440} expr=(extract[8] 0[32] 8[32] v4044[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048452:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v4222[32] }
        cx      = { defs={} expr=v4223[32] }
        dx      = { defs={} expr=v4224[32] }
        bx      = { defs={} expr=v4225[32] }
        sp      = { defs={0x08048452} expr=v4227[32] }
        bp      = { defs={} expr=v4227[32] }
        si      = { defs={} expr=v4228[32] }
        di      = { defs={} expr=v4229[32] }
        es      = { defs={} expr=v4230[16] }
        cs      = { defs={} expr=v4231[16] }
        ss      = { defs={} expr=v4232[16] }
        ds      = { defs={} expr=v4233[16] }
        fs      = { defs={} expr=v4234[16] }
        gs      = { defs={} expr=v4235[16] }
        cf      = { defs={} expr=v4236[1] }
        ?1      = { defs={} expr=v4237[1] }
        pf      = { defs={} expr=v4238[1] }
        ?3      = { defs={} expr=v4239[1] }
        af      = { defs={} expr=v4240[1] }
        ?5      = { defs={} expr=v4241[1] }
        zf      = { defs={} expr=v4242[1] }
        sf      = { defs={} expr=v4243[1] }
        tf      = { defs={} expr=v4244[1] }
        if      = { defs={} expr=v4245[1] }
        df      = { defs={} expr=v4246[1] }
        of      = { defs={} expr=v4247[1] }
        iopl0   = { defs={} expr=v4248[1] }
        iopl1   = { defs={} expr=v4249[1] }
        nt      = { defs={} expr=v4250[1] }
        ?15     = { defs={} expr=v4251[1] }
        rf      = { defs={} expr=v4252[1] }
        vm      = { defs={} expr=v4253[1] }
        ac      = { defs={} expr=v4254[1] }
        vif     = { defs={} expr=v4255[1] }
        vip     = { defs={} expr=v4256[1] }
        id      = { defs={} expr=v4257[1] }
        ?22     = { defs={} expr=v4258[1] }
        ?23     = { defs={} expr=v4259[1] }
        ?24     = { defs={} expr=v4260[1] }
        ?25     = { defs={} expr=v4261[1] }
        ?26     = { defs={} expr=v4262[1] }
        ?27     = { defs={} expr=v4263[1] }
        ?28     = { defs={} expr=v4264[1] }
        ?29     = { defs={} expr=v4265[1] }
        ?30     = { defs={} expr=v4266[1] }
        ?31     = { defs={} expr=v4267[1] }
        ip      = { defs={0x08048452} expr=0x08048454[32] }
    memory:
    init mem:
0x8048454:pop    ebp
    registers:
        ax      = { defs={} expr=v4222[32] }
        cx      = { defs={} expr=v4223[32] }
        dx      = { defs={} expr=v4224[32] }
        bx      = { defs={} expr=v4225[32] }
        sp      = { defs={0x08048452,0x08048454} expr=(add[32] v4227[32] 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4282[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4283[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4284[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4285[8]))) }
        si      = { defs={} expr=v4228[32] }
        di      = { defs={} expr=v4229[32] }
        es      = { defs={} expr=v4230[16] }
        cs      = { defs={} expr=v4231[16] }
        ss      = { defs={} expr=v4232[16] }
        ds      = { defs={} expr=v4233[16] }
        fs      = { defs={} expr=v4234[16] }
        gs      = { defs={} expr=v4235[16] }
        cf      = { defs={} expr=v4236[1] }
        ?1      = { defs={} expr=v4237[1] }
        pf      = { defs={} expr=v4238[1] }
        ?3      = { defs={} expr=v4239[1] }
        af      = { defs={} expr=v4240[1] }
        ?5      = { defs={} expr=v4241[1] }
        zf      = { defs={} expr=v4242[1] }
        sf      = { defs={} expr=v4243[1] }
        tf      = { defs={} expr=v4244[1] }
        if      = { defs={} expr=v4245[1] }
        df      = { defs={} expr=v4246[1] }
        of      = { defs={} expr=v4247[1] }
        iopl0   = { defs={} expr=v4248[1] }
        iopl1   = { defs={} expr=v4249[1] }
        nt      = { defs={} expr=v4250[1] }
        ?15     = { defs={} expr=v4251[1] }
        rf      = { defs={} expr=v4252[1] }
        vm      = { defs={} expr=v4253[1] }
        ac      = { defs={} expr=v4254[1] }
        vif     = { defs={} expr=v4255[1] }
        vip     = { defs={} expr=v4256[1] }
        id      = { defs={} expr=v4257[1] }
        ?22     = { defs={} expr=v4258[1] }
        ?23     = { defs={} expr=v4259[1] }
        ?24     = { defs={} expr=v4260[1] }
        ?25     = { defs={} expr=v4261[1] }
        ?26     = { defs={} expr=v4262[1] }
        ?27     = { defs={} expr=v4263[1] }
        ?28     = { defs={} expr=v4264[1] }
        ?29     = { defs={} expr=v4265[1] }
        ?30     = { defs={} expr=v4266[1] }
        ?31     = { defs={} expr=v4267[1] }
        ip      = { defs={0x08048452,0x08048454} expr=0x08048455[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4227[32] 3[32]) }
          value = { defs={} expr=v4285[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4227[32] 2[32]) }
          value = { defs={} expr=v4284[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4227[32] 1[32]) }
          value = { defs={} expr=v4283[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454} expr=v4227[32] }
          value = { defs={} expr=v4282[8] }
          flags = { rdonly }
0x8048455:ret    
    registers:
        ax      = { defs={} expr=v4222[32] }
        cx      = { defs={} expr=v4223[32] }
        dx      = { defs={} expr=v4224[32] }
        bx      = { defs={} expr=v4225[32] }
        sp      = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] (add[32] v4227[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4282[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4283[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4284[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4285[8]))) }
        si      = { defs={} expr=v4228[32] }
        di      = { defs={} expr=v4229[32] }
        es      = { defs={} expr=v4230[16] }
        cs      = { defs={} expr=v4231[16] }
        ss      = { defs={} expr=v4232[16] }
        ds      = { defs={} expr=v4233[16] }
        fs      = { defs={} expr=v4234[16] }
        gs      = { defs={} expr=v4235[16] }
        cf      = { defs={} expr=v4236[1] }
        ?1      = { defs={} expr=v4237[1] }
        pf      = { defs={} expr=v4238[1] }
        ?3      = { defs={} expr=v4239[1] }
        af      = { defs={} expr=v4240[1] }
        ?5      = { defs={} expr=v4241[1] }
        zf      = { defs={} expr=v4242[1] }
        sf      = { defs={} expr=v4243[1] }
        tf      = { defs={} expr=v4244[1] }
        if      = { defs={} expr=v4245[1] }
        df      = { defs={} expr=v4246[1] }
        of      = { defs={} expr=v4247[1] }
        iopl0   = { defs={} expr=v4248[1] }
        iopl1   = { defs={} expr=v4249[1] }
        nt      = { defs={} expr=v4250[1] }
        ?15     = { defs={} expr=v4251[1] }
        rf      = { defs={} expr=v4252[1] }
        vm      = { defs={} expr=v4253[1] }
        ac      = { defs={} expr=v4254[1] }
        vif     = { defs={} expr=v4255[1] }
        vip     = { defs={} expr=v4256[1] }
        id      = { defs={} expr=v4257[1] }
        ?22     = { defs={} expr=v4258[1] }
        ?23     = { defs={} expr=v4259[1] }
        ?24     = { defs={} expr=v4260[1] }
        ?25     = { defs={} expr=v4261[1] }
        ?26     = { defs={} expr=v4262[1] }
        ?27     = { defs={} expr=v4263[1] }
        ?28     = { defs={} expr=v4264[1] }
        ?29     = { defs={} expr=v4265[1] }
        ?30     = { defs={} expr=v4266[1] }
        ?31     = { defs={} expr=v4267[1] }
        ip      = { defs={0x08048455} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4299[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4300[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4301[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4302[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4227[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4302[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4227[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4301[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4227[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4300[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] v4227[32] 4[32]) }
          value = { defs={} expr=v4299[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4227[32] 3[32]) }
          value = { defs={} expr=v4285[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4227[32] 2[32]) }
          value = { defs={} expr=v4284[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4227[32] 1[32]) }
          value = { defs={} expr=v4283[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454} expr=v4227[32] }
          value = { defs={} expr=v4282[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048460:push   ebp
    registers:
        ax      = { defs={} expr=v4357[32] }
        cx      = { defs={} expr=v4358[32] }
        dx      = { defs={} expr=v4359[32] }
        bx      = { defs={} expr=v4360[32] }
        sp      = { defs={0x08048460} expr=(add[32] v4361[32] -4[32]) }
        bp      = { defs={} expr=v4362[32] }
        si      = { defs={} expr=v4363[32] }
        di      = { defs={} expr=v4364[32] }
        es      = { defs={} expr=v4365[16] }
        cs      = { defs={} expr=v4366[16] }
        ss      = { defs={} expr=v4367[16] }
        ds      = { defs={} expr=v4368[16] }
        fs      = { defs={} expr=v4369[16] }
        gs      = { defs={} expr=v4370[16] }
        cf      = { defs={} expr=v4371[1] }
        ?1      = { defs={} expr=v4372[1] }
        pf      = { defs={} expr=v4373[1] }
        ?3      = { defs={} expr=v4374[1] }
        af      = { defs={} expr=v4375[1] }
        ?5      = { defs={} expr=v4376[1] }
        zf      = { defs={} expr=v4377[1] }
        sf      = { defs={} expr=v4378[1] }
        tf      = { defs={} expr=v4379[1] }
        if      = { defs={} expr=v4380[1] }
        df      = { defs={} expr=v4381[1] }
        of      = { defs={} expr=v4382[1] }
        iopl0   = { defs={} expr=v4383[1] }
        iopl1   = { defs={} expr=v4384[1] }
        nt      = { defs={} expr=v4385[1] }
        ?15     = { defs={} expr=v4386[1] }
        rf      = { defs={} expr=v4387[1] }
        vm      = { defs={} expr=v4388[1] }
        ac      = { defs={} expr=v4389[1] }
        vif     = { defs={} expr=v4390[1] }
        vip     = { defs={} expr=v4391[1] }
        id      = { defs={} expr=v4392[1] }
        ?22     = { defs={} expr=v4393[1] }
        ?23     = { defs={} expr=v4394[1] }
        ?24     = { defs={} expr=v4395[1] }
        ?25     = { defs={} expr=v4396[1] }
        ?26     = { defs={} expr=v4397[1] }
        ?27     = { defs={} expr=v4398[1] }
        ?28     = { defs={} expr=v4399[1] }
        ?29     = { defs={} expr=v4400[1] }
        ?30     = { defs={} expr=v4401[1] }
        ?31     = { defs={} expr=v4402[1] }
        ip      = { defs={0x08048460} expr=0x08048461[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 3[32]) }
          value = { defs={0x08048460} expr=(extract[8] 24[32] 32[32] v4362[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 2[32]) }
          value = { defs={0x08048460} expr=(extract[8] 16[32] 24[32] v4362[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 1[32]) }
          value = { defs={0x08048460} expr=(extract[8] 8[32] 16[32] v4362[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4361[32] -4[32]) }
          value = { defs={0x08048460} expr=(extract[8] 0[32] 8[32] v4362[32]) }
          flags = { }
    init mem:
0x8048461:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4357[32] }
        cx      = { defs={} expr=v4358[32] }
        dx      = { defs={} expr=v4359[32] }
        bx      = { defs={} expr=v4360[32] }
        sp      = { defs={0x08048460} expr=(add[32] v4361[32] -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4361[32] -4[32]) }
        si      = { defs={} expr=v4363[32] }
        di      = { defs={} expr=v4364[32] }
        es      = { defs={} expr=v4365[16] }
        cs      = { defs={} expr=v4366[16] }
        ss      = { defs={} expr=v4367[16] }
        ds      = { defs={} expr=v4368[16] }
        fs      = { defs={} expr=v4369[16] }
        gs      = { defs={} expr=v4370[16] }
        cf      = { defs={} expr=v4371[1] }
        ?1      = { defs={} expr=v4372[1] }
        pf      = { defs={} expr=v4373[1] }
        ?3      = { defs={} expr=v4374[1] }
        af      = { defs={} expr=v4375[1] }
        ?5      = { defs={} expr=v4376[1] }
        zf      = { defs={} expr=v4377[1] }
        sf      = { defs={} expr=v4378[1] }
        tf      = { defs={} expr=v4379[1] }
        if      = { defs={} expr=v4380[1] }
        df      = { defs={} expr=v4381[1] }
        of      = { defs={} expr=v4382[1] }
        iopl0   = { defs={} expr=v4383[1] }
        iopl1   = { defs={} expr=v4384[1] }
        nt      = { defs={} expr=v4385[1] }
        ?15     = { defs={} expr=v4386[1] }
        rf      = { defs={} expr=v4387[1] }
        vm      = { defs={} expr=v4388[1] }
        ac      = { defs={} expr=v4389[1] }
        vif     = { defs={} expr=v4390[1] }
        vip     = { defs={} expr=v4391[1] }
        id      = { defs={} expr=v4392[1] }
        ?22     = { defs={} expr=v4393[1] }
        ?23     = { defs={} expr=v4394[1] }
        ?24     = { defs={} expr=v4395[1] }
        ?25     = { defs={} expr=v4396[1] }
        ?26     = { defs={} expr=v4397[1] }
        ?27     = { defs={} expr=v4398[1] }
        ?28     = { defs={} expr=v4399[1] }
        ?29     = { defs={} expr=v4400[1] }
        ?30     = { defs={} expr=v4401[1] }
        ?31     = { defs={} expr=v4402[1] }
        ip      = { defs={0x08048460,0x08048461} expr=0x08048463[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 3[32]) }
          value = { defs={0x08048460} expr=(extract[8] 24[32] 32[32] v4362[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 2[32]) }
          value = { defs={0x08048460} expr=(extract[8] 16[32] 24[32] v4362[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 1[32]) }
          value = { defs={0x08048460} expr=(extract[8] 8[32] 16[32] v4362[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4361[32] -4[32]) }
          value = { defs={0x08048460} expr=(extract[8] 0[32] 8[32] v4362[32]) }
          flags = { }
    init mem:
0x8048463:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v4357[32] }
        cx      = { defs={} expr=v4358[32] }
        dx      = { defs={} expr=v4359[32] }
        bx      = { defs={} expr=v4360[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4361[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4361[32] -4[32]) }
        si      = { defs={} expr=v4363[32] }
        di      = { defs={} expr=v4364[32] }
        es      = { defs={} expr=v4365[16] }
        cs      = { defs={} expr=v4366[16] }
        ss      = { defs={} expr=v4367[16] }
        ds      = { defs={} expr=v4368[16] }
        fs      = { defs={} expr=v4369[16] }
        gs      = { defs={} expr=v4370[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4372[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4374[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4376[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4361[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4361[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4379[1] }
        if      = { defs={} expr=v4380[1] }
        df      = { defs={} expr=v4381[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4383[1] }
        iopl1   = { defs={} expr=v4384[1] }
        nt      = { defs={} expr=v4385[1] }
        ?15     = { defs={} expr=v4386[1] }
        rf      = { defs={} expr=v4387[1] }
        vm      = { defs={} expr=v4388[1] }
        ac      = { defs={} expr=v4389[1] }
        vif     = { defs={} expr=v4390[1] }
        vip     = { defs={} expr=v4391[1] }
        id      = { defs={} expr=v4392[1] }
        ?22     = { defs={} expr=v4393[1] }
        ?23     = { defs={} expr=v4394[1] }
        ?24     = { defs={} expr=v4395[1] }
        ?25     = { defs={} expr=v4396[1] }
        ?26     = { defs={} expr=v4397[1] }
        ?27     = { defs={} expr=v4398[1] }
        ?28     = { defs={} expr=v4399[1] }
        ?29     = { defs={} expr=v4400[1] }
        ?30     = { defs={} expr=v4401[1] }
        ?31     = { defs={} expr=v4402[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463} expr=0x08048466[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 3[32]) }
          value = { defs={0x08048460} expr=(extract[8] 24[32] 32[32] v4362[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 2[32]) }
          value = { defs={0x08048460} expr=(extract[8] 16[32] 24[32] v4362[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 1[32]) }
          value = { defs={0x08048460} expr=(extract[8] 8[32] 16[32] v4362[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4361[32] -4[32]) }
          value = { defs={0x08048460} expr=(extract[8] 0[32] 8[32] v4362[32]) }
          flags = { }
    init mem:
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v4357[32] }
        cx      = { defs={} expr=v4358[32] }
        dx      = { defs={} expr=v4359[32] }
        bx      = { defs={} expr=v4360[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4361[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4361[32] -4[32]) }
        si      = { defs={} expr=v4363[32] }
        di      = { defs={} expr=v4364[32] }
        es      = { defs={} expr=v4365[16] }
        cs      = { defs={} expr=v4366[16] }
        ss      = { defs={} expr=v4367[16] }
        ds      = { defs={} expr=v4368[16] }
        fs      = { defs={} expr=v4369[16] }
        gs      = { defs={} expr=v4370[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4372[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4374[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4376[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4361[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4361[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4379[1] }
        if      = { defs={} expr=v4380[1] }
        df      = { defs={} expr=v4381[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4383[1] }
        iopl1   = { defs={} expr=v4384[1] }
        nt      = { defs={} expr=v4385[1] }
        ?15     = { defs={} expr=v4386[1] }
        rf      = { defs={} expr=v4387[1] }
        vm      = { defs={} expr=v4388[1] }
        ac      = { defs={} expr=v4389[1] }
        vif     = { defs={} expr=v4390[1] }
        vip     = { defs={} expr=v4391[1] }
        id      = { defs={} expr=v4392[1] }
        ?22     = { defs={} expr=v4393[1] }
        ?23     = { defs={} expr=v4394[1] }
        ?24     = { defs={} expr=v4395[1] }
        ?25     = { defs={} expr=v4396[1] }
        ?26     = { defs={} expr=v4397[1] }
        ?27     = { defs={} expr=v4398[1] }
        ?28     = { defs={} expr=v4399[1] }
        ?29     = { defs={} expr=v4400[1] }
        ?30     = { defs={} expr=v4401[1] }
        ?31     = { defs={} expr=v4402[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463,0x08048466} expr=0x0804846d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x08048466} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x08048466} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x08048466} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x08048466} expr=(add[32] (add[32] v4361[32] -4[32]) -8[32]) }
          value = { defs={0x08048466} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 3[32]) }
          value = { defs={0x08048460} expr=(extract[8] 24[32] 32[32] v4362[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 2[32]) }
          value = { defs={0x08048460} expr=(extract[8] 16[32] 24[32] v4362[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 1[32]) }
          value = { defs={0x08048460} expr=(extract[8] 8[32] 16[32] v4362[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4361[32] -4[32]) }
          value = { defs={0x08048460} expr=(extract[8] 0[32] 8[32] v4362[32]) }
          flags = { }
    init mem:
0x804846d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v4357[32] }
        cx      = { defs={} expr=v4358[32] }
        dx      = { defs={} expr=v4359[32] }
        bx      = { defs={} expr=v4360[32] }
        sp      = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4361[32] -4[32]) }
        si      = { defs={} expr=v4363[32] }
        di      = { defs={} expr=v4364[32] }
        es      = { defs={} expr=v4365[16] }
        cs      = { defs={} expr=v4366[16] }
        ss      = { defs={} expr=v4367[16] }
        ds      = { defs={} expr=v4368[16] }
        fs      = { defs={} expr=v4369[16] }
        gs      = { defs={} expr=v4370[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4372[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4374[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4376[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4361[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4361[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4379[1] }
        if      = { defs={} expr=v4380[1] }
        df      = { defs={} expr=v4381[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4361[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4383[1] }
        iopl1   = { defs={} expr=v4384[1] }
        nt      = { defs={} expr=v4385[1] }
        ?15     = { defs={} expr=v4386[1] }
        rf      = { defs={} expr=v4387[1] }
        vm      = { defs={} expr=v4388[1] }
        ac      = { defs={} expr=v4389[1] }
        vif     = { defs={} expr=v4390[1] }
        vip     = { defs={} expr=v4391[1] }
        id      = { defs={} expr=v4392[1] }
        ?22     = { defs={} expr=v4393[1] }
        ?23     = { defs={} expr=v4394[1] }
        ?24     = { defs={} expr=v4395[1] }
        ?25     = { defs={} expr=v4396[1] }
        ?26     = { defs={} expr=v4397[1] }
        ?27     = { defs={} expr=v4398[1] }
        ?28     = { defs={} expr=v4399[1] }
        ?29     = { defs={} expr=v4400[1] }
        ?30     = { defs={} expr=v4401[1] }
        ?31     = { defs={} expr=v4402[1] }
        ip      = { defs={0x0804846d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={0x08048460,0x08048461,0x08048463,0x08048466,0x0804846d} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={0x08048460,0x08048461,0x08048463,0x08048466,0x0804846d} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={0x08048460,0x08048461,0x08048463,0x08048466,0x0804846d} expr=-124[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={0x08048460,0x08048461,0x08048463,0x08048466,0x0804846d} expr=114[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x08048466} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x08048466} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4361[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x08048466} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x08048466} expr=(add[32] (add[32] v4361[32] -4[32]) -8[32]) }
          value = { defs={0x08048466} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 3[32]) }
          value = { defs={0x08048460} expr=(extract[8] 24[32] 32[32] v4362[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 2[32]) }
          value = { defs={0x08048460} expr=(extract[8] 16[32] 24[32] v4362[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4361[32] -4[32]) 1[32]) }
          value = { defs={0x08048460} expr=(extract[8] 8[32] 16[32] v4362[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4361[32] -4[32]) }
          value = { defs={0x08048460} expr=(extract[8] 0[32] 8[32] v4362[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v4540[32] }
        cx      = { defs={} expr=v4541[32] }
        dx      = { defs={} expr=v4542[32] }
        bx      = { defs={} expr=v4543[32] }
        sp      = { defs={} expr=v4544[32] }
        bp      = { defs={} expr=v4545[32] }
        si      = { defs={} expr=v4546[32] }
        di      = { defs={} expr=v4547[32] }
        es      = { defs={} expr=v4548[16] }
        cs      = { defs={} expr=v4549[16] }
        ss      = { defs={} expr=v4550[16] }
        ds      = { defs={} expr=v4551[16] }
        fs      = { defs={} expr=v4552[16] }
        gs      = { defs={} expr=v4553[16] }
        cf      = { defs={} expr=v4554[1] }
        ?1      = { defs={} expr=v4555[1] }
        pf      = { defs={} expr=v4556[1] }
        ?3      = { defs={} expr=v4557[1] }
        af      = { defs={} expr=v4558[1] }
        ?5      = { defs={} expr=v4559[1] }
        zf      = { defs={} expr=v4560[1] }
        sf      = { defs={} expr=v4561[1] }
        tf      = { defs={} expr=v4562[1] }
        if      = { defs={} expr=v4563[1] }
        df      = { defs={} expr=v4564[1] }
        of      = { defs={} expr=v4565[1] }
        iopl0   = { defs={} expr=v4566[1] }
        iopl1   = { defs={} expr=v4567[1] }
        nt      = { defs={} expr=v4568[1] }
        ?15     = { defs={} expr=v4569[1] }
        rf      = { defs={} expr=v4570[1] }
        vm      = { defs={} expr=v4571[1] }
        ac      = { defs={} expr=v4572[1] }
        vif     = { defs={} expr=v4573[1] }
        vip     = { defs={} expr=v4574[1] }
        id      = { defs={} expr=v4575[1] }
        ?22     = { defs={} expr=v4576[1] }
        ?23     = { defs={} expr=v4577[1] }
        ?24     = { defs={} expr=v4578[1] }
        ?25     = { defs={} expr=v4579[1] }
        ?26     = { defs={} expr=v4580[1] }
        ?27     = { defs={} expr=v4581[1] }
        ?28     = { defs={} expr=v4582[1] }
        ?29     = { defs={} expr=v4583[1] }
        ?30     = { defs={} expr=v4584[1] }
        ?31     = { defs={} expr=v4585[1] }
        ip      = { defs={0x08048472} expr=0x08048479[32] }
    memory:
        address = { defs={} expr=(add[32] v4544[32] 3[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4544[32] 2[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4544[32] 1[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={0x08048472} expr=v4544[32] }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
    init mem:
0x8048479:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v4540[32] }
        cx      = { defs={} expr=v4541[32] }
        dx      = { defs={} expr=v4542[32] }
        bx      = { defs={} expr=v4543[32] }
        sp      = { defs={0x08048479} expr=(add[32] v4544[32] -4[32]) }
        bp      = { defs={} expr=v4545[32] }
        si      = { defs={} expr=v4546[32] }
        di      = { defs={} expr=v4547[32] }
        es      = { defs={} expr=v4548[16] }
        cs      = { defs={} expr=v4549[16] }
        ss      = { defs={} expr=v4550[16] }
        ds      = { defs={} expr=v4551[16] }
        fs      = { defs={} expr=v4552[16] }
        gs      = { defs={} expr=v4553[16] }
        cf      = { defs={} expr=v4554[1] }
        ?1      = { defs={} expr=v4555[1] }
        pf      = { defs={} expr=v4556[1] }
        ?3      = { defs={} expr=v4557[1] }
        af      = { defs={} expr=v4558[1] }
        ?5      = { defs={} expr=v4559[1] }
        zf      = { defs={} expr=v4560[1] }
        sf      = { defs={} expr=v4561[1] }
        tf      = { defs={} expr=v4562[1] }
        if      = { defs={} expr=v4563[1] }
        df      = { defs={} expr=v4564[1] }
        of      = { defs={} expr=v4565[1] }
        iopl0   = { defs={} expr=v4566[1] }
        iopl1   = { defs={} expr=v4567[1] }
        nt      = { defs={} expr=v4568[1] }
        ?15     = { defs={} expr=v4569[1] }
        rf      = { defs={} expr=v4570[1] }
        vm      = { defs={} expr=v4571[1] }
        ac      = { defs={} expr=v4572[1] }
        vif     = { defs={} expr=v4573[1] }
        vip     = { defs={} expr=v4574[1] }
        id      = { defs={} expr=v4575[1] }
        ?22     = { defs={} expr=v4576[1] }
        ?23     = { defs={} expr=v4577[1] }
        ?24     = { defs={} expr=v4578[1] }
        ?25     = { defs={} expr=v4579[1] }
        ?26     = { defs={} expr=v4580[1] }
        ?27     = { defs={} expr=v4581[1] }
        ?28     = { defs={} expr=v4582[1] }
        ?29     = { defs={} expr=v4583[1] }
        ?30     = { defs={} expr=v4584[1] }
        ?31     = { defs={} expr=v4585[1] }
        ip      = { defs={0x08048479} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4544[32] -4[32]) 3[32]) }
          value = { defs={0x08048472,0x08048479} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4544[32] -4[32]) 2[32]) }
          value = { defs={0x08048472,0x08048479} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4544[32] -4[32]) 1[32]) }
          value = { defs={0x08048472,0x08048479} expr=-124[8] }
          flags = { }
        address = { defs={0x08048479} expr=(add[32] v4544[32] -4[32]) }
          value = { defs={0x08048472,0x08048479} expr=126[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4544[32] 3[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4544[32] 2[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4544[32] 1[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={0x08048472} expr=v4544[32] }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048480:push   ebp
    registers:
        ax      = { defs={} expr=v4655[32] }
        cx      = { defs={} expr=v4656[32] }
        dx      = { defs={} expr=v4657[32] }
        bx      = { defs={} expr=v4658[32] }
        sp      = { defs={0x08048480} expr=(add[32] v4659[32] -4[32]) }
        bp      = { defs={} expr=v4660[32] }
        si      = { defs={} expr=v4661[32] }
        di      = { defs={} expr=v4662[32] }
        es      = { defs={} expr=v4663[16] }
        cs      = { defs={} expr=v4664[16] }
        ss      = { defs={} expr=v4665[16] }
        ds      = { defs={} expr=v4666[16] }
        fs      = { defs={} expr=v4667[16] }
        gs      = { defs={} expr=v4668[16] }
        cf      = { defs={} expr=v4669[1] }
        ?1      = { defs={} expr=v4670[1] }
        pf      = { defs={} expr=v4671[1] }
        ?3      = { defs={} expr=v4672[1] }
        af      = { defs={} expr=v4673[1] }
        ?5      = { defs={} expr=v4674[1] }
        zf      = { defs={} expr=v4675[1] }
        sf      = { defs={} expr=v4676[1] }
        tf      = { defs={} expr=v4677[1] }
        if      = { defs={} expr=v4678[1] }
        df      = { defs={} expr=v4679[1] }
        of      = { defs={} expr=v4680[1] }
        iopl0   = { defs={} expr=v4681[1] }
        iopl1   = { defs={} expr=v4682[1] }
        nt      = { defs={} expr=v4683[1] }
        ?15     = { defs={} expr=v4684[1] }
        rf      = { defs={} expr=v4685[1] }
        vm      = { defs={} expr=v4686[1] }
        ac      = { defs={} expr=v4687[1] }
        vif     = { defs={} expr=v4688[1] }
        vip     = { defs={} expr=v4689[1] }
        id      = { defs={} expr=v4690[1] }
        ?22     = { defs={} expr=v4691[1] }
        ?23     = { defs={} expr=v4692[1] }
        ?24     = { defs={} expr=v4693[1] }
        ?25     = { defs={} expr=v4694[1] }
        ?26     = { defs={} expr=v4695[1] }
        ?27     = { defs={} expr=v4696[1] }
        ?28     = { defs={} expr=v4697[1] }
        ?29     = { defs={} expr=v4698[1] }
        ?30     = { defs={} expr=v4699[1] }
        ?31     = { defs={} expr=v4700[1] }
        ip      = { defs={0x08048480} expr=0x08048481[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4660[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4659[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4660[32]) }
          flags = { }
    init mem:
0x8048481:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4655[32] }
        cx      = { defs={} expr=v4656[32] }
        dx      = { defs={} expr=v4657[32] }
        bx      = { defs={} expr=v4658[32] }
        sp      = { defs={0x08048480} expr=(add[32] v4659[32] -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4659[32] -4[32]) }
        si      = { defs={} expr=v4661[32] }
        di      = { defs={} expr=v4662[32] }
        es      = { defs={} expr=v4663[16] }
        cs      = { defs={} expr=v4664[16] }
        ss      = { defs={} expr=v4665[16] }
        ds      = { defs={} expr=v4666[16] }
        fs      = { defs={} expr=v4667[16] }
        gs      = { defs={} expr=v4668[16] }
        cf      = { defs={} expr=v4669[1] }
        ?1      = { defs={} expr=v4670[1] }
        pf      = { defs={} expr=v4671[1] }
        ?3      = { defs={} expr=v4672[1] }
        af      = { defs={} expr=v4673[1] }
        ?5      = { defs={} expr=v4674[1] }
        zf      = { defs={} expr=v4675[1] }
        sf      = { defs={} expr=v4676[1] }
        tf      = { defs={} expr=v4677[1] }
        if      = { defs={} expr=v4678[1] }
        df      = { defs={} expr=v4679[1] }
        of      = { defs={} expr=v4680[1] }
        iopl0   = { defs={} expr=v4681[1] }
        iopl1   = { defs={} expr=v4682[1] }
        nt      = { defs={} expr=v4683[1] }
        ?15     = { defs={} expr=v4684[1] }
        rf      = { defs={} expr=v4685[1] }
        vm      = { defs={} expr=v4686[1] }
        ac      = { defs={} expr=v4687[1] }
        vif     = { defs={} expr=v4688[1] }
        vip     = { defs={} expr=v4689[1] }
        id      = { defs={} expr=v4690[1] }
        ?22     = { defs={} expr=v4691[1] }
        ?23     = { defs={} expr=v4692[1] }
        ?24     = { defs={} expr=v4693[1] }
        ?25     = { defs={} expr=v4694[1] }
        ?26     = { defs={} expr=v4695[1] }
        ?27     = { defs={} expr=v4696[1] }
        ?28     = { defs={} expr=v4697[1] }
        ?29     = { defs={} expr=v4698[1] }
        ?30     = { defs={} expr=v4699[1] }
        ?31     = { defs={} expr=v4700[1] }
        ip      = { defs={0x08048480,0x08048481} expr=0x08048483[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4660[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4659[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4660[32]) }
          flags = { }
    init mem:
0x8048483:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v4655[32] }
        cx      = { defs={} expr=v4656[32] }
        dx      = { defs={} expr=v4657[32] }
        bx      = { defs={} expr=v4658[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4659[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4659[32] -4[32]) }
        si      = { defs={} expr=v4661[32] }
        di      = { defs={} expr=v4662[32] }
        es      = { defs={} expr=v4663[16] }
        cs      = { defs={} expr=v4664[16] }
        ss      = { defs={} expr=v4665[16] }
        ds      = { defs={} expr=v4666[16] }
        fs      = { defs={} expr=v4667[16] }
        gs      = { defs={} expr=v4668[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4670[1] }
        pf      = { defs={0x08048480,0x08048483} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4659[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4659[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4672[1] }
        af      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4674[1] }
        zf      = { defs={0x08048480,0x08048483} expr=(zerop[1] (add[32] (add[32] v4659[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048480,0x08048483} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4659[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4677[1] }
        if      = { defs={} expr=v4678[1] }
        df      = { defs={} expr=v4679[1] }
        of      = { defs={0x08048480,0x08048483} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4681[1] }
        iopl1   = { defs={} expr=v4682[1] }
        nt      = { defs={} expr=v4683[1] }
        ?15     = { defs={} expr=v4684[1] }
        rf      = { defs={} expr=v4685[1] }
        vm      = { defs={} expr=v4686[1] }
        ac      = { defs={} expr=v4687[1] }
        vif     = { defs={} expr=v4688[1] }
        vip     = { defs={} expr=v4689[1] }
        id      = { defs={} expr=v4690[1] }
        ?22     = { defs={} expr=v4691[1] }
        ?23     = { defs={} expr=v4692[1] }
        ?24     = { defs={} expr=v4693[1] }
        ?25     = { defs={} expr=v4694[1] }
        ?26     = { defs={} expr=v4695[1] }
        ?27     = { defs={} expr=v4696[1] }
        ?28     = { defs={} expr=v4697[1] }
        ?29     = { defs={} expr=v4698[1] }
        ?30     = { defs={} expr=v4699[1] }
        ?31     = { defs={} expr=v4700[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483} expr=0x08048486[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4660[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4659[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4660[32]) }
          flags = { }
    init mem:
0x8048486:inc    DWORD PTR ds:[0x080496f8<.bss+4>]
    registers:
        ax      = { defs={} expr=v4655[32] }
        cx      = { defs={} expr=v4656[32] }
        dx      = { defs={} expr=v4657[32] }
        bx      = { defs={} expr=v4658[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4659[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4659[32] -4[32]) }
        si      = { defs={} expr=v4661[32] }
        di      = { defs={} expr=v4662[32] }
        es      = { defs={} expr=v4663[16] }
        cs      = { defs={} expr=v4664[16] }
        ss      = { defs={} expr=v4665[16] }
        ds      = { defs={} expr=v4666[16] }
        fs      = { defs={} expr=v4667[16] }
        gs      = { defs={} expr=v4668[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4670[1] }
        pf      = { defs={0x08048480,0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v4672[1] }
        af      = { defs={0x08048480,0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32]))))) 1[33]))))) }
        ?5      = { defs={} expr=v4674[1] }
        zf      = { defs={0x08048480,0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
        sf      = { defs={0x08048480,0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
        tf      = { defs={} expr=v4677[1] }
        if      = { defs={} expr=v4678[1] }
        df      = { defs={} expr=v4679[1] }
        of      = { defs={0x08048480,0x08048486} expr=0[1] }
        iopl0   = { defs={} expr=v4681[1] }
        iopl1   = { defs={} expr=v4682[1] }
        nt      = { defs={} expr=v4683[1] }
        ?15     = { defs={} expr=v4684[1] }
        rf      = { defs={} expr=v4685[1] }
        vm      = { defs={} expr=v4686[1] }
        ac      = { defs={} expr=v4687[1] }
        vif     = { defs={} expr=v4688[1] }
        vip     = { defs={} expr=v4689[1] }
        id      = { defs={} expr=v4690[1] }
        ?22     = { defs={} expr=v4691[1] }
        ?23     = { defs={} expr=v4692[1] }
        ?24     = { defs={} expr=v4693[1] }
        ?25     = { defs={} expr=v4694[1] }
        ?26     = { defs={} expr=v4695[1] }
        ?27     = { defs={} expr=v4696[1] }
        ?28     = { defs={} expr=v4697[1] }
        ?29     = { defs={} expr=v4698[1] }
        ?30     = { defs={} expr=v4699[1] }
        ?31     = { defs={} expr=v4700[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486} expr=0x0804848c[32] }
    memory:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4660[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4659[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4660[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4781[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4779[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4777[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4775[8] }
          flags = { rdonly }
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v4655[32] }
        cx      = { defs={} expr=v4656[32] }
        dx      = { defs={} expr=v4657[32] }
        bx      = { defs={} expr=v4658[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4659[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4659[32] -4[32]) }
        si      = { defs={} expr=v4661[32] }
        di      = { defs={} expr=v4662[32] }
        es      = { defs={} expr=v4663[16] }
        cs      = { defs={} expr=v4664[16] }
        ss      = { defs={} expr=v4665[16] }
        ds      = { defs={} expr=v4666[16] }
        fs      = { defs={} expr=v4667[16] }
        gs      = { defs={} expr=v4668[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4670[1] }
        pf      = { defs={0x08048480,0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v4672[1] }
        af      = { defs={0x08048480,0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32]))))) 1[33]))))) }
        ?5      = { defs={} expr=v4674[1] }
        zf      = { defs={0x08048480,0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
        sf      = { defs={0x08048480,0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
        tf      = { defs={} expr=v4677[1] }
        if      = { defs={} expr=v4678[1] }
        df      = { defs={} expr=v4679[1] }
        of      = { defs={0x08048480,0x08048486} expr=0[1] }
        iopl0   = { defs={} expr=v4681[1] }
        iopl1   = { defs={} expr=v4682[1] }
        nt      = { defs={} expr=v4683[1] }
        ?15     = { defs={} expr=v4684[1] }
        rf      = { defs={} expr=v4685[1] }
        vm      = { defs={} expr=v4686[1] }
        ac      = { defs={} expr=v4687[1] }
        vif     = { defs={} expr=v4688[1] }
        vip     = { defs={} expr=v4689[1] }
        id      = { defs={} expr=v4690[1] }
        ?22     = { defs={} expr=v4691[1] }
        ?23     = { defs={} expr=v4692[1] }
        ?24     = { defs={} expr=v4693[1] }
        ?25     = { defs={} expr=v4694[1] }
        ?26     = { defs={} expr=v4695[1] }
        ?27     = { defs={} expr=v4696[1] }
        ?28     = { defs={} expr=v4697[1] }
        ?29     = { defs={} expr=v4698[1] }
        ?30     = { defs={} expr=v4699[1] }
        ?31     = { defs={} expr=v4700[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c} expr=0x08048493[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x0804848c} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x0804848c} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x0804848c} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x0804848c} expr=(add[32] (add[32] v4659[32] -4[32]) -8[32]) }
          value = { defs={0x0804848c} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4660[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4659[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4660[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4781[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4779[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4777[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4775[8] }
          flags = { rdonly }
0x8048493:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v4655[32] }
        cx      = { defs={} expr=v4656[32] }
        dx      = { defs={} expr=v4657[32] }
        bx      = { defs={} expr=v4658[32] }
        sp      = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4659[32] -4[32]) }
        si      = { defs={} expr=v4661[32] }
        di      = { defs={} expr=v4662[32] }
        es      = { defs={} expr=v4663[16] }
        cs      = { defs={} expr=v4664[16] }
        ss      = { defs={} expr=v4665[16] }
        ds      = { defs={} expr=v4666[16] }
        fs      = { defs={} expr=v4667[16] }
        gs      = { defs={} expr=v4668[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4659[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4670[1] }
        pf      = { defs={0x08048480,0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v4672[1] }
        af      = { defs={0x08048480,0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32]))))) 1[33]))))) }
        ?5      = { defs={} expr=v4674[1] }
        zf      = { defs={0x08048480,0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
        sf      = { defs={0x08048480,0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
        tf      = { defs={} expr=v4677[1] }
        if      = { defs={} expr=v4678[1] }
        df      = { defs={} expr=v4679[1] }
        of      = { defs={0x08048480,0x08048486} expr=0[1] }
        iopl0   = { defs={} expr=v4681[1] }
        iopl1   = { defs={} expr=v4682[1] }
        nt      = { defs={} expr=v4683[1] }
        ?15     = { defs={} expr=v4684[1] }
        rf      = { defs={} expr=v4685[1] }
        vm      = { defs={} expr=v4686[1] }
        ac      = { defs={} expr=v4687[1] }
        vif     = { defs={} expr=v4688[1] }
        vip     = { defs={} expr=v4689[1] }
        id      = { defs={} expr=v4690[1] }
        ?22     = { defs={} expr=v4691[1] }
        ?23     = { defs={} expr=v4692[1] }
        ?24     = { defs={} expr=v4693[1] }
        ?25     = { defs={} expr=v4694[1] }
        ?26     = { defs={} expr=v4695[1] }
        ?27     = { defs={} expr=v4696[1] }
        ?28     = { defs={} expr=v4697[1] }
        ?29     = { defs={} expr=v4698[1] }
        ?30     = { defs={} expr=v4699[1] }
        ?31     = { defs={} expr=v4700[1] }
        ip      = { defs={0x08048493} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c,0x08048493} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c,0x08048493} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c,0x08048493} expr=-124[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c,0x08048493} expr=-104[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x0804848c} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x0804848c} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4659[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x0804848c} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x0804848c} expr=(add[32] (add[32] v4659[32] -4[32]) -8[32]) }
          value = { defs={0x0804848c} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={0x08048480,0x08048486} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4776[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f8[32] v4775[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4778[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496f9[32] v4777[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4780[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fa[32] v4779[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4782[8] (add[32] (add[32] v4659[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4660[32])) (add[32] (add[32] v4659[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4660[32])) (add[32] v4659[32] -4[32]) (extract[8] 0[32] 8[32] v4660[32])) 0x080496fb[32] v4781[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4660[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4659[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4660[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4659[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4660[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4781[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4779[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4777[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4775[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v4900[32] }
        cx      = { defs={} expr=v4901[32] }
        dx      = { defs={} expr=v4902[32] }
        bx      = { defs={} expr=v4903[32] }
        sp      = { defs={} expr=v4904[32] }
        bp      = { defs={} expr=v4905[32] }
        si      = { defs={} expr=v4906[32] }
        di      = { defs={} expr=v4907[32] }
        es      = { defs={} expr=v4908[16] }
        cs      = { defs={} expr=v4909[16] }
        ss      = { defs={} expr=v4910[16] }
        ds      = { defs={} expr=v4911[16] }
        fs      = { defs={} expr=v4912[16] }
        gs      = { defs={} expr=v4913[16] }
        cf      = { defs={} expr=v4914[1] }
        ?1      = { defs={} expr=v4915[1] }
        pf      = { defs={} expr=v4916[1] }
        ?3      = { defs={} expr=v4917[1] }
        af      = { defs={} expr=v4918[1] }
        ?5      = { defs={} expr=v4919[1] }
        zf      = { defs={} expr=v4920[1] }
        sf      = { defs={} expr=v4921[1] }
        tf      = { defs={} expr=v4922[1] }
        if      = { defs={} expr=v4923[1] }
        df      = { defs={} expr=v4924[1] }
        of      = { defs={} expr=v4925[1] }
        iopl0   = { defs={} expr=v4926[1] }
        iopl1   = { defs={} expr=v4927[1] }
        nt      = { defs={} expr=v4928[1] }
        ?15     = { defs={} expr=v4929[1] }
        rf      = { defs={} expr=v4930[1] }
        vm      = { defs={} expr=v4931[1] }
        ac      = { defs={} expr=v4932[1] }
        vif     = { defs={} expr=v4933[1] }
        vip     = { defs={} expr=v4934[1] }
        id      = { defs={} expr=v4935[1] }
        ?22     = { defs={} expr=v4936[1] }
        ?23     = { defs={} expr=v4937[1] }
        ?24     = { defs={} expr=v4938[1] }
        ?25     = { defs={} expr=v4939[1] }
        ?26     = { defs={} expr=v4940[1] }
        ?27     = { defs={} expr=v4941[1] }
        ?28     = { defs={} expr=v4942[1] }
        ?29     = { defs={} expr=v4943[1] }
        ?30     = { defs={} expr=v4944[1] }
        ?31     = { defs={} expr=v4945[1] }
        ip      = { defs={0x08048498} expr=0x0804849f[32] }
    memory:
        address = { defs={} expr=(add[32] v4904[32] 3[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4904[32] 2[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4904[32] 1[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={0x08048498} expr=v4904[32] }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
    init mem:
0x804849f:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v4900[32] }
        cx      = { defs={} expr=v4901[32] }
        dx      = { defs={} expr=v4902[32] }
        bx      = { defs={} expr=v4903[32] }
        sp      = { defs={0x0804849f} expr=(add[32] v4904[32] -4[32]) }
        bp      = { defs={} expr=v4905[32] }
        si      = { defs={} expr=v4906[32] }
        di      = { defs={} expr=v4907[32] }
        es      = { defs={} expr=v4908[16] }
        cs      = { defs={} expr=v4909[16] }
        ss      = { defs={} expr=v4910[16] }
        ds      = { defs={} expr=v4911[16] }
        fs      = { defs={} expr=v4912[16] }
        gs      = { defs={} expr=v4913[16] }
        cf      = { defs={} expr=v4914[1] }
        ?1      = { defs={} expr=v4915[1] }
        pf      = { defs={} expr=v4916[1] }
        ?3      = { defs={} expr=v4917[1] }
        af      = { defs={} expr=v4918[1] }
        ?5      = { defs={} expr=v4919[1] }
        zf      = { defs={} expr=v4920[1] }
        sf      = { defs={} expr=v4921[1] }
        tf      = { defs={} expr=v4922[1] }
        if      = { defs={} expr=v4923[1] }
        df      = { defs={} expr=v4924[1] }
        of      = { defs={} expr=v4925[1] }
        iopl0   = { defs={} expr=v4926[1] }
        iopl1   = { defs={} expr=v4927[1] }
        nt      = { defs={} expr=v4928[1] }
        ?15     = { defs={} expr=v4929[1] }
        rf      = { defs={} expr=v4930[1] }
        vm      = { defs={} expr=v4931[1] }
        ac      = { defs={} expr=v4932[1] }
        vif     = { defs={} expr=v4933[1] }
        vip     = { defs={} expr=v4934[1] }
        id      = { defs={} expr=v4935[1] }
        ?22     = { defs={} expr=v4936[1] }
        ?23     = { defs={} expr=v4937[1] }
        ?24     = { defs={} expr=v4938[1] }
        ?25     = { defs={} expr=v4939[1] }
        ?26     = { defs={} expr=v4940[1] }
        ?27     = { defs={} expr=v4941[1] }
        ?28     = { defs={} expr=v4942[1] }
        ?29     = { defs={} expr=v4943[1] }
        ?30     = { defs={} expr=v4944[1] }
        ?31     = { defs={} expr=v4945[1] }
        ip      = { defs={0x0804849f} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4904[32] -4[32]) 3[32]) }
          value = { defs={0x08048498,0x0804849f} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4904[32] -4[32]) 2[32]) }
          value = { defs={0x08048498,0x0804849f} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4904[32] -4[32]) 1[32]) }
          value = { defs={0x08048498,0x0804849f} expr=-124[8] }
          flags = { }
        address = { defs={0x0804849f} expr=(add[32] v4904[32] -4[32]) }
          value = { defs={0x08048498,0x0804849f} expr=-92[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4904[32] 3[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4904[32] 2[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4904[32] 1[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={0x08048498} expr=v4904[32] }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484b0:push   ebp
    registers:
        ax      = { defs={} expr=v5015[32] }
        cx      = { defs={} expr=v5016[32] }
        dx      = { defs={} expr=v5017[32] }
        bx      = { defs={} expr=v5018[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v5019[32] -4[32]) }
        bp      = { defs={} expr=v5020[32] }
        si      = { defs={} expr=v5021[32] }
        di      = { defs={} expr=v5022[32] }
        es      = { defs={} expr=v5023[16] }
        cs      = { defs={} expr=v5024[16] }
        ss      = { defs={} expr=v5025[16] }
        ds      = { defs={} expr=v5026[16] }
        fs      = { defs={} expr=v5027[16] }
        gs      = { defs={} expr=v5028[16] }
        cf      = { defs={} expr=v5029[1] }
        ?1      = { defs={} expr=v5030[1] }
        pf      = { defs={} expr=v5031[1] }
        ?3      = { defs={} expr=v5032[1] }
        af      = { defs={} expr=v5033[1] }
        ?5      = { defs={} expr=v5034[1] }
        zf      = { defs={} expr=v5035[1] }
        sf      = { defs={} expr=v5036[1] }
        tf      = { defs={} expr=v5037[1] }
        if      = { defs={} expr=v5038[1] }
        df      = { defs={} expr=v5039[1] }
        of      = { defs={} expr=v5040[1] }
        iopl0   = { defs={} expr=v5041[1] }
        iopl1   = { defs={} expr=v5042[1] }
        nt      = { defs={} expr=v5043[1] }
        ?15     = { defs={} expr=v5044[1] }
        rf      = { defs={} expr=v5045[1] }
        vm      = { defs={} expr=v5046[1] }
        ac      = { defs={} expr=v5047[1] }
        vif     = { defs={} expr=v5048[1] }
        vip     = { defs={} expr=v5049[1] }
        id      = { defs={} expr=v5050[1] }
        ?22     = { defs={} expr=v5051[1] }
        ?23     = { defs={} expr=v5052[1] }
        ?24     = { defs={} expr=v5053[1] }
        ?25     = { defs={} expr=v5054[1] }
        ?26     = { defs={} expr=v5055[1] }
        ?27     = { defs={} expr=v5056[1] }
        ?28     = { defs={} expr=v5057[1] }
        ?29     = { defs={} expr=v5058[1] }
        ?30     = { defs={} expr=v5059[1] }
        ?31     = { defs={} expr=v5060[1] }
        ip      = { defs={0x080484b0} expr=0x080484b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v5020[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v5019[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v5020[32]) }
          flags = { }
    init mem:
0x80484b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v5015[32] }
        cx      = { defs={} expr=v5016[32] }
        dx      = { defs={} expr=v5017[32] }
        bx      = { defs={} expr=v5018[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v5019[32] -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v5019[32] -4[32]) }
        si      = { defs={} expr=v5021[32] }
        di      = { defs={} expr=v5022[32] }
        es      = { defs={} expr=v5023[16] }
        cs      = { defs={} expr=v5024[16] }
        ss      = { defs={} expr=v5025[16] }
        ds      = { defs={} expr=v5026[16] }
        fs      = { defs={} expr=v5027[16] }
        gs      = { defs={} expr=v5028[16] }
        cf      = { defs={} expr=v5029[1] }
        ?1      = { defs={} expr=v5030[1] }
        pf      = { defs={} expr=v5031[1] }
        ?3      = { defs={} expr=v5032[1] }
        af      = { defs={} expr=v5033[1] }
        ?5      = { defs={} expr=v5034[1] }
        zf      = { defs={} expr=v5035[1] }
        sf      = { defs={} expr=v5036[1] }
        tf      = { defs={} expr=v5037[1] }
        if      = { defs={} expr=v5038[1] }
        df      = { defs={} expr=v5039[1] }
        of      = { defs={} expr=v5040[1] }
        iopl0   = { defs={} expr=v5041[1] }
        iopl1   = { defs={} expr=v5042[1] }
        nt      = { defs={} expr=v5043[1] }
        ?15     = { defs={} expr=v5044[1] }
        rf      = { defs={} expr=v5045[1] }
        vm      = { defs={} expr=v5046[1] }
        ac      = { defs={} expr=v5047[1] }
        vif     = { defs={} expr=v5048[1] }
        vip     = { defs={} expr=v5049[1] }
        id      = { defs={} expr=v5050[1] }
        ?22     = { defs={} expr=v5051[1] }
        ?23     = { defs={} expr=v5052[1] }
        ?24     = { defs={} expr=v5053[1] }
        ?25     = { defs={} expr=v5054[1] }
        ?26     = { defs={} expr=v5055[1] }
        ?27     = { defs={} expr=v5056[1] }
        ?28     = { defs={} expr=v5057[1] }
        ?29     = { defs={} expr=v5058[1] }
        ?30     = { defs={} expr=v5059[1] }
        ?31     = { defs={} expr=v5060[1] }
        ip      = { defs={0x080484b0,0x080484b1} expr=0x080484b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v5020[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v5019[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v5020[32]) }
          flags = { }
    init mem:
0x80484b3:push   edi
    registers:
        ax      = { defs={} expr=v5015[32] }
        cx      = { defs={} expr=v5016[32] }
        dx      = { defs={} expr=v5017[32] }
        bx      = { defs={} expr=v5018[32] }
        sp      = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v5019[32] -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v5019[32] -4[32]) }
        si      = { defs={} expr=v5021[32] }
        di      = { defs={} expr=v5022[32] }
        es      = { defs={} expr=v5023[16] }
        cs      = { defs={} expr=v5024[16] }
        ss      = { defs={} expr=v5025[16] }
        ds      = { defs={} expr=v5026[16] }
        fs      = { defs={} expr=v5027[16] }
        gs      = { defs={} expr=v5028[16] }
        cf      = { defs={} expr=v5029[1] }
        ?1      = { defs={} expr=v5030[1] }
        pf      = { defs={} expr=v5031[1] }
        ?3      = { defs={} expr=v5032[1] }
        af      = { defs={} expr=v5033[1] }
        ?5      = { defs={} expr=v5034[1] }
        zf      = { defs={} expr=v5035[1] }
        sf      = { defs={} expr=v5036[1] }
        tf      = { defs={} expr=v5037[1] }
        if      = { defs={} expr=v5038[1] }
        df      = { defs={} expr=v5039[1] }
        of      = { defs={} expr=v5040[1] }
        iopl0   = { defs={} expr=v5041[1] }
        iopl1   = { defs={} expr=v5042[1] }
        nt      = { defs={} expr=v5043[1] }
        ?15     = { defs={} expr=v5044[1] }
        rf      = { defs={} expr=v5045[1] }
        vm      = { defs={} expr=v5046[1] }
        ac      = { defs={} expr=v5047[1] }
        vif     = { defs={} expr=v5048[1] }
        vip     = { defs={} expr=v5049[1] }
        id      = { defs={} expr=v5050[1] }
        ?22     = { defs={} expr=v5051[1] }
        ?23     = { defs={} expr=v5052[1] }
        ?24     = { defs={} expr=v5053[1] }
        ?25     = { defs={} expr=v5054[1] }
        ?26     = { defs={} expr=v5055[1] }
        ?27     = { defs={} expr=v5056[1] }
        ?28     = { defs={} expr=v5057[1] }
        ?29     = { defs={} expr=v5058[1] }
        ?30     = { defs={} expr=v5059[1] }
        ?31     = { defs={} expr=v5060[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3} expr=0x080484b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 24[32] 32[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 16[32] 24[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 8[32] 16[32] v5022[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v5019[32] -4[32]) -4[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 0[32] 8[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v5020[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v5019[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v5020[32]) }
          flags = { }
    init mem:
0x80484b4:push   esi
    registers:
        ax      = { defs={} expr=v5015[32] }
        cx      = { defs={} expr=v5016[32] }
        dx      = { defs={} expr=v5017[32] }
        bx      = { defs={} expr=v5018[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v5019[32] -4[32]) }
        si      = { defs={} expr=v5021[32] }
        di      = { defs={} expr=v5022[32] }
        es      = { defs={} expr=v5023[16] }
        cs      = { defs={} expr=v5024[16] }
        ss      = { defs={} expr=v5025[16] }
        ds      = { defs={} expr=v5026[16] }
        fs      = { defs={} expr=v5027[16] }
        gs      = { defs={} expr=v5028[16] }
        cf      = { defs={} expr=v5029[1] }
        ?1      = { defs={} expr=v5030[1] }
        pf      = { defs={} expr=v5031[1] }
        ?3      = { defs={} expr=v5032[1] }
        af      = { defs={} expr=v5033[1] }
        ?5      = { defs={} expr=v5034[1] }
        zf      = { defs={} expr=v5035[1] }
        sf      = { defs={} expr=v5036[1] }
        tf      = { defs={} expr=v5037[1] }
        if      = { defs={} expr=v5038[1] }
        df      = { defs={} expr=v5039[1] }
        of      = { defs={} expr=v5040[1] }
        iopl0   = { defs={} expr=v5041[1] }
        iopl1   = { defs={} expr=v5042[1] }
        nt      = { defs={} expr=v5043[1] }
        ?15     = { defs={} expr=v5044[1] }
        rf      = { defs={} expr=v5045[1] }
        vm      = { defs={} expr=v5046[1] }
        ac      = { defs={} expr=v5047[1] }
        vif     = { defs={} expr=v5048[1] }
        vip     = { defs={} expr=v5049[1] }
        id      = { defs={} expr=v5050[1] }
        ?22     = { defs={} expr=v5051[1] }
        ?23     = { defs={} expr=v5052[1] }
        ?24     = { defs={} expr=v5053[1] }
        ?25     = { defs={} expr=v5054[1] }
        ?26     = { defs={} expr=v5055[1] }
        ?27     = { defs={} expr=v5056[1] }
        ?28     = { defs={} expr=v5057[1] }
        ?29     = { defs={} expr=v5058[1] }
        ?30     = { defs={} expr=v5059[1] }
        ?31     = { defs={} expr=v5060[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4} expr=0x080484b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 24[32] 32[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 16[32] 24[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 8[32] 16[32] v5021[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 0[32] 8[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 24[32] 32[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 16[32] 24[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 8[32] 16[32] v5022[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v5019[32] -4[32]) -4[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 0[32] 8[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v5020[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v5019[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v5020[32]) }
          flags = { }
    init mem:
0x80484b5:push   ebx
    registers:
        ax      = { defs={} expr=v5015[32] }
        cx      = { defs={} expr=v5016[32] }
        dx      = { defs={} expr=v5017[32] }
        bx      = { defs={} expr=v5018[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v5019[32] -4[32]) }
        si      = { defs={} expr=v5021[32] }
        di      = { defs={} expr=v5022[32] }
        es      = { defs={} expr=v5023[16] }
        cs      = { defs={} expr=v5024[16] }
        ss      = { defs={} expr=v5025[16] }
        ds      = { defs={} expr=v5026[16] }
        fs      = { defs={} expr=v5027[16] }
        gs      = { defs={} expr=v5028[16] }
        cf      = { defs={} expr=v5029[1] }
        ?1      = { defs={} expr=v5030[1] }
        pf      = { defs={} expr=v5031[1] }
        ?3      = { defs={} expr=v5032[1] }
        af      = { defs={} expr=v5033[1] }
        ?5      = { defs={} expr=v5034[1] }
        zf      = { defs={} expr=v5035[1] }
        sf      = { defs={} expr=v5036[1] }
        tf      = { defs={} expr=v5037[1] }
        if      = { defs={} expr=v5038[1] }
        df      = { defs={} expr=v5039[1] }
        of      = { defs={} expr=v5040[1] }
        iopl0   = { defs={} expr=v5041[1] }
        iopl1   = { defs={} expr=v5042[1] }
        nt      = { defs={} expr=v5043[1] }
        ?15     = { defs={} expr=v5044[1] }
        rf      = { defs={} expr=v5045[1] }
        vm      = { defs={} expr=v5046[1] }
        ac      = { defs={} expr=v5047[1] }
        vif     = { defs={} expr=v5048[1] }
        vip     = { defs={} expr=v5049[1] }
        id      = { defs={} expr=v5050[1] }
        ?22     = { defs={} expr=v5051[1] }
        ?23     = { defs={} expr=v5052[1] }
        ?24     = { defs={} expr=v5053[1] }
        ?25     = { defs={} expr=v5054[1] }
        ?26     = { defs={} expr=v5055[1] }
        ?27     = { defs={} expr=v5056[1] }
        ?28     = { defs={} expr=v5057[1] }
        ?29     = { defs={} expr=v5058[1] }
        ?30     = { defs={} expr=v5059[1] }
        ?31     = { defs={} expr=v5060[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5} expr=0x080484b6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 24[32] 32[32] v5018[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 16[32] 24[32] v5018[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 8[32] 16[32] v5018[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 0[32] 8[32] v5018[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 24[32] 32[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 16[32] 24[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 8[32] 16[32] v5021[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 0[32] 8[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 24[32] 32[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 16[32] 24[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 8[32] 16[32] v5022[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v5019[32] -4[32]) -4[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 0[32] 8[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v5020[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v5019[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v5020[32]) }
          flags = { }
    init mem:
0x80484b6:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v5015[32] }
        cx      = { defs={} expr=v5016[32] }
        dx      = { defs={} expr=v5017[32] }
        bx      = { defs={} expr=v5018[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v5019[32] -4[32]) }
        si      = { defs={} expr=v5021[32] }
        di      = { defs={} expr=v5022[32] }
        es      = { defs={} expr=v5023[16] }
        cs      = { defs={} expr=v5024[16] }
        ss      = { defs={} expr=v5025[16] }
        ds      = { defs={} expr=v5026[16] }
        fs      = { defs={} expr=v5027[16] }
        gs      = { defs={} expr=v5028[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5030[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5032[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5034[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5037[1] }
        if      = { defs={} expr=v5038[1] }
        df      = { defs={} expr=v5039[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5041[1] }
        iopl1   = { defs={} expr=v5042[1] }
        nt      = { defs={} expr=v5043[1] }
        ?15     = { defs={} expr=v5044[1] }
        rf      = { defs={} expr=v5045[1] }
        vm      = { defs={} expr=v5046[1] }
        ac      = { defs={} expr=v5047[1] }
        vif     = { defs={} expr=v5048[1] }
        vip     = { defs={} expr=v5049[1] }
        id      = { defs={} expr=v5050[1] }
        ?22     = { defs={} expr=v5051[1] }
        ?23     = { defs={} expr=v5052[1] }
        ?24     = { defs={} expr=v5053[1] }
        ?25     = { defs={} expr=v5054[1] }
        ?26     = { defs={} expr=v5055[1] }
        ?27     = { defs={} expr=v5056[1] }
        ?28     = { defs={} expr=v5057[1] }
        ?29     = { defs={} expr=v5058[1] }
        ?30     = { defs={} expr=v5059[1] }
        ?31     = { defs={} expr=v5060[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=0x080484b9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 24[32] 32[32] v5018[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 16[32] 24[32] v5018[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 8[32] 16[32] v5018[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 0[32] 8[32] v5018[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 24[32] 32[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 16[32] 24[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 8[32] 16[32] v5021[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 0[32] 8[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 24[32] 32[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 16[32] 24[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 8[32] 16[32] v5022[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v5019[32] -4[32]) -4[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 0[32] 8[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v5020[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v5019[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v5020[32]) }
          flags = { }
    init mem:
0x80484b9:call   0x080484be<<Insn>>
    registers:
        ax      = { defs={} expr=v5015[32] }
        cx      = { defs={} expr=v5016[32] }
        dx      = { defs={} expr=v5017[32] }
        bx      = { defs={} expr=v5018[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v5019[32] -4[32]) }
        si      = { defs={} expr=v5021[32] }
        di      = { defs={} expr=v5022[32] }
        es      = { defs={} expr=v5023[16] }
        cs      = { defs={} expr=v5024[16] }
        ss      = { defs={} expr=v5025[16] }
        ds      = { defs={} expr=v5026[16] }
        fs      = { defs={} expr=v5027[16] }
        gs      = { defs={} expr=v5028[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5030[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5032[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5034[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5037[1] }
        if      = { defs={} expr=v5038[1] }
        df      = { defs={} expr=v5039[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5041[1] }
        iopl1   = { defs={} expr=v5042[1] }
        nt      = { defs={} expr=v5043[1] }
        ?15     = { defs={} expr=v5044[1] }
        rf      = { defs={} expr=v5045[1] }
        vm      = { defs={} expr=v5046[1] }
        ac      = { defs={} expr=v5047[1] }
        vif     = { defs={} expr=v5048[1] }
        vip     = { defs={} expr=v5049[1] }
        id      = { defs={} expr=v5050[1] }
        ?22     = { defs={} expr=v5051[1] }
        ?23     = { defs={} expr=v5052[1] }
        ?24     = { defs={} expr=v5053[1] }
        ?25     = { defs={} expr=v5054[1] }
        ?26     = { defs={} expr=v5055[1] }
        ?27     = { defs={} expr=v5056[1] }
        ?28     = { defs={} expr=v5057[1] }
        ?29     = { defs={} expr=v5058[1] }
        ?30     = { defs={} expr=v5059[1] }
        ?31     = { defs={} expr=v5060[1] }
        ip      = { defs={0x080484b9} expr=0x080484be[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=-124[8] }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=-66[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 24[32] 32[32] v5018[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 16[32] 24[32] v5018[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 8[32] 16[32] v5018[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 0[32] 8[32] v5018[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 24[32] 32[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 16[32] 24[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 8[32] 16[32] v5021[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 0[32] 8[32] v5021[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 24[32] 32[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 16[32] 24[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5019[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 8[32] 16[32] v5022[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v5019[32] -4[32]) -4[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 0[32] 8[32] v5022[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v5020[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5019[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v5020[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v5019[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v5020[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484be:pop    ebx
    registers:
        ax      = { defs={} expr=v5223[32] }
        cx      = { defs={} expr=v5224[32] }
        dx      = { defs={} expr=v5225[32] }
        bx      = { defs={0x080484be} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) }
        sp      = { defs={0x080484be} expr=(add[32] v5227[32] 4[32]) }
        bp      = { defs={} expr=v5228[32] }
        si      = { defs={} expr=v5229[32] }
        di      = { defs={} expr=v5230[32] }
        es      = { defs={} expr=v5231[16] }
        cs      = { defs={} expr=v5232[16] }
        ss      = { defs={} expr=v5233[16] }
        ds      = { defs={} expr=v5234[16] }
        fs      = { defs={} expr=v5235[16] }
        gs      = { defs={} expr=v5236[16] }
        cf      = { defs={} expr=v5237[1] }
        ?1      = { defs={} expr=v5238[1] }
        pf      = { defs={} expr=v5239[1] }
        ?3      = { defs={} expr=v5240[1] }
        af      = { defs={} expr=v5241[1] }
        ?5      = { defs={} expr=v5242[1] }
        zf      = { defs={} expr=v5243[1] }
        sf      = { defs={} expr=v5244[1] }
        tf      = { defs={} expr=v5245[1] }
        if      = { defs={} expr=v5246[1] }
        df      = { defs={} expr=v5247[1] }
        of      = { defs={} expr=v5248[1] }
        iopl0   = { defs={} expr=v5249[1] }
        iopl1   = { defs={} expr=v5250[1] }
        nt      = { defs={} expr=v5251[1] }
        ?15     = { defs={} expr=v5252[1] }
        rf      = { defs={} expr=v5253[1] }
        vm      = { defs={} expr=v5254[1] }
        ac      = { defs={} expr=v5255[1] }
        vif     = { defs={} expr=v5256[1] }
        vip     = { defs={} expr=v5257[1] }
        id      = { defs={} expr=v5258[1] }
        ?22     = { defs={} expr=v5259[1] }
        ?23     = { defs={} expr=v5260[1] }
        ?24     = { defs={} expr=v5261[1] }
        ?25     = { defs={} expr=v5262[1] }
        ?26     = { defs={} expr=v5263[1] }
        ?27     = { defs={} expr=v5264[1] }
        ?28     = { defs={} expr=v5265[1] }
        ?29     = { defs={} expr=v5266[1] }
        ?30     = { defs={} expr=v5267[1] }
        ?31     = { defs={} expr=v5268[1] }
        ip      = { defs={0x080484be} expr=0x080484bf[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5227[32] 3[32]) }
          value = { defs={} expr=v5281[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5227[32] 2[32]) }
          value = { defs={} expr=v5280[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5227[32] 1[32]) }
          value = { defs={} expr=v5279[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5227[32] }
          value = { defs={} expr=v5278[8] }
          flags = { rdonly }
0x80484bf:add    ebx, 0x0000120a
    registers:
        ax      = { defs={} expr=v5223[32] }
        cx      = { defs={} expr=v5224[32] }
        dx      = { defs={} expr=v5225[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]) }
        sp      = { defs={0x080484be} expr=(add[32] v5227[32] 4[32]) }
        bp      = { defs={} expr=v5228[32] }
        si      = { defs={} expr=v5229[32] }
        di      = { defs={} expr=v5230[32] }
        es      = { defs={} expr=v5231[16] }
        cs      = { defs={} expr=v5232[16] }
        ss      = { defs={} expr=v5233[16] }
        ds      = { defs={} expr=v5234[16] }
        fs      = { defs={} expr=v5235[16] }
        gs      = { defs={} expr=v5236[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v5238[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v5240[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v5242[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32])) }
        tf      = { defs={} expr=v5245[1] }
        if      = { defs={} expr=v5246[1] }
        df      = { defs={} expr=v5247[1] }
        of      = { defs={0x080484be,0x080484bf} expr=0[1] }
        iopl0   = { defs={} expr=v5249[1] }
        iopl1   = { defs={} expr=v5250[1] }
        nt      = { defs={} expr=v5251[1] }
        ?15     = { defs={} expr=v5252[1] }
        rf      = { defs={} expr=v5253[1] }
        vm      = { defs={} expr=v5254[1] }
        ac      = { defs={} expr=v5255[1] }
        vif     = { defs={} expr=v5256[1] }
        vip     = { defs={} expr=v5257[1] }
        id      = { defs={} expr=v5258[1] }
        ?22     = { defs={} expr=v5259[1] }
        ?23     = { defs={} expr=v5260[1] }
        ?24     = { defs={} expr=v5261[1] }
        ?25     = { defs={} expr=v5262[1] }
        ?26     = { defs={} expr=v5263[1] }
        ?27     = { defs={} expr=v5264[1] }
        ?28     = { defs={} expr=v5265[1] }
        ?29     = { defs={} expr=v5266[1] }
        ?30     = { defs={} expr=v5267[1] }
        ?31     = { defs={} expr=v5268[1] }
        ip      = { defs={0x080484be,0x080484bf} expr=0x080484c5[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5227[32] 3[32]) }
          value = { defs={} expr=v5281[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5227[32] 2[32]) }
          value = { defs={} expr=v5280[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5227[32] 1[32]) }
          value = { defs={} expr=v5279[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5227[32] }
          value = { defs={} expr=v5278[8] }
          flags = { rdonly }
0x80484c5:call   0x080482c8<_init>
    registers:
        ax      = { defs={} expr=v5223[32] }
        cx      = { defs={} expr=v5224[32] }
        dx      = { defs={} expr=v5225[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]) }
        sp      = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v5227[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v5228[32] }
        si      = { defs={} expr=v5229[32] }
        di      = { defs={} expr=v5230[32] }
        es      = { defs={} expr=v5231[16] }
        cs      = { defs={} expr=v5232[16] }
        ss      = { defs={} expr=v5233[16] }
        ds      = { defs={} expr=v5234[16] }
        fs      = { defs={} expr=v5235[16] }
        gs      = { defs={} expr=v5236[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v5238[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v5240[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v5242[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5281[8]))) 4618[32])) }
        tf      = { defs={} expr=v5245[1] }
        if      = { defs={} expr=v5246[1] }
        df      = { defs={} expr=v5247[1] }
        of      = { defs={0x080484be,0x080484bf} expr=0[1] }
        iopl0   = { defs={} expr=v5249[1] }
        iopl1   = { defs={} expr=v5250[1] }
        nt      = { defs={} expr=v5251[1] }
        ?15     = { defs={} expr=v5252[1] }
        rf      = { defs={} expr=v5253[1] }
        vm      = { defs={} expr=v5254[1] }
        ac      = { defs={} expr=v5255[1] }
        vif     = { defs={} expr=v5256[1] }
        vip     = { defs={} expr=v5257[1] }
        id      = { defs={} expr=v5258[1] }
        ?22     = { defs={} expr=v5259[1] }
        ?23     = { defs={} expr=v5260[1] }
        ?24     = { defs={} expr=v5261[1] }
        ?25     = { defs={} expr=v5262[1] }
        ?26     = { defs={} expr=v5263[1] }
        ?27     = { defs={} expr=v5264[1] }
        ?28     = { defs={} expr=v5265[1] }
        ?29     = { defs={} expr=v5266[1] }
        ?30     = { defs={} expr=v5267[1] }
        ?31     = { defs={} expr=v5268[1] }
        ip      = { defs={0x080484c5} expr=0x080482c8[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5227[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484be,0x080484bf,0x080484c5} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5227[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484be,0x080484bf,0x080484c5} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5227[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484be,0x080484bf,0x080484c5} expr=-124[8] }
          flags = { }
        address = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v5227[32] 4[32]) -4[32]) }
          value = { defs={0x080484be,0x080484bf,0x080484c5} expr=-54[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5227[32] 3[32]) }
          value = { defs={} expr=v5281[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5227[32] 2[32]) }
          value = { defs={} expr=v5280[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5227[32] 1[32]) }
          value = { defs={} expr=v5279[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5227[32] }
          value = { defs={} expr=v5278[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v5398[32] -224[32]) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={} expr=v5397[32] }
        bx      = { defs={} expr=v5398[32] }
        sp      = { defs={} expr=v5399[32] }
        bp      = { defs={} expr=v5400[32] }
        si      = { defs={} expr=v5401[32] }
        di      = { defs={} expr=v5402[32] }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={} expr=v5409[1] }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={} expr=v5411[1] }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={} expr=v5413[1] }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={} expr=v5415[1] }
        sf      = { defs={} expr=v5416[1] }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={} expr=v5420[1] }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca} expr=0x080484d0[32] }
    memory:
    init mem:
0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v5398[32] -224[32]) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5398[32] -224[32]) }
        bx      = { defs={} expr=v5398[32] }
        sp      = { defs={} expr=v5399[32] }
        bp      = { defs={} expr=v5400[32] }
        si      = { defs={} expr=v5401[32] }
        di      = { defs={} expr=v5402[32] }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={} expr=v5409[1] }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={} expr=v5411[1] }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={} expr=v5413[1] }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={} expr=v5415[1] }
        sf      = { defs={} expr=v5416[1] }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={} expr=v5420[1] }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca,0x080484d0} expr=0x080484d6[32] }
    memory:
    init mem:
0x80484d6:sub    eax, edx
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5398[32] -224[32]) }
        bx      = { defs={} expr=v5398[32] }
        sp      = { defs={} expr=v5399[32] }
        bp      = { defs={} expr=v5400[32] }
        si      = { defs={} expr=v5401[32] }
        di      = { defs={} expr=v5402[32] }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5398[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5398[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5398[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5398[32] -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=1[1] }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5398[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5398[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5398[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5398[32] -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(zerop[1] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))) }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=0[1] }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=0x080484d8[32] }
    memory:
    init mem:
0x80484d8:sar    eax, 0x02
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5398[32] -224[32]) }
        bx      = { defs={} expr=v5398[32] }
        sp      = { defs={} expr=v5399[32] }
        bp      = { defs={} expr=v5400[32] }
        si      = { defs={} expr=v5401[32] }
        di      = { defs={} expr=v5402[32] }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=1[1] }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={0x080484d8} expr=v5522[1] }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={0x080484d8} expr=v5537[1] }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=0x080484db[32] }
    memory:
    init mem:
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5398[32] -224[32]) }
        bx      = { defs={} expr=v5398[32] }
        sp      = { defs={} expr=v5399[32] }
        bp      = { defs={} expr=v5400[32] }
        si      = { defs={} expr=v5401[32] }
        di      = { defs={} expr=v5402[32] }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=1[1] }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={0x080484d8} expr=v5522[1] }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={0x080484d8} expr=v5537[1] }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=0x080484de[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 3[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 2[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 1[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5400[32] -16[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484de:jne    0x080484f0<<StaticData@0x080484e8>+8>
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5398[32] -224[32]) }
        bx      = { defs={} expr=v5398[32] }
        sp      = { defs={} expr=v5399[32] }
        bp      = { defs={} expr=v5400[32] }
        si      = { defs={} expr=v5401[32] }
        di      = { defs={} expr=v5402[32] }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=1[1] }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={0x080484d8} expr=v5522[1] }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={0x080484d8} expr=v5537[1] }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de} expr=0x080484e0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 3[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 2[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 1[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5400[32] -16[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484e0:add    esp, 0x0c
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5398[32] -224[32]) }
        bx      = { defs={} expr=v5398[32] }
        sp      = { defs={0x080484e0} expr=(add[32] v5399[32] 12[32]) }
        bp      = { defs={} expr=v5400[32] }
        si      = { defs={} expr=v5401[32] }
        di      = { defs={} expr=v5402[32] }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5399[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5399[32] 12[32])) }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0} expr=0x080484e3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 3[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 2[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 1[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5400[32] -16[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484e3:pop    ebx
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5398[32] -224[32]) }
        bx      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5649[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5399[32] 12[32]) v5648[8]) (add[32] v5399[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5651[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 1[32]) v5650[8]) (add[32] (add[32] v5399[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5653[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 2[32]) v5652[8]) (add[32] (add[32] v5399[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5655[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 3[32]) v5654[8]) (add[32] (add[32] v5399[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v5399[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v5400[32] }
        si      = { defs={} expr=v5401[32] }
        di      = { defs={} expr=v5402[32] }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5399[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5399[32] 12[32])) }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3} expr=0x080484e4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 3[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 2[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 1[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5400[32] -16[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5654[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5652[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5650[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5399[32] 12[32]) }
          value = { defs={} expr=v5648[8] }
          flags = { rdonly }
0x80484e4:pop    esi
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5398[32] -224[32]) }
        bx      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5649[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5399[32] 12[32]) v5648[8]) (add[32] v5399[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5651[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 1[32]) v5650[8]) (add[32] (add[32] v5399[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5653[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 2[32]) v5652[8]) (add[32] (add[32] v5399[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5655[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 3[32]) v5654[8]) (add[32] (add[32] v5399[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v5400[32] }
        si      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5670[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 4[32]) v5669[8]) (add[32] (add[32] v5399[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5672[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]) v5671[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5674[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]) v5673[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5676[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]) v5675[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={} expr=v5402[32] }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5399[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5399[32] 12[32])) }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3,0x080484e4} expr=0x080484e5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 3[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 2[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 1[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5400[32] -16[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5675[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5673[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5671[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5399[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5669[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5654[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5652[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5650[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5399[32] 12[32]) }
          value = { defs={} expr=v5648[8] }
          flags = { rdonly }
0x80484e5:pop    edi
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5398[32] -224[32]) }
        bx      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5649[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5399[32] 12[32]) v5648[8]) (add[32] v5399[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5651[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 1[32]) v5650[8]) (add[32] (add[32] v5399[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5653[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 2[32]) v5652[8]) (add[32] (add[32] v5399[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5655[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 3[32]) v5654[8]) (add[32] (add[32] v5399[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v5400[32] }
        si      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5670[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 4[32]) v5669[8]) (add[32] (add[32] v5399[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5672[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]) v5671[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5674[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]) v5673[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5676[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]) v5675[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5691[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) v5690[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5693[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 1[32]) v5692[8]) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5695[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 2[32]) v5694[8]) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5697[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 3[32]) v5696[8]) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 3[32]))))) }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5399[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5399[32] 12[32])) }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=0x080484e6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 3[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 2[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 1[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5400[32] -16[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5696[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5694[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5692[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5690[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5675[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5673[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5671[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5399[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5669[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5654[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5652[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5650[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5399[32] 12[32]) }
          value = { defs={} expr=v5648[8] }
          flags = { rdonly }
0x80484e6:pop    ebp
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5398[32] -224[32]) }
        bx      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5649[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5399[32] 12[32]) v5648[8]) (add[32] v5399[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5651[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 1[32]) v5650[8]) (add[32] (add[32] v5399[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5653[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 2[32]) v5652[8]) (add[32] (add[32] v5399[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5655[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 3[32]) v5654[8]) (add[32] (add[32] v5399[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5712[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) v5711[8]) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5714[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) v5713[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5716[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) v5715[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5718[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) v5717[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]))))) }
        si      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5670[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 4[32]) v5669[8]) (add[32] (add[32] v5399[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5672[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]) v5671[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5674[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]) v5673[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5676[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]) v5675[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5691[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) v5690[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5693[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 1[32]) v5692[8]) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5695[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 2[32]) v5694[8]) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5697[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 3[32]) v5696[8]) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 3[32]))))) }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5399[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5399[32] 12[32])) }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=0x080484e7[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 3[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 2[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 1[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5400[32] -16[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5715[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5713[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5711[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5696[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5694[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5692[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5690[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5675[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5673[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5671[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5399[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5669[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5654[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5652[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5650[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5399[32] 12[32]) }
          value = { defs={} expr=v5648[8] }
          flags = { rdonly }
0x80484e7:ret    
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5396[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5398[32] -224[32]) }
        bx      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5649[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5399[32] 12[32]) v5648[8]) (add[32] v5399[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5651[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 1[32]) v5650[8]) (add[32] (add[32] v5399[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5653[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 2[32]) v5652[8]) (add[32] (add[32] v5399[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5655[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 3[32]) v5654[8]) (add[32] (add[32] v5399[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5712[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) v5711[8]) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5714[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) v5713[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5716[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) v5715[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5718[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) v5717[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]))))) }
        si      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5670[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5399[32] 12[32]) 4[32]) v5669[8]) (add[32] (add[32] v5399[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5672[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]) v5671[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5674[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]) v5673[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5676[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]) v5675[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5691[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) v5690[8]) (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5693[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 1[32]) v5692[8]) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5695[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 2[32]) v5694[8]) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5697[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 3[32]) v5696[8]) (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 3[32]))))) }
        es      = { defs={} expr=v5403[16] }
        cs      = { defs={} expr=v5404[16] }
        ss      = { defs={} expr=v5405[16] }
        ds      = { defs={} expr=v5406[16] }
        fs      = { defs={} expr=v5407[16] }
        gs      = { defs={} expr=v5408[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5410[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5399[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5412[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5414[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5399[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5399[32] 12[32])) }
        tf      = { defs={} expr=v5417[1] }
        if      = { defs={} expr=v5418[1] }
        df      = { defs={} expr=v5419[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5399[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5399[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5421[1] }
        iopl1   = { defs={} expr=v5422[1] }
        nt      = { defs={} expr=v5423[1] }
        ?15     = { defs={} expr=v5424[1] }
        rf      = { defs={} expr=v5425[1] }
        vm      = { defs={} expr=v5426[1] }
        ac      = { defs={} expr=v5427[1] }
        vif     = { defs={} expr=v5428[1] }
        vip     = { defs={} expr=v5429[1] }
        id      = { defs={} expr=v5430[1] }
        ?22     = { defs={} expr=v5431[1] }
        ?23     = { defs={} expr=v5432[1] }
        ?24     = { defs={} expr=v5433[1] }
        ?25     = { defs={} expr=v5434[1] }
        ?26     = { defs={} expr=v5435[1] }
        ?27     = { defs={} expr=v5436[1] }
        ?28     = { defs={} expr=v5437[1] }
        ?29     = { defs={} expr=v5438[1] }
        ?30     = { defs={} expr=v5439[1] }
        ?31     = { defs={} expr=v5440[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5733[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) v5732[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5735[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) v5734[8]) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5737[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) v5736[8]) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5739[8] (add[32] (add[32] v5400[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] v5400[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] v5400[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) v5738[8]) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]))))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 3[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 2[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5400[32] -16[32]) 1[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5400[32] -16[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5398[32] -224[32]) (add[32] (invert[32] (add[32] v5398[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5738[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5736[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5734[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5732[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5715[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5713[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5711[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5696[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5694[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5692[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5690[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5675[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5673[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5399[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5671[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5399[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5669[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5654[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5652[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5399[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5650[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5399[32] 12[32]) }
          value = { defs={} expr=v5648[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048520:push   ebp
    registers:
        ax      = { defs={} expr=v5794[32] }
        cx      = { defs={} expr=v5795[32] }
        dx      = { defs={} expr=v5796[32] }
        bx      = { defs={} expr=v5797[32] }
        sp      = { defs={0x08048520} expr=(add[32] v5798[32] -4[32]) }
        bp      = { defs={} expr=v5799[32] }
        si      = { defs={} expr=v5800[32] }
        di      = { defs={} expr=v5801[32] }
        es      = { defs={} expr=v5802[16] }
        cs      = { defs={} expr=v5803[16] }
        ss      = { defs={} expr=v5804[16] }
        ds      = { defs={} expr=v5805[16] }
        fs      = { defs={} expr=v5806[16] }
        gs      = { defs={} expr=v5807[16] }
        cf      = { defs={} expr=v5808[1] }
        ?1      = { defs={} expr=v5809[1] }
        pf      = { defs={} expr=v5810[1] }
        ?3      = { defs={} expr=v5811[1] }
        af      = { defs={} expr=v5812[1] }
        ?5      = { defs={} expr=v5813[1] }
        zf      = { defs={} expr=v5814[1] }
        sf      = { defs={} expr=v5815[1] }
        tf      = { defs={} expr=v5816[1] }
        if      = { defs={} expr=v5817[1] }
        df      = { defs={} expr=v5818[1] }
        of      = { defs={} expr=v5819[1] }
        iopl0   = { defs={} expr=v5820[1] }
        iopl1   = { defs={} expr=v5821[1] }
        nt      = { defs={} expr=v5822[1] }
        ?15     = { defs={} expr=v5823[1] }
        rf      = { defs={} expr=v5824[1] }
        vm      = { defs={} expr=v5825[1] }
        ac      = { defs={} expr=v5826[1] }
        vif     = { defs={} expr=v5827[1] }
        vip     = { defs={} expr=v5828[1] }
        id      = { defs={} expr=v5829[1] }
        ?22     = { defs={} expr=v5830[1] }
        ?23     = { defs={} expr=v5831[1] }
        ?24     = { defs={} expr=v5832[1] }
        ?25     = { defs={} expr=v5833[1] }
        ?26     = { defs={} expr=v5834[1] }
        ?27     = { defs={} expr=v5835[1] }
        ?28     = { defs={} expr=v5836[1] }
        ?29     = { defs={} expr=v5837[1] }
        ?30     = { defs={} expr=v5838[1] }
        ?31     = { defs={} expr=v5839[1] }
        ip      = { defs={0x08048520} expr=0x08048521[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5799[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5798[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5799[32]) }
          flags = { }
    init mem:
0x8048521:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v5794[32] }
        cx      = { defs={} expr=v5795[32] }
        dx      = { defs={} expr=v5796[32] }
        bx      = { defs={} expr=v5797[32] }
        sp      = { defs={0x08048520} expr=(add[32] v5798[32] -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5798[32] -4[32]) }
        si      = { defs={} expr=v5800[32] }
        di      = { defs={} expr=v5801[32] }
        es      = { defs={} expr=v5802[16] }
        cs      = { defs={} expr=v5803[16] }
        ss      = { defs={} expr=v5804[16] }
        ds      = { defs={} expr=v5805[16] }
        fs      = { defs={} expr=v5806[16] }
        gs      = { defs={} expr=v5807[16] }
        cf      = { defs={} expr=v5808[1] }
        ?1      = { defs={} expr=v5809[1] }
        pf      = { defs={} expr=v5810[1] }
        ?3      = { defs={} expr=v5811[1] }
        af      = { defs={} expr=v5812[1] }
        ?5      = { defs={} expr=v5813[1] }
        zf      = { defs={} expr=v5814[1] }
        sf      = { defs={} expr=v5815[1] }
        tf      = { defs={} expr=v5816[1] }
        if      = { defs={} expr=v5817[1] }
        df      = { defs={} expr=v5818[1] }
        of      = { defs={} expr=v5819[1] }
        iopl0   = { defs={} expr=v5820[1] }
        iopl1   = { defs={} expr=v5821[1] }
        nt      = { defs={} expr=v5822[1] }
        ?15     = { defs={} expr=v5823[1] }
        rf      = { defs={} expr=v5824[1] }
        vm      = { defs={} expr=v5825[1] }
        ac      = { defs={} expr=v5826[1] }
        vif     = { defs={} expr=v5827[1] }
        vip     = { defs={} expr=v5828[1] }
        id      = { defs={} expr=v5829[1] }
        ?22     = { defs={} expr=v5830[1] }
        ?23     = { defs={} expr=v5831[1] }
        ?24     = { defs={} expr=v5832[1] }
        ?25     = { defs={} expr=v5833[1] }
        ?26     = { defs={} expr=v5834[1] }
        ?27     = { defs={} expr=v5835[1] }
        ?28     = { defs={} expr=v5836[1] }
        ?29     = { defs={} expr=v5837[1] }
        ?30     = { defs={} expr=v5838[1] }
        ?31     = { defs={} expr=v5839[1] }
        ip      = { defs={0x08048520,0x08048521} expr=0x08048523[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5799[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5798[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5799[32]) }
          flags = { }
    init mem:
0x8048523:push   edi
    registers:
        ax      = { defs={} expr=v5794[32] }
        cx      = { defs={} expr=v5795[32] }
        dx      = { defs={} expr=v5796[32] }
        bx      = { defs={} expr=v5797[32] }
        sp      = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5798[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5798[32] -4[32]) }
        si      = { defs={} expr=v5800[32] }
        di      = { defs={} expr=v5801[32] }
        es      = { defs={} expr=v5802[16] }
        cs      = { defs={} expr=v5803[16] }
        ss      = { defs={} expr=v5804[16] }
        ds      = { defs={} expr=v5805[16] }
        fs      = { defs={} expr=v5806[16] }
        gs      = { defs={} expr=v5807[16] }
        cf      = { defs={} expr=v5808[1] }
        ?1      = { defs={} expr=v5809[1] }
        pf      = { defs={} expr=v5810[1] }
        ?3      = { defs={} expr=v5811[1] }
        af      = { defs={} expr=v5812[1] }
        ?5      = { defs={} expr=v5813[1] }
        zf      = { defs={} expr=v5814[1] }
        sf      = { defs={} expr=v5815[1] }
        tf      = { defs={} expr=v5816[1] }
        if      = { defs={} expr=v5817[1] }
        df      = { defs={} expr=v5818[1] }
        of      = { defs={} expr=v5819[1] }
        iopl0   = { defs={} expr=v5820[1] }
        iopl1   = { defs={} expr=v5821[1] }
        nt      = { defs={} expr=v5822[1] }
        ?15     = { defs={} expr=v5823[1] }
        rf      = { defs={} expr=v5824[1] }
        vm      = { defs={} expr=v5825[1] }
        ac      = { defs={} expr=v5826[1] }
        vif     = { defs={} expr=v5827[1] }
        vip     = { defs={} expr=v5828[1] }
        id      = { defs={} expr=v5829[1] }
        ?22     = { defs={} expr=v5830[1] }
        ?23     = { defs={} expr=v5831[1] }
        ?24     = { defs={} expr=v5832[1] }
        ?25     = { defs={} expr=v5833[1] }
        ?26     = { defs={} expr=v5834[1] }
        ?27     = { defs={} expr=v5835[1] }
        ?28     = { defs={} expr=v5836[1] }
        ?29     = { defs={} expr=v5837[1] }
        ?30     = { defs={} expr=v5838[1] }
        ?31     = { defs={} expr=v5839[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523} expr=0x08048524[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048523} expr=(extract[8] 24[32] 32[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048523} expr=(extract[8] 16[32] 24[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048523} expr=(extract[8] 8[32] 16[32] v5801[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5798[32] -4[32]) -4[32]) }
          value = { defs={0x08048523} expr=(extract[8] 0[32] 8[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5799[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5798[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5799[32]) }
          flags = { }
    init mem:
0x8048524:push   esi
    registers:
        ax      = { defs={} expr=v5794[32] }
        cx      = { defs={} expr=v5795[32] }
        dx      = { defs={} expr=v5796[32] }
        bx      = { defs={} expr=v5797[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5798[32] -4[32]) }
        si      = { defs={} expr=v5800[32] }
        di      = { defs={} expr=v5801[32] }
        es      = { defs={} expr=v5802[16] }
        cs      = { defs={} expr=v5803[16] }
        ss      = { defs={} expr=v5804[16] }
        ds      = { defs={} expr=v5805[16] }
        fs      = { defs={} expr=v5806[16] }
        gs      = { defs={} expr=v5807[16] }
        cf      = { defs={} expr=v5808[1] }
        ?1      = { defs={} expr=v5809[1] }
        pf      = { defs={} expr=v5810[1] }
        ?3      = { defs={} expr=v5811[1] }
        af      = { defs={} expr=v5812[1] }
        ?5      = { defs={} expr=v5813[1] }
        zf      = { defs={} expr=v5814[1] }
        sf      = { defs={} expr=v5815[1] }
        tf      = { defs={} expr=v5816[1] }
        if      = { defs={} expr=v5817[1] }
        df      = { defs={} expr=v5818[1] }
        of      = { defs={} expr=v5819[1] }
        iopl0   = { defs={} expr=v5820[1] }
        iopl1   = { defs={} expr=v5821[1] }
        nt      = { defs={} expr=v5822[1] }
        ?15     = { defs={} expr=v5823[1] }
        rf      = { defs={} expr=v5824[1] }
        vm      = { defs={} expr=v5825[1] }
        ac      = { defs={} expr=v5826[1] }
        vif     = { defs={} expr=v5827[1] }
        vip     = { defs={} expr=v5828[1] }
        id      = { defs={} expr=v5829[1] }
        ?22     = { defs={} expr=v5830[1] }
        ?23     = { defs={} expr=v5831[1] }
        ?24     = { defs={} expr=v5832[1] }
        ?25     = { defs={} expr=v5833[1] }
        ?26     = { defs={} expr=v5834[1] }
        ?27     = { defs={} expr=v5835[1] }
        ?28     = { defs={} expr=v5836[1] }
        ?29     = { defs={} expr=v5837[1] }
        ?30     = { defs={} expr=v5838[1] }
        ?31     = { defs={} expr=v5839[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524} expr=0x08048525[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048524} expr=(extract[8] 24[32] 32[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048524} expr=(extract[8] 16[32] 24[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048524} expr=(extract[8] 8[32] 16[32] v5800[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048524} expr=(extract[8] 0[32] 8[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048523} expr=(extract[8] 24[32] 32[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048523} expr=(extract[8] 16[32] 24[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048523} expr=(extract[8] 8[32] 16[32] v5801[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5798[32] -4[32]) -4[32]) }
          value = { defs={0x08048523} expr=(extract[8] 0[32] 8[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5799[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5798[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5799[32]) }
          flags = { }
    init mem:
0x8048525:push   ebx
    registers:
        ax      = { defs={} expr=v5794[32] }
        cx      = { defs={} expr=v5795[32] }
        dx      = { defs={} expr=v5796[32] }
        bx      = { defs={} expr=v5797[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5798[32] -4[32]) }
        si      = { defs={} expr=v5800[32] }
        di      = { defs={} expr=v5801[32] }
        es      = { defs={} expr=v5802[16] }
        cs      = { defs={} expr=v5803[16] }
        ss      = { defs={} expr=v5804[16] }
        ds      = { defs={} expr=v5805[16] }
        fs      = { defs={} expr=v5806[16] }
        gs      = { defs={} expr=v5807[16] }
        cf      = { defs={} expr=v5808[1] }
        ?1      = { defs={} expr=v5809[1] }
        pf      = { defs={} expr=v5810[1] }
        ?3      = { defs={} expr=v5811[1] }
        af      = { defs={} expr=v5812[1] }
        ?5      = { defs={} expr=v5813[1] }
        zf      = { defs={} expr=v5814[1] }
        sf      = { defs={} expr=v5815[1] }
        tf      = { defs={} expr=v5816[1] }
        if      = { defs={} expr=v5817[1] }
        df      = { defs={} expr=v5818[1] }
        of      = { defs={} expr=v5819[1] }
        iopl0   = { defs={} expr=v5820[1] }
        iopl1   = { defs={} expr=v5821[1] }
        nt      = { defs={} expr=v5822[1] }
        ?15     = { defs={} expr=v5823[1] }
        rf      = { defs={} expr=v5824[1] }
        vm      = { defs={} expr=v5825[1] }
        ac      = { defs={} expr=v5826[1] }
        vif     = { defs={} expr=v5827[1] }
        vip     = { defs={} expr=v5828[1] }
        id      = { defs={} expr=v5829[1] }
        ?22     = { defs={} expr=v5830[1] }
        ?23     = { defs={} expr=v5831[1] }
        ?24     = { defs={} expr=v5832[1] }
        ?25     = { defs={} expr=v5833[1] }
        ?26     = { defs={} expr=v5834[1] }
        ?27     = { defs={} expr=v5835[1] }
        ?28     = { defs={} expr=v5836[1] }
        ?29     = { defs={} expr=v5837[1] }
        ?30     = { defs={} expr=v5838[1] }
        ?31     = { defs={} expr=v5839[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525} expr=0x08048526[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048525} expr=(extract[8] 24[32] 32[32] v5797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048525} expr=(extract[8] 16[32] 24[32] v5797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048525} expr=(extract[8] 8[32] 16[32] v5797[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048525} expr=(extract[8] 0[32] 8[32] v5797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048524} expr=(extract[8] 24[32] 32[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048524} expr=(extract[8] 16[32] 24[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048524} expr=(extract[8] 8[32] 16[32] v5800[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048524} expr=(extract[8] 0[32] 8[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048523} expr=(extract[8] 24[32] 32[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048523} expr=(extract[8] 16[32] 24[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048523} expr=(extract[8] 8[32] 16[32] v5801[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5798[32] -4[32]) -4[32]) }
          value = { defs={0x08048523} expr=(extract[8] 0[32] 8[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5799[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5798[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5799[32]) }
          flags = { }
    init mem:
0x8048526:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v5794[32] }
        cx      = { defs={} expr=v5795[32] }
        dx      = { defs={} expr=v5796[32] }
        bx      = { defs={} expr=v5797[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5798[32] -4[32]) }
        si      = { defs={} expr=v5800[32] }
        di      = { defs={} expr=v5801[32] }
        es      = { defs={} expr=v5802[16] }
        cs      = { defs={} expr=v5803[16] }
        ss      = { defs={} expr=v5804[16] }
        ds      = { defs={} expr=v5805[16] }
        fs      = { defs={} expr=v5806[16] }
        gs      = { defs={} expr=v5807[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5809[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5811[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5813[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5816[1] }
        if      = { defs={} expr=v5817[1] }
        df      = { defs={} expr=v5818[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5820[1] }
        iopl1   = { defs={} expr=v5821[1] }
        nt      = { defs={} expr=v5822[1] }
        ?15     = { defs={} expr=v5823[1] }
        rf      = { defs={} expr=v5824[1] }
        vm      = { defs={} expr=v5825[1] }
        ac      = { defs={} expr=v5826[1] }
        vif     = { defs={} expr=v5827[1] }
        vip     = { defs={} expr=v5828[1] }
        id      = { defs={} expr=v5829[1] }
        ?22     = { defs={} expr=v5830[1] }
        ?23     = { defs={} expr=v5831[1] }
        ?24     = { defs={} expr=v5832[1] }
        ?25     = { defs={} expr=v5833[1] }
        ?26     = { defs={} expr=v5834[1] }
        ?27     = { defs={} expr=v5835[1] }
        ?28     = { defs={} expr=v5836[1] }
        ?29     = { defs={} expr=v5837[1] }
        ?30     = { defs={} expr=v5838[1] }
        ?31     = { defs={} expr=v5839[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526} expr=0x08048529[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048525} expr=(extract[8] 24[32] 32[32] v5797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048525} expr=(extract[8] 16[32] 24[32] v5797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048525} expr=(extract[8] 8[32] 16[32] v5797[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048525} expr=(extract[8] 0[32] 8[32] v5797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048524} expr=(extract[8] 24[32] 32[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048524} expr=(extract[8] 16[32] 24[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048524} expr=(extract[8] 8[32] 16[32] v5800[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048524} expr=(extract[8] 0[32] 8[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048523} expr=(extract[8] 24[32] 32[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048523} expr=(extract[8] 16[32] 24[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048523} expr=(extract[8] 8[32] 16[32] v5801[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5798[32] -4[32]) -4[32]) }
          value = { defs={0x08048523} expr=(extract[8] 0[32] 8[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5799[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5798[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5799[32]) }
          flags = { }
    init mem:
0x8048529:call   0x0804852e<<Insn>>
    registers:
        ax      = { defs={} expr=v5794[32] }
        cx      = { defs={} expr=v5795[32] }
        dx      = { defs={} expr=v5796[32] }
        bx      = { defs={} expr=v5797[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5798[32] -4[32]) }
        si      = { defs={} expr=v5800[32] }
        di      = { defs={} expr=v5801[32] }
        es      = { defs={} expr=v5802[16] }
        cs      = { defs={} expr=v5803[16] }
        ss      = { defs={} expr=v5804[16] }
        ds      = { defs={} expr=v5805[16] }
        fs      = { defs={} expr=v5806[16] }
        gs      = { defs={} expr=v5807[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5809[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5811[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5813[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5816[1] }
        if      = { defs={} expr=v5817[1] }
        df      = { defs={} expr=v5818[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5820[1] }
        iopl1   = { defs={} expr=v5821[1] }
        nt      = { defs={} expr=v5822[1] }
        ?15     = { defs={} expr=v5823[1] }
        rf      = { defs={} expr=v5824[1] }
        vm      = { defs={} expr=v5825[1] }
        ac      = { defs={} expr=v5826[1] }
        vif     = { defs={} expr=v5827[1] }
        vip     = { defs={} expr=v5828[1] }
        id      = { defs={} expr=v5829[1] }
        ?22     = { defs={} expr=v5830[1] }
        ?23     = { defs={} expr=v5831[1] }
        ?24     = { defs={} expr=v5832[1] }
        ?25     = { defs={} expr=v5833[1] }
        ?26     = { defs={} expr=v5834[1] }
        ?27     = { defs={} expr=v5835[1] }
        ?28     = { defs={} expr=v5836[1] }
        ?29     = { defs={} expr=v5837[1] }
        ?30     = { defs={} expr=v5838[1] }
        ?31     = { defs={} expr=v5839[1] }
        ip      = { defs={0x08048529} expr=0x0804852e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=-123[8] }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048525} expr=(extract[8] 24[32] 32[32] v5797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048525} expr=(extract[8] 16[32] 24[32] v5797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048525} expr=(extract[8] 8[32] 16[32] v5797[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048525} expr=(extract[8] 0[32] 8[32] v5797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048524} expr=(extract[8] 24[32] 32[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048524} expr=(extract[8] 16[32] 24[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048524} expr=(extract[8] 8[32] 16[32] v5800[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048524} expr=(extract[8] 0[32] 8[32] v5800[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048523} expr=(extract[8] 24[32] 32[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048523} expr=(extract[8] 16[32] 24[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5798[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048523} expr=(extract[8] 8[32] 16[32] v5801[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5798[32] -4[32]) -4[32]) }
          value = { defs={0x08048523} expr=(extract[8] 0[32] 8[32] v5801[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5799[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5798[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5799[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5798[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5799[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804852e:pop    ebx
    registers:
        ax      = { defs={} expr=v6002[32] }
        cx      = { defs={} expr=v6003[32] }
        dx      = { defs={} expr=v6004[32] }
        bx      = { defs={0x0804852e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) }
        sp      = { defs={0x0804852e} expr=(add[32] v6006[32] 4[32]) }
        bp      = { defs={} expr=v6007[32] }
        si      = { defs={} expr=v6008[32] }
        di      = { defs={} expr=v6009[32] }
        es      = { defs={} expr=v6010[16] }
        cs      = { defs={} expr=v6011[16] }
        ss      = { defs={} expr=v6012[16] }
        ds      = { defs={} expr=v6013[16] }
        fs      = { defs={} expr=v6014[16] }
        gs      = { defs={} expr=v6015[16] }
        cf      = { defs={} expr=v6016[1] }
        ?1      = { defs={} expr=v6017[1] }
        pf      = { defs={} expr=v6018[1] }
        ?3      = { defs={} expr=v6019[1] }
        af      = { defs={} expr=v6020[1] }
        ?5      = { defs={} expr=v6021[1] }
        zf      = { defs={} expr=v6022[1] }
        sf      = { defs={} expr=v6023[1] }
        tf      = { defs={} expr=v6024[1] }
        if      = { defs={} expr=v6025[1] }
        df      = { defs={} expr=v6026[1] }
        of      = { defs={} expr=v6027[1] }
        iopl0   = { defs={} expr=v6028[1] }
        iopl1   = { defs={} expr=v6029[1] }
        nt      = { defs={} expr=v6030[1] }
        ?15     = { defs={} expr=v6031[1] }
        rf      = { defs={} expr=v6032[1] }
        vm      = { defs={} expr=v6033[1] }
        ac      = { defs={} expr=v6034[1] }
        vif     = { defs={} expr=v6035[1] }
        vip     = { defs={} expr=v6036[1] }
        id      = { defs={} expr=v6037[1] }
        ?22     = { defs={} expr=v6038[1] }
        ?23     = { defs={} expr=v6039[1] }
        ?24     = { defs={} expr=v6040[1] }
        ?25     = { defs={} expr=v6041[1] }
        ?26     = { defs={} expr=v6042[1] }
        ?27     = { defs={} expr=v6043[1] }
        ?28     = { defs={} expr=v6044[1] }
        ?29     = { defs={} expr=v6045[1] }
        ?30     = { defs={} expr=v6046[1] }
        ?31     = { defs={} expr=v6047[1] }
        ip      = { defs={0x0804852e} expr=0x0804852f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6006[32] 3[32]) }
          value = { defs={} expr=v6060[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 2[32]) }
          value = { defs={} expr=v6059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 1[32]) }
          value = { defs={} expr=v6058[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6006[32] }
          value = { defs={} expr=v6057[8] }
          flags = { rdonly }
0x804852f:add    ebx, 0x0000119a
    registers:
        ax      = { defs={} expr=v6002[32] }
        cx      = { defs={} expr=v6003[32] }
        dx      = { defs={} expr=v6004[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6006[32] 4[32]) }
        bp      = { defs={} expr=v6007[32] }
        si      = { defs={} expr=v6008[32] }
        di      = { defs={} expr=v6009[32] }
        es      = { defs={} expr=v6010[16] }
        cs      = { defs={} expr=v6011[16] }
        ss      = { defs={} expr=v6012[16] }
        ds      = { defs={} expr=v6013[16] }
        fs      = { defs={} expr=v6014[16] }
        gs      = { defs={} expr=v6015[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v6017[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v6019[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v6021[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])) }
        tf      = { defs={} expr=v6024[1] }
        if      = { defs={} expr=v6025[1] }
        df      = { defs={} expr=v6026[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=0[1] }
        iopl0   = { defs={} expr=v6028[1] }
        iopl1   = { defs={} expr=v6029[1] }
        nt      = { defs={} expr=v6030[1] }
        ?15     = { defs={} expr=v6031[1] }
        rf      = { defs={} expr=v6032[1] }
        vm      = { defs={} expr=v6033[1] }
        ac      = { defs={} expr=v6034[1] }
        vif     = { defs={} expr=v6035[1] }
        vip     = { defs={} expr=v6036[1] }
        id      = { defs={} expr=v6037[1] }
        ?22     = { defs={} expr=v6038[1] }
        ?23     = { defs={} expr=v6039[1] }
        ?24     = { defs={} expr=v6040[1] }
        ?25     = { defs={} expr=v6041[1] }
        ?26     = { defs={} expr=v6042[1] }
        ?27     = { defs={} expr=v6043[1] }
        ?28     = { defs={} expr=v6044[1] }
        ?29     = { defs={} expr=v6045[1] }
        ?30     = { defs={} expr=v6046[1] }
        ?31     = { defs={} expr=v6047[1] }
        ip      = { defs={0x0804852e,0x0804852f} expr=0x08048535[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6006[32] 3[32]) }
          value = { defs={} expr=v6060[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 2[32]) }
          value = { defs={} expr=v6059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 1[32]) }
          value = { defs={} expr=v6058[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6006[32] }
          value = { defs={} expr=v6057[8] }
          flags = { rdonly }
0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v6003[32] }
        dx      = { defs={} expr=v6004[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6006[32] 4[32]) }
        bp      = { defs={} expr=v6007[32] }
        si      = { defs={} expr=v6008[32] }
        di      = { defs={} expr=v6009[32] }
        es      = { defs={} expr=v6010[16] }
        cs      = { defs={} expr=v6011[16] }
        ss      = { defs={} expr=v6012[16] }
        ds      = { defs={} expr=v6013[16] }
        fs      = { defs={} expr=v6014[16] }
        gs      = { defs={} expr=v6015[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v6017[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v6019[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v6021[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])) }
        tf      = { defs={} expr=v6024[1] }
        if      = { defs={} expr=v6025[1] }
        df      = { defs={} expr=v6026[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=0[1] }
        iopl0   = { defs={} expr=v6028[1] }
        iopl1   = { defs={} expr=v6029[1] }
        nt      = { defs={} expr=v6030[1] }
        ?15     = { defs={} expr=v6031[1] }
        rf      = { defs={} expr=v6032[1] }
        vm      = { defs={} expr=v6033[1] }
        ac      = { defs={} expr=v6034[1] }
        vif     = { defs={} expr=v6035[1] }
        vip     = { defs={} expr=v6036[1] }
        id      = { defs={} expr=v6037[1] }
        ?22     = { defs={} expr=v6038[1] }
        ?23     = { defs={} expr=v6039[1] }
        ?24     = { defs={} expr=v6040[1] }
        ?25     = { defs={} expr=v6041[1] }
        ?26     = { defs={} expr=v6042[1] }
        ?27     = { defs={} expr=v6043[1] }
        ?28     = { defs={} expr=v6044[1] }
        ?29     = { defs={} expr=v6045[1] }
        ?30     = { defs={} expr=v6046[1] }
        ?31     = { defs={} expr=v6047[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535} expr=0x0804853b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6006[32] 3[32]) }
          value = { defs={} expr=v6060[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 2[32]) }
          value = { defs={} expr=v6059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 1[32]) }
          value = { defs={} expr=v6058[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6006[32] }
          value = { defs={} expr=v6057[8] }
          flags = { rdonly }
0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v6003[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6006[32] 4[32]) }
        bp      = { defs={} expr=v6007[32] }
        si      = { defs={} expr=v6008[32] }
        di      = { defs={} expr=v6009[32] }
        es      = { defs={} expr=v6010[16] }
        cs      = { defs={} expr=v6011[16] }
        ss      = { defs={} expr=v6012[16] }
        ds      = { defs={} expr=v6013[16] }
        fs      = { defs={} expr=v6014[16] }
        gs      = { defs={} expr=v6015[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v6017[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v6019[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v6021[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32])) }
        tf      = { defs={} expr=v6024[1] }
        if      = { defs={} expr=v6025[1] }
        df      = { defs={} expr=v6026[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=0[1] }
        iopl0   = { defs={} expr=v6028[1] }
        iopl1   = { defs={} expr=v6029[1] }
        nt      = { defs={} expr=v6030[1] }
        ?15     = { defs={} expr=v6031[1] }
        rf      = { defs={} expr=v6032[1] }
        vm      = { defs={} expr=v6033[1] }
        ac      = { defs={} expr=v6034[1] }
        vif     = { defs={} expr=v6035[1] }
        vip     = { defs={} expr=v6036[1] }
        id      = { defs={} expr=v6037[1] }
        ?22     = { defs={} expr=v6038[1] }
        ?23     = { defs={} expr=v6039[1] }
        ?24     = { defs={} expr=v6040[1] }
        ?25     = { defs={} expr=v6041[1] }
        ?26     = { defs={} expr=v6042[1] }
        ?27     = { defs={} expr=v6043[1] }
        ?28     = { defs={} expr=v6044[1] }
        ?29     = { defs={} expr=v6045[1] }
        ?30     = { defs={} expr=v6046[1] }
        ?31     = { defs={} expr=v6047[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b} expr=0x08048541[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6006[32] 3[32]) }
          value = { defs={} expr=v6060[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 2[32]) }
          value = { defs={} expr=v6059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 1[32]) }
          value = { defs={} expr=v6058[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6006[32] }
          value = { defs={} expr=v6057[8] }
          flags = { rdonly }
0x8048541:sub    eax, edx
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])) }
        cx      = { defs={} expr=v6003[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6006[32] 4[32]) }
        bp      = { defs={} expr=v6007[32] }
        si      = { defs={} expr=v6008[32] }
        di      = { defs={} expr=v6009[32] }
        es      = { defs={} expr=v6010[16] }
        cs      = { defs={} expr=v6011[16] }
        ss      = { defs={} expr=v6012[16] }
        ds      = { defs={} expr=v6013[16] }
        fs      = { defs={} expr=v6014[16] }
        gs      = { defs={} expr=v6015[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v6017[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=1[1] }
        ?3      = { defs={} expr=v6019[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v6021[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(zerop[1] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) }
        tf      = { defs={} expr=v6024[1] }
        if      = { defs={} expr=v6025[1] }
        df      = { defs={} expr=v6026[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=0[1] }
        iopl0   = { defs={} expr=v6028[1] }
        iopl1   = { defs={} expr=v6029[1] }
        nt      = { defs={} expr=v6030[1] }
        ?15     = { defs={} expr=v6031[1] }
        rf      = { defs={} expr=v6032[1] }
        vm      = { defs={} expr=v6033[1] }
        ac      = { defs={} expr=v6034[1] }
        vif     = { defs={} expr=v6035[1] }
        vip     = { defs={} expr=v6036[1] }
        id      = { defs={} expr=v6037[1] }
        ?22     = { defs={} expr=v6038[1] }
        ?23     = { defs={} expr=v6039[1] }
        ?24     = { defs={} expr=v6040[1] }
        ?25     = { defs={} expr=v6041[1] }
        ?26     = { defs={} expr=v6042[1] }
        ?27     = { defs={} expr=v6043[1] }
        ?28     = { defs={} expr=v6044[1] }
        ?29     = { defs={} expr=v6045[1] }
        ?30     = { defs={} expr=v6046[1] }
        ?31     = { defs={} expr=v6047[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=0x08048543[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6006[32] 3[32]) }
          value = { defs={} expr=v6060[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 2[32]) }
          value = { defs={} expr=v6059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 1[32]) }
          value = { defs={} expr=v6058[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6006[32] }
          value = { defs={} expr=v6057[8] }
          flags = { rdonly }
0x8048543:sar    eax, 0x02
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v6003[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6006[32] 4[32]) }
        bp      = { defs={} expr=v6007[32] }
        si      = { defs={} expr=v6008[32] }
        di      = { defs={} expr=v6009[32] }
        es      = { defs={} expr=v6010[16] }
        cs      = { defs={} expr=v6011[16] }
        ss      = { defs={} expr=v6012[16] }
        ds      = { defs={} expr=v6013[16] }
        fs      = { defs={} expr=v6014[16] }
        gs      = { defs={} expr=v6015[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v6017[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=1[1] }
        ?3      = { defs={} expr=v6019[1] }
        af      = { defs={0x08048543} expr=v6194[1] }
        ?5      = { defs={} expr=v6021[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v6024[1] }
        if      = { defs={} expr=v6025[1] }
        df      = { defs={} expr=v6026[1] }
        of      = { defs={0x08048543} expr=v6209[1] }
        iopl0   = { defs={} expr=v6028[1] }
        iopl1   = { defs={} expr=v6029[1] }
        nt      = { defs={} expr=v6030[1] }
        ?15     = { defs={} expr=v6031[1] }
        rf      = { defs={} expr=v6032[1] }
        vm      = { defs={} expr=v6033[1] }
        ac      = { defs={} expr=v6034[1] }
        vif     = { defs={} expr=v6035[1] }
        vip     = { defs={} expr=v6036[1] }
        id      = { defs={} expr=v6037[1] }
        ?22     = { defs={} expr=v6038[1] }
        ?23     = { defs={} expr=v6039[1] }
        ?24     = { defs={} expr=v6040[1] }
        ?25     = { defs={} expr=v6041[1] }
        ?26     = { defs={} expr=v6042[1] }
        ?27     = { defs={} expr=v6043[1] }
        ?28     = { defs={} expr=v6044[1] }
        ?29     = { defs={} expr=v6045[1] }
        ?30     = { defs={} expr=v6046[1] }
        ?31     = { defs={} expr=v6047[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=0x08048546[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6006[32] 3[32]) }
          value = { defs={} expr=v6060[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 2[32]) }
          value = { defs={} expr=v6059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 1[32]) }
          value = { defs={} expr=v6058[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6006[32] }
          value = { defs={} expr=v6057[8] }
          flags = { rdonly }
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v6003[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6006[32] 4[32]) }
        bp      = { defs={} expr=v6007[32] }
        si      = { defs={} expr=v6008[32] }
        di      = { defs={} expr=v6009[32] }
        es      = { defs={} expr=v6010[16] }
        cs      = { defs={} expr=v6011[16] }
        ss      = { defs={} expr=v6012[16] }
        ds      = { defs={} expr=v6013[16] }
        fs      = { defs={} expr=v6014[16] }
        gs      = { defs={} expr=v6015[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v6017[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=1[1] }
        ?3      = { defs={} expr=v6019[1] }
        af      = { defs={0x08048543} expr=v6194[1] }
        ?5      = { defs={} expr=v6021[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v6024[1] }
        if      = { defs={} expr=v6025[1] }
        df      = { defs={} expr=v6026[1] }
        of      = { defs={0x08048543} expr=v6209[1] }
        iopl0   = { defs={} expr=v6028[1] }
        iopl1   = { defs={} expr=v6029[1] }
        nt      = { defs={} expr=v6030[1] }
        ?15     = { defs={} expr=v6031[1] }
        rf      = { defs={} expr=v6032[1] }
        vm      = { defs={} expr=v6033[1] }
        ac      = { defs={} expr=v6034[1] }
        vif     = { defs={} expr=v6035[1] }
        vip     = { defs={} expr=v6036[1] }
        id      = { defs={} expr=v6037[1] }
        ?22     = { defs={} expr=v6038[1] }
        ?23     = { defs={} expr=v6039[1] }
        ?24     = { defs={} expr=v6040[1] }
        ?25     = { defs={} expr=v6041[1] }
        ?26     = { defs={} expr=v6042[1] }
        ?27     = { defs={} expr=v6043[1] }
        ?28     = { defs={} expr=v6044[1] }
        ?29     = { defs={} expr=v6045[1] }
        ?30     = { defs={} expr=v6046[1] }
        ?31     = { defs={} expr=v6047[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=0x08048549[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 3[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 2[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 1[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v6007[32] -16[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v6006[32] 3[32]) }
          value = { defs={} expr=v6060[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 2[32]) }
          value = { defs={} expr=v6059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 1[32]) }
          value = { defs={} expr=v6058[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6006[32] }
          value = { defs={} expr=v6057[8] }
          flags = { rdonly }
0x8048549:dec    eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v6003[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6006[32] 4[32]) }
        bp      = { defs={} expr=v6007[32] }
        si      = { defs={} expr=v6008[32] }
        di      = { defs={} expr=v6009[32] }
        es      = { defs={} expr=v6010[16] }
        cs      = { defs={} expr=v6011[16] }
        ss      = { defs={} expr=v6012[16] }
        ds      = { defs={} expr=v6013[16] }
        fs      = { defs={} expr=v6014[16] }
        gs      = { defs={} expr=v6015[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v6017[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=1[1] }
        ?3      = { defs={} expr=v6019[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=1[1] }
        ?5      = { defs={} expr=v6021[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        tf      = { defs={} expr=v6024[1] }
        if      = { defs={} expr=v6025[1] }
        df      = { defs={} expr=v6026[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=0[1] }
        iopl0   = { defs={} expr=v6028[1] }
        iopl1   = { defs={} expr=v6029[1] }
        nt      = { defs={} expr=v6030[1] }
        ?15     = { defs={} expr=v6031[1] }
        rf      = { defs={} expr=v6032[1] }
        vm      = { defs={} expr=v6033[1] }
        ac      = { defs={} expr=v6034[1] }
        vif     = { defs={} expr=v6035[1] }
        vip     = { defs={} expr=v6036[1] }
        id      = { defs={} expr=v6037[1] }
        ?22     = { defs={} expr=v6038[1] }
        ?23     = { defs={} expr=v6039[1] }
        ?24     = { defs={} expr=v6040[1] }
        ?25     = { defs={} expr=v6041[1] }
        ?26     = { defs={} expr=v6042[1] }
        ?27     = { defs={} expr=v6043[1] }
        ?28     = { defs={} expr=v6044[1] }
        ?29     = { defs={} expr=v6045[1] }
        ?30     = { defs={} expr=v6046[1] }
        ?31     = { defs={} expr=v6047[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549} expr=0x0804854a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 3[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 2[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 1[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v6007[32] -16[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v6006[32] 3[32]) }
          value = { defs={} expr=v6060[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 2[32]) }
          value = { defs={} expr=v6059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 1[32]) }
          value = { defs={} expr=v6058[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6006[32] }
          value = { defs={} expr=v6057[8] }
          flags = { rdonly }
0x804854a:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v6003[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6006[32] 4[32]) }
        bp      = { defs={} expr=v6007[32] }
        si      = { defs={} expr=v6008[32] }
        di      = { defs={} expr=v6009[32] }
        es      = { defs={} expr=v6010[16] }
        cs      = { defs={} expr=v6011[16] }
        ss      = { defs={} expr=v6012[16] }
        ds      = { defs={} expr=v6013[16] }
        fs      = { defs={} expr=v6014[16] }
        gs      = { defs={} expr=v6015[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v6017[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=1[1] }
        ?3      = { defs={} expr=v6019[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v6021[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v6024[1] }
        if      = { defs={} expr=v6025[1] }
        df      = { defs={} expr=v6026[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=0[1] }
        iopl0   = { defs={} expr=v6028[1] }
        iopl1   = { defs={} expr=v6029[1] }
        nt      = { defs={} expr=v6030[1] }
        ?15     = { defs={} expr=v6031[1] }
        rf      = { defs={} expr=v6032[1] }
        vm      = { defs={} expr=v6033[1] }
        ac      = { defs={} expr=v6034[1] }
        vif     = { defs={} expr=v6035[1] }
        vip     = { defs={} expr=v6036[1] }
        id      = { defs={} expr=v6037[1] }
        ?22     = { defs={} expr=v6038[1] }
        ?23     = { defs={} expr=v6039[1] }
        ?24     = { defs={} expr=v6040[1] }
        ?25     = { defs={} expr=v6041[1] }
        ?26     = { defs={} expr=v6042[1] }
        ?27     = { defs={} expr=v6043[1] }
        ?28     = { defs={} expr=v6044[1] }
        ?29     = { defs={} expr=v6045[1] }
        ?30     = { defs={} expr=v6046[1] }
        ?31     = { defs={} expr=v6047[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a} expr=0x0804854d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 3[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 2[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 1[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v6007[32] -16[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v6006[32] 3[32]) }
          value = { defs={} expr=v6060[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 2[32]) }
          value = { defs={} expr=v6059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 1[32]) }
          value = { defs={} expr=v6058[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6006[32] }
          value = { defs={} expr=v6057[8] }
          flags = { rdonly }
0x804854d:je     0x0804856b<<Insn>>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v6003[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6006[32] 4[32]) }
        bp      = { defs={} expr=v6007[32] }
        si      = { defs={} expr=v6008[32] }
        di      = { defs={} expr=v6009[32] }
        es      = { defs={} expr=v6010[16] }
        cs      = { defs={} expr=v6011[16] }
        ss      = { defs={} expr=v6012[16] }
        ds      = { defs={} expr=v6013[16] }
        fs      = { defs={} expr=v6014[16] }
        gs      = { defs={} expr=v6015[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v6017[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=1[1] }
        ?3      = { defs={} expr=v6019[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v6021[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v6024[1] }
        if      = { defs={} expr=v6025[1] }
        df      = { defs={} expr=v6026[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=0[1] }
        iopl0   = { defs={} expr=v6028[1] }
        iopl1   = { defs={} expr=v6029[1] }
        nt      = { defs={} expr=v6030[1] }
        ?15     = { defs={} expr=v6031[1] }
        rf      = { defs={} expr=v6032[1] }
        vm      = { defs={} expr=v6033[1] }
        ac      = { defs={} expr=v6034[1] }
        vif     = { defs={} expr=v6035[1] }
        vip     = { defs={} expr=v6036[1] }
        id      = { defs={} expr=v6037[1] }
        ?22     = { defs={} expr=v6038[1] }
        ?23     = { defs={} expr=v6039[1] }
        ?24     = { defs={} expr=v6040[1] }
        ?25     = { defs={} expr=v6041[1] }
        ?26     = { defs={} expr=v6042[1] }
        ?27     = { defs={} expr=v6043[1] }
        ?28     = { defs={} expr=v6044[1] }
        ?29     = { defs={} expr=v6045[1] }
        ?30     = { defs={} expr=v6046[1] }
        ?31     = { defs={} expr=v6047[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d} expr=0x0804856b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 3[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 2[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 1[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v6007[32] -16[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v6006[32] 3[32]) }
          value = { defs={} expr=v6060[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 2[32]) }
          value = { defs={} expr=v6059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 1[32]) }
          value = { defs={} expr=v6058[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6006[32] }
          value = { defs={} expr=v6057[8] }
          flags = { rdonly }
0x804856b:call   0x080485b0<_fini>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v6003[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) }
        sp      = { defs={0x0804852e,0x0804856b} expr=(add[32] (add[32] v6006[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v6007[32] }
        si      = { defs={} expr=v6008[32] }
        di      = { defs={} expr=v6009[32] }
        es      = { defs={} expr=v6010[16] }
        cs      = { defs={} expr=v6011[16] }
        ss      = { defs={} expr=v6012[16] }
        ds      = { defs={} expr=v6013[16] }
        fs      = { defs={} expr=v6014[16] }
        gs      = { defs={} expr=v6015[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v6017[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=1[1] }
        ?3      = { defs={} expr=v6019[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v6021[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v6024[1] }
        if      = { defs={} expr=v6025[1] }
        df      = { defs={} expr=v6026[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=0[1] }
        iopl0   = { defs={} expr=v6028[1] }
        iopl1   = { defs={} expr=v6029[1] }
        nt      = { defs={} expr=v6030[1] }
        ?15     = { defs={} expr=v6031[1] }
        rf      = { defs={} expr=v6032[1] }
        vm      = { defs={} expr=v6033[1] }
        ac      = { defs={} expr=v6034[1] }
        vif     = { defs={} expr=v6035[1] }
        vip     = { defs={} expr=v6036[1] }
        id      = { defs={} expr=v6037[1] }
        ?22     = { defs={} expr=v6038[1] }
        ?23     = { defs={} expr=v6039[1] }
        ?24     = { defs={} expr=v6040[1] }
        ?25     = { defs={} expr=v6041[1] }
        ?26     = { defs={} expr=v6042[1] }
        ?27     = { defs={} expr=v6043[1] }
        ?28     = { defs={} expr=v6044[1] }
        ?29     = { defs={} expr=v6045[1] }
        ?30     = { defs={} expr=v6046[1] }
        ?31     = { defs={} expr=v6047[1] }
        ip      = { defs={0x0804856b} expr=0x080485b0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6006[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d,0x0804856b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6006[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d,0x0804856b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6006[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d,0x0804856b} expr=-123[8] }
          flags = { }
        address = { defs={0x0804852e,0x0804856b} expr=(add[32] (add[32] v6006[32] 4[32]) -4[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d,0x0804856b} expr=112[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 3[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 2[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6007[32] -16[32]) 1[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v6007[32] -16[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6060[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v6006[32] 3[32]) }
          value = { defs={} expr=v6060[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 2[32]) }
          value = { defs={} expr=v6059[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6006[32] 1[32]) }
          value = { defs={} expr=v6058[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6006[32] }
          value = { defs={} expr=v6057[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804854f:lea    esi, [edx + eax*0x04]
    registers:
        ax      = { defs={} expr=v6421[32] }
        cx      = { defs={} expr=v6422[32] }
        dx      = { defs={} expr=v6423[32] }
        bx      = { defs={} expr=v6424[32] }
        sp      = { defs={} expr=v6425[32] }
        bp      = { defs={} expr=v6426[32] }
        si      = { defs={0x0804854f} expr=(add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) }
        di      = { defs={} expr=v6428[32] }
        es      = { defs={} expr=v6429[16] }
        cs      = { defs={} expr=v6430[16] }
        ss      = { defs={} expr=v6431[16] }
        ds      = { defs={} expr=v6432[16] }
        fs      = { defs={} expr=v6433[16] }
        gs      = { defs={} expr=v6434[16] }
        cf      = { defs={} expr=v6435[1] }
        ?1      = { defs={} expr=v6436[1] }
        pf      = { defs={} expr=v6437[1] }
        ?3      = { defs={} expr=v6438[1] }
        af      = { defs={} expr=v6439[1] }
        ?5      = { defs={} expr=v6440[1] }
        zf      = { defs={} expr=v6441[1] }
        sf      = { defs={} expr=v6442[1] }
        tf      = { defs={} expr=v6443[1] }
        if      = { defs={} expr=v6444[1] }
        df      = { defs={} expr=v6445[1] }
        of      = { defs={} expr=v6446[1] }
        iopl0   = { defs={} expr=v6447[1] }
        iopl1   = { defs={} expr=v6448[1] }
        nt      = { defs={} expr=v6449[1] }
        ?15     = { defs={} expr=v6450[1] }
        rf      = { defs={} expr=v6451[1] }
        vm      = { defs={} expr=v6452[1] }
        ac      = { defs={} expr=v6453[1] }
        vif     = { defs={} expr=v6454[1] }
        vip     = { defs={} expr=v6455[1] }
        id      = { defs={} expr=v6456[1] }
        ?22     = { defs={} expr=v6457[1] }
        ?23     = { defs={} expr=v6458[1] }
        ?24     = { defs={} expr=v6459[1] }
        ?25     = { defs={} expr=v6460[1] }
        ?26     = { defs={} expr=v6461[1] }
        ?27     = { defs={} expr=v6462[1] }
        ?28     = { defs={} expr=v6463[1] }
        ?29     = { defs={} expr=v6464[1] }
        ?30     = { defs={} expr=v6465[1] }
        ?31     = { defs={} expr=v6466[1] }
        ip      = { defs={0x0804854f} expr=0x08048552[32] }
    memory:
    init mem:
0x8048552:xor    edi, edi
    registers:
        ax      = { defs={} expr=v6421[32] }
        cx      = { defs={} expr=v6422[32] }
        dx      = { defs={} expr=v6423[32] }
        bx      = { defs={} expr=v6424[32] }
        sp      = { defs={} expr=v6425[32] }
        bp      = { defs={} expr=v6426[32] }
        si      = { defs={0x0804854f} expr=(add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v6429[16] }
        cs      = { defs={} expr=v6430[16] }
        ss      = { defs={} expr=v6431[16] }
        ds      = { defs={} expr=v6432[16] }
        fs      = { defs={} expr=v6433[16] }
        gs      = { defs={} expr=v6434[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6436[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6438[1] }
        af      = { defs={0x08048552} expr=v6510[1] }
        ?5      = { defs={} expr=v6440[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6443[1] }
        if      = { defs={} expr=v6444[1] }
        df      = { defs={} expr=v6445[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6447[1] }
        iopl1   = { defs={} expr=v6448[1] }
        nt      = { defs={} expr=v6449[1] }
        ?15     = { defs={} expr=v6450[1] }
        rf      = { defs={} expr=v6451[1] }
        vm      = { defs={} expr=v6452[1] }
        ac      = { defs={} expr=v6453[1] }
        vif     = { defs={} expr=v6454[1] }
        vip     = { defs={} expr=v6455[1] }
        id      = { defs={} expr=v6456[1] }
        ?22     = { defs={} expr=v6457[1] }
        ?23     = { defs={} expr=v6458[1] }
        ?24     = { defs={} expr=v6459[1] }
        ?25     = { defs={} expr=v6460[1] }
        ?26     = { defs={} expr=v6461[1] }
        ?27     = { defs={} expr=v6462[1] }
        ?28     = { defs={} expr=v6463[1] }
        ?29     = { defs={} expr=v6464[1] }
        ?30     = { defs={} expr=v6465[1] }
        ?31     = { defs={} expr=v6466[1] }
        ip      = { defs={0x0804854f,0x08048552} expr=0x08048554[32] }
    memory:
    init mem:
0x8048554:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v6421[32] }
        cx      = { defs={} expr=v6422[32] }
        dx      = { defs={} expr=v6423[32] }
        bx      = { defs={} expr=v6424[32] }
        sp      = { defs={} expr=v6425[32] }
        bp      = { defs={} expr=v6426[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v6429[16] }
        cs      = { defs={} expr=v6430[16] }
        ss      = { defs={} expr=v6431[16] }
        ds      = { defs={} expr=v6432[16] }
        fs      = { defs={} expr=v6433[16] }
        gs      = { defs={} expr=v6434[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6436[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6438[1] }
        af      = { defs={0x08048552} expr=v6510[1] }
        ?5      = { defs={} expr=v6440[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6443[1] }
        if      = { defs={} expr=v6444[1] }
        df      = { defs={} expr=v6445[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6447[1] }
        iopl1   = { defs={} expr=v6448[1] }
        nt      = { defs={} expr=v6449[1] }
        ?15     = { defs={} expr=v6450[1] }
        rf      = { defs={} expr=v6451[1] }
        vm      = { defs={} expr=v6452[1] }
        ac      = { defs={} expr=v6453[1] }
        vif     = { defs={} expr=v6454[1] }
        vip     = { defs={} expr=v6455[1] }
        id      = { defs={} expr=v6456[1] }
        ?22     = { defs={} expr=v6457[1] }
        ?23     = { defs={} expr=v6458[1] }
        ?24     = { defs={} expr=v6459[1] }
        ?25     = { defs={} expr=v6460[1] }
        ?26     = { defs={} expr=v6461[1] }
        ?27     = { defs={} expr=v6462[1] }
        ?28     = { defs={} expr=v6463[1] }
        ?29     = { defs={} expr=v6464[1] }
        ?30     = { defs={} expr=v6465[1] }
        ?31     = { defs={} expr=v6466[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554} expr=0x0804855a[32] }
    memory:
    init mem:
0x804855a:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v6421[32] }
        cx      = { defs={} expr=v6422[32] }
        dx      = { defs={} expr=v6423[32] }
        bx      = { defs={} expr=v6424[32] }
        sp      = { defs={} expr=v6425[32] }
        bp      = { defs={} expr=v6426[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v6429[16] }
        cs      = { defs={} expr=v6430[16] }
        ss      = { defs={} expr=v6431[16] }
        ds      = { defs={} expr=v6432[16] }
        fs      = { defs={} expr=v6433[16] }
        gs      = { defs={} expr=v6434[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6436[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6438[1] }
        af      = { defs={0x08048552} expr=v6510[1] }
        ?5      = { defs={} expr=v6440[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6443[1] }
        if      = { defs={} expr=v6444[1] }
        df      = { defs={} expr=v6445[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6447[1] }
        iopl1   = { defs={} expr=v6448[1] }
        nt      = { defs={} expr=v6449[1] }
        ?15     = { defs={} expr=v6450[1] }
        rf      = { defs={} expr=v6451[1] }
        vm      = { defs={} expr=v6452[1] }
        ac      = { defs={} expr=v6453[1] }
        vif     = { defs={} expr=v6454[1] }
        vip     = { defs={} expr=v6455[1] }
        id      = { defs={} expr=v6456[1] }
        ?22     = { defs={} expr=v6457[1] }
        ?23     = { defs={} expr=v6458[1] }
        ?24     = { defs={} expr=v6459[1] }
        ?25     = { defs={} expr=v6460[1] }
        ?26     = { defs={} expr=v6461[1] }
        ?27     = { defs={} expr=v6462[1] }
        ?28     = { defs={} expr=v6463[1] }
        ?29     = { defs={} expr=v6464[1] }
        ?30     = { defs={} expr=v6465[1] }
        ?31     = { defs={} expr=v6466[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a} expr=0x08048560[32] }
    memory:
    init mem:
0x8048560:call   DWORD PTR ds:[esi]
    registers:
        ax      = { defs={} expr=v6421[32] }
        cx      = { defs={} expr=v6422[32] }
        dx      = { defs={} expr=v6423[32] }
        bx      = { defs={} expr=v6424[32] }
        sp      = { defs={0x08048560} expr=(add[32] v6425[32] -4[32]) }
        bp      = { defs={} expr=v6426[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v6429[16] }
        cs      = { defs={} expr=v6430[16] }
        ss      = { defs={} expr=v6431[16] }
        ds      = { defs={} expr=v6432[16] }
        fs      = { defs={} expr=v6433[16] }
        gs      = { defs={} expr=v6434[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6436[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6438[1] }
        af      = { defs={0x08048552} expr=v6510[1] }
        ?5      = { defs={} expr=v6440[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6443[1] }
        if      = { defs={} expr=v6444[1] }
        df      = { defs={} expr=v6445[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6447[1] }
        iopl1   = { defs={} expr=v6448[1] }
        nt      = { defs={} expr=v6449[1] }
        ?15     = { defs={} expr=v6450[1] }
        rf      = { defs={} expr=v6451[1] }
        vm      = { defs={} expr=v6452[1] }
        ac      = { defs={} expr=v6453[1] }
        vif     = { defs={} expr=v6454[1] }
        vip     = { defs={} expr=v6455[1] }
        id      = { defs={} expr=v6456[1] }
        ?22     = { defs={} expr=v6457[1] }
        ?23     = { defs={} expr=v6458[1] }
        ?24     = { defs={} expr=v6459[1] }
        ?25     = { defs={} expr=v6460[1] }
        ?26     = { defs={} expr=v6461[1] }
        ?27     = { defs={} expr=v6462[1] }
        ?28     = { defs={} expr=v6463[1] }
        ?29     = { defs={} expr=v6464[1] }
        ?30     = { defs={} expr=v6465[1] }
        ?31     = { defs={} expr=v6466[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a,0x08048560} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6539[8] (add[32] (add[32] v6425[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v6425[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v6425[32] -4[32]) 1[32]) -123[8]) (add[32] v6425[32] -4[32]) 98[8]) (add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) v6538[8]) (add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6541[8] (add[32] (add[32] v6425[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v6425[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v6425[32] -4[32]) 1[32]) -123[8]) (add[32] v6425[32] -4[32]) 98[8]) (add[32] (add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) 1[32]) v6540[8]) (add[32] (add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6543[8] (add[32] (add[32] v6425[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v6425[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v6425[32] -4[32]) 1[32]) -123[8]) (add[32] v6425[32] -4[32]) 98[8]) (add[32] (add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) 2[32]) v6542[8]) (add[32] (add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6545[8] (add[32] (add[32] v6425[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v6425[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v6425[32] -4[32]) 1[32]) -123[8]) (add[32] v6425[32] -4[32]) 98[8]) (add[32] (add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) 3[32]) v6544[8]) (add[32] (add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) 3[32]))))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6425[32] -4[32]) 3[32]) }
          value = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a,0x08048560} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6425[32] -4[32]) 2[32]) }
          value = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a,0x08048560} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6425[32] -4[32]) 1[32]) }
          value = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a,0x08048560} expr=-123[8] }
          flags = { }
        address = { defs={0x08048560} expr=(add[32] v6425[32] -4[32]) }
          value = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a,0x08048560} expr=98[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) 3[32]) }
          value = { defs={} expr=v6544[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) 2[32]) }
          value = { defs={} expr=v6542[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) 1[32]) }
          value = { defs={} expr=v6540[8] }
          flags = { rdonly }
        address = { defs={0x0804854f,0x08048554,0x08048560} expr=(add[32] v6423[32] (extract[32] 0[32] 32[32] (umul[40] v6421[32] 4[8]))) }
          value = { defs={} expr=v6538[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048562:inc    edi
    registers:
        ax      = { defs={} expr=v6600[32] }
        cx      = { defs={} expr=v6601[32] }
        dx      = { defs={} expr=v6602[32] }
        bx      = { defs={} expr=v6603[32] }
        sp      = { defs={} expr=v6604[32] }
        bp      = { defs={} expr=v6605[32] }
        si      = { defs={} expr=v6606[32] }
        di      = { defs={0x08048562} expr=(add[32] v6607[32] 1[32]) }
        es      = { defs={} expr=v6608[16] }
        cs      = { defs={} expr=v6609[16] }
        ss      = { defs={} expr=v6610[16] }
        ds      = { defs={} expr=v6611[16] }
        fs      = { defs={} expr=v6612[16] }
        gs      = { defs={} expr=v6613[16] }
        cf      = { defs={} expr=v6614[1] }
        ?1      = { defs={} expr=v6615[1] }
        pf      = { defs={0x08048562} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6607[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6607[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6607[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6607[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6607[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6607[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6607[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6607[32] 1[32]))))))) }
        ?3      = { defs={} expr=v6617[1] }
        af      = { defs={0x08048562} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6607[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6607[32]) 1[33]))))) }
        ?5      = { defs={} expr=v6619[1] }
        zf      = { defs={0x08048562} expr=(zerop[1] (add[32] v6607[32] 1[32])) }
        sf      = { defs={0x08048562} expr=(extract[1] 31[32] 32[32] (add[32] v6607[32] 1[32])) }
        tf      = { defs={} expr=v6622[1] }
        if      = { defs={} expr=v6623[1] }
        df      = { defs={} expr=v6624[1] }
        of      = { defs={0x08048562} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6607[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6607[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6607[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6607[32]) 1[33])))))) }
        iopl0   = { defs={} expr=v6626[1] }
        iopl1   = { defs={} expr=v6627[1] }
        nt      = { defs={} expr=v6628[1] }
        ?15     = { defs={} expr=v6629[1] }
        rf      = { defs={} expr=v6630[1] }
        vm      = { defs={} expr=v6631[1] }
        ac      = { defs={} expr=v6632[1] }
        vif     = { defs={} expr=v6633[1] }
        vip     = { defs={} expr=v6634[1] }
        id      = { defs={} expr=v6635[1] }
        ?22     = { defs={} expr=v6636[1] }
        ?23     = { defs={} expr=v6637[1] }
        ?24     = { defs={} expr=v6638[1] }
        ?25     = { defs={} expr=v6639[1] }
        ?26     = { defs={} expr=v6640[1] }
        ?27     = { defs={} expr=v6641[1] }
        ?28     = { defs={} expr=v6642[1] }
        ?29     = { defs={} expr=v6643[1] }
        ?30     = { defs={} expr=v6644[1] }
        ?31     = { defs={} expr=v6645[1] }
        ip      = { defs={0x08048562} expr=0x08048563[32] }
    memory:
    init mem:
0x8048563:sub    esi, 0x04
    registers:
        ax      = { defs={} expr=v6600[32] }
        cx      = { defs={} expr=v6601[32] }
        dx      = { defs={} expr=v6602[32] }
        bx      = { defs={} expr=v6603[32] }
        sp      = { defs={} expr=v6604[32] }
        bp      = { defs={} expr=v6605[32] }
        si      = { defs={0x08048563} expr=(add[32] v6606[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6607[32] 1[32]) }
        es      = { defs={} expr=v6608[16] }
        cs      = { defs={} expr=v6609[16] }
        ss      = { defs={} expr=v6610[16] }
        ds      = { defs={} expr=v6611[16] }
        fs      = { defs={} expr=v6612[16] }
        gs      = { defs={} expr=v6613[16] }
        cf      = { defs={0x08048563} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6606[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6606[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v6615[1] }
        pf      = { defs={0x08048563} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6606[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6606[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6606[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6606[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6606[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6606[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6606[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6606[32] -4[32]))))))) }
        ?3      = { defs={} expr=v6617[1] }
        af      = { defs={0x08048563} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6606[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6606[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v6619[1] }
        zf      = { defs={0x08048563} expr=(zerop[1] (add[32] v6606[32] -4[32])) }
        sf      = { defs={0x08048563} expr=(extract[1] 31[32] 32[32] (add[32] v6606[32] -4[32])) }
        tf      = { defs={} expr=v6622[1] }
        if      = { defs={} expr=v6623[1] }
        df      = { defs={} expr=v6624[1] }
        of      = { defs={0x08048563} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6606[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6606[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6606[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6606[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v6626[1] }
        iopl1   = { defs={} expr=v6627[1] }
        nt      = { defs={} expr=v6628[1] }
        ?15     = { defs={} expr=v6629[1] }
        rf      = { defs={} expr=v6630[1] }
        vm      = { defs={} expr=v6631[1] }
        ac      = { defs={} expr=v6632[1] }
        vif     = { defs={} expr=v6633[1] }
        vip     = { defs={} expr=v6634[1] }
        id      = { defs={} expr=v6635[1] }
        ?22     = { defs={} expr=v6636[1] }
        ?23     = { defs={} expr=v6637[1] }
        ?24     = { defs={} expr=v6638[1] }
        ?25     = { defs={} expr=v6639[1] }
        ?26     = { defs={} expr=v6640[1] }
        ?27     = { defs={} expr=v6641[1] }
        ?28     = { defs={} expr=v6642[1] }
        ?29     = { defs={} expr=v6643[1] }
        ?30     = { defs={} expr=v6644[1] }
        ?31     = { defs={} expr=v6645[1] }
        ip      = { defs={0x08048562,0x08048563} expr=0x08048566[32] }
    memory:
    init mem:
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
    registers:
        ax      = { defs={} expr=v6600[32] }
        cx      = { defs={} expr=v6601[32] }
        dx      = { defs={} expr=v6602[32] }
        bx      = { defs={} expr=v6603[32] }
        sp      = { defs={} expr=v6604[32] }
        bp      = { defs={} expr=v6605[32] }
        si      = { defs={0x08048563} expr=(add[32] v6606[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6607[32] 1[32]) }
        es      = { defs={} expr=v6608[16] }
        cs      = { defs={} expr=v6609[16] }
        ss      = { defs={} expr=v6610[16] }
        ds      = { defs={} expr=v6611[16] }
        fs      = { defs={} expr=v6612[16] }
        gs      = { defs={} expr=v6613[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v6615[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v6617[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v6619[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v6622[1] }
        if      = { defs={} expr=v6623[1] }
        df      = { defs={} expr=v6624[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v6626[1] }
        iopl1   = { defs={} expr=v6627[1] }
        nt      = { defs={} expr=v6628[1] }
        ?15     = { defs={} expr=v6629[1] }
        rf      = { defs={} expr=v6630[1] }
        vm      = { defs={} expr=v6631[1] }
        ac      = { defs={} expr=v6632[1] }
        vif     = { defs={} expr=v6633[1] }
        vip     = { defs={} expr=v6634[1] }
        id      = { defs={} expr=v6635[1] }
        ?22     = { defs={} expr=v6636[1] }
        ?23     = { defs={} expr=v6637[1] }
        ?24     = { defs={} expr=v6638[1] }
        ?25     = { defs={} expr=v6639[1] }
        ?26     = { defs={} expr=v6640[1] }
        ?27     = { defs={} expr=v6641[1] }
        ?28     = { defs={} expr=v6642[1] }
        ?29     = { defs={} expr=v6643[1] }
        ?30     = { defs={} expr=v6644[1] }
        ?31     = { defs={} expr=v6645[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566} expr=0x08048569[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6605[32] -16[32]) 3[32]) }
          value = { defs={} expr=v6757[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6605[32] -16[32]) 2[32]) }
          value = { defs={} expr=v6756[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6605[32] -16[32]) 1[32]) }
          value = { defs={} expr=v6755[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v6605[32] -16[32]) }
          value = { defs={} expr=v6754[8] }
          flags = { rdonly }
0x8048569:jne    0x08048560<<Insn>>
    registers:
        ax      = { defs={} expr=v6600[32] }
        cx      = { defs={} expr=v6601[32] }
        dx      = { defs={} expr=v6602[32] }
        bx      = { defs={} expr=v6603[32] }
        sp      = { defs={} expr=v6604[32] }
        bp      = { defs={} expr=v6605[32] }
        si      = { defs={0x08048563} expr=(add[32] v6606[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6607[32] 1[32]) }
        es      = { defs={} expr=v6608[16] }
        cs      = { defs={} expr=v6609[16] }
        ss      = { defs={} expr=v6610[16] }
        ds      = { defs={} expr=v6611[16] }
        fs      = { defs={} expr=v6612[16] }
        gs      = { defs={} expr=v6613[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v6615[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v6617[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v6619[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v6622[1] }
        if      = { defs={} expr=v6623[1] }
        df      = { defs={} expr=v6624[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6607[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v6626[1] }
        iopl1   = { defs={} expr=v6627[1] }
        nt      = { defs={} expr=v6628[1] }
        ?15     = { defs={} expr=v6629[1] }
        rf      = { defs={} expr=v6630[1] }
        vm      = { defs={} expr=v6631[1] }
        ac      = { defs={} expr=v6632[1] }
        vif     = { defs={} expr=v6633[1] }
        vip     = { defs={} expr=v6634[1] }
        id      = { defs={} expr=v6635[1] }
        ?22     = { defs={} expr=v6636[1] }
        ?23     = { defs={} expr=v6637[1] }
        ?24     = { defs={} expr=v6638[1] }
        ?25     = { defs={} expr=v6639[1] }
        ?26     = { defs={} expr=v6640[1] }
        ?27     = { defs={} expr=v6641[1] }
        ?28     = { defs={} expr=v6642[1] }
        ?29     = { defs={} expr=v6643[1] }
        ?30     = { defs={} expr=v6644[1] }
        ?31     = { defs={} expr=v6645[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566,0x08048569} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6754[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6755[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6757[8]))) (add[32] (invert[32] (add[32] v6607[32] 1[32])) 1[32])))) 0x08048560[32] 0x0804856b[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6605[32] -16[32]) 3[32]) }
          value = { defs={} expr=v6757[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6605[32] -16[32]) 2[32]) }
          value = { defs={} expr=v6756[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6605[32] -16[32]) 1[32]) }
          value = { defs={} expr=v6755[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v6605[32] -16[32]) }
          value = { defs={} expr=v6754[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048570:add    esp, 0x0c
    registers:
        ax      = { defs={} expr=v6864[32] }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={} expr=v6867[32] }
        sp      = { defs={0x08048570} expr=(add[32] v6868[32] 12[32]) }
        bp      = { defs={} expr=v6869[32] }
        si      = { defs={} expr=v6870[32] }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6868[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6868[32] 12[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048570} expr=0x08048573[32] }
    memory:
    init mem:
0x8048573:pop    ebx
    registers:
        ax      = { defs={} expr=v6864[32] }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6967[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6968[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6969[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6970[8]))) }
        sp      = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v6868[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v6869[32] }
        si      = { defs={} expr=v6870[32] }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6868[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6868[32] 12[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048570,0x08048573} expr=0x08048574[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6970[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6969[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6968[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6868[32] 12[32]) }
          value = { defs={} expr=v6967[8] }
          flags = { rdonly }
0x8048574:pop    esi
    registers:
        ax      = { defs={} expr=v6864[32] }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6967[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6968[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6969[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6970[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v6869[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6984[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6985[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6986[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6987[8]))) }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6868[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6868[32] 12[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574} expr=0x08048575[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6987[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6986[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6985[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6868[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6984[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6970[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6969[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6968[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6868[32] 12[32]) }
          value = { defs={} expr=v6967[8] }
          flags = { rdonly }
0x8048575:pop    edi
    registers:
        ax      = { defs={} expr=v6864[32] }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6967[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6968[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6969[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6970[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v6869[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6984[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6985[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6986[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6987[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7001[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7002[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7003[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7004[8]))) }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6868[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6868[32] 12[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=0x08048576[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7004[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7003[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7002[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7001[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6987[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6986[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6985[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6868[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6984[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6970[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6969[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6968[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6868[32] 12[32]) }
          value = { defs={} expr=v6967[8] }
          flags = { rdonly }
0x8048576:pop    ebp
    registers:
        ax      = { defs={} expr=v6864[32] }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6967[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6968[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6969[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6970[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7021[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6984[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6985[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6986[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6987[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7001[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7002[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7003[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7004[8]))) }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6868[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6868[32] 12[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=0x08048577[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7021[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7020[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7019[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7018[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7004[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7003[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7002[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7001[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6987[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6986[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6985[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6868[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6984[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6970[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6969[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6968[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6868[32] 12[32]) }
          value = { defs={} expr=v6967[8] }
          flags = { rdonly }
0x8048577:ret    
    registers:
        ax      = { defs={} expr=v6864[32] }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6967[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6968[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6969[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6970[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7021[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6984[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6985[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6986[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6987[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7001[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7002[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7003[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7004[8]))) }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6868[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6868[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6868[32] 12[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6868[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6868[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048577} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7035[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7036[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7037[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7038[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7038[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7037[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7036[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7035[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7021[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7020[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7019[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7018[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7004[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7003[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7002[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7001[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6987[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6986[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6985[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6868[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6984[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6970[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6969[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6868[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6968[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6868[32] 12[32]) }
          value = { defs={} expr=v6967[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048580:push   ebp
    registers:
        ax      = { defs={} expr=v7093[32] }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={} expr=v7096[32] }
        sp      = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
        bp      = { defs={} expr=v7098[32] }
        si      = { defs={} expr=v7099[32] }
        di      = { defs={} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={} expr=v7107[1] }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={} expr=v7109[1] }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={} expr=v7111[1] }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={} expr=v7113[1] }
        sf      = { defs={} expr=v7114[1] }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={} expr=v7118[1] }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580} expr=0x08048581[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
0x8048581:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v7093[32] }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={} expr=v7096[32] }
        sp      = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7097[32] -4[32]) }
        si      = { defs={} expr=v7099[32] }
        di      = { defs={} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={} expr=v7107[1] }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={} expr=v7109[1] }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={} expr=v7111[1] }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={} expr=v7113[1] }
        sf      = { defs={} expr=v7114[1] }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={} expr=v7118[1] }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580,0x08048581} expr=0x08048583[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
0x8048583:push   ebx
    registers:
        ax      = { defs={} expr=v7093[32] }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={} expr=v7096[32] }
        sp      = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7097[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7097[32] -4[32]) }
        si      = { defs={} expr=v7099[32] }
        di      = { defs={} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={} expr=v7107[1] }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={} expr=v7109[1] }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={} expr=v7111[1] }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={} expr=v7113[1] }
        sf      = { defs={} expr=v7114[1] }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={} expr=v7118[1] }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583} expr=0x08048584[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7096[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7097[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
0x8048584:sub    esp, 0x04
    registers:
        ax      = { defs={} expr=v7093[32] }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={} expr=v7096[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7097[32] -4[32]) }
        si      = { defs={} expr=v7099[32] }
        di      = { defs={} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584} expr=0x08048587[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7096[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7097[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
0x8048587:mov    ebx, 0x080495e8<.ctors>
    registers:
        ax      = { defs={} expr=v7093[32] }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7097[32] -4[32]) }
        si      = { defs={} expr=v7099[32] }
        di      = { defs={} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587} expr=0x0804858c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7096[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7097[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8<.ctors>]
    registers:
        ax      = { defs={0x08048580,0x08048583,0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7097[32] -4[32]) }
        si      = { defs={} expr=v7099[32] }
        di      = { defs={} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7097[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c} expr=0x08048591[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7096[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7097[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7234[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7232[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7230[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7228[8] }
          flags = { rdonly }
0x8048591:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x08048580,0x08048583,0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7097[32] -4[32]) }
        si      = { defs={} expr=v7099[32] }
        di      = { defs={} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591} expr=0x08048594[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7096[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7097[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7234[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7232[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7230[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7228[8] }
          flags = { rdonly }
0x8048594:je     0x080485ac<<Insn>>
    registers:
        ax      = { defs={0x08048580,0x08048583,0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7097[32] -4[32]) }
        si      = { defs={} expr=v7099[32] }
        di      = { defs={} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594} expr=0x08048596[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7096[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7097[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7234[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7232[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7230[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7228[8] }
          flags = { rdonly }
0x8048596:lea    esi, [esi + 0x00]
    registers:
        ax      = { defs={0x08048580,0x08048583,0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7097[32] -4[32]) }
        si      = { defs={0x08048596} expr=v7099[32] }
        di      = { defs={} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596} expr=0x08048599[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7096[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7097[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7234[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7232[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7230[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7228[8] }
          flags = { rdonly }
0x8048599:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={0x08048580,0x08048583,0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7097[32] -4[32]) }
        si      = { defs={0x08048596} expr=v7099[32] }
        di      = { defs={0x08048599} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={0x08048580,0x08048583,0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596,0x08048599} expr=0x080485a0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7096[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7097[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7234[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7232[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7230[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7228[8] }
          flags = { rdonly }
0x80485a0:sub    ebx, 0x04
    registers:
        ax      = { defs={0x08048580,0x08048583,0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={0x08048587,0x080485a0} expr=0x080495e4[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7097[32] -4[32]) }
        si      = { defs={0x08048596} expr=v7099[32] }
        di      = { defs={0x08048599} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={0x08048587,0x080485a0} expr=1[1] }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        sf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={0x08048587,0x080485a0} expr=0[1] }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596,0x08048599,0x080485a0} expr=0x080485a3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7096[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7097[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7234[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7232[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7230[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7228[8] }
          flags = { rdonly }
0x80485a3:call   eax
    registers:
        ax      = { defs={0x08048580,0x08048583,0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v7094[32] }
        dx      = { defs={} expr=v7095[32] }
        bx      = { defs={0x08048587,0x080485a0} expr=0x080495e4[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584,0x080485a3} expr=(add[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7097[32] -4[32]) }
        si      = { defs={0x08048596} expr=v7099[32] }
        di      = { defs={0x08048599} expr=v7100[32] }
        es      = { defs={} expr=v7101[16] }
        cs      = { defs={} expr=v7102[16] }
        ss      = { defs={} expr=v7103[16] }
        ds      = { defs={} expr=v7104[16] }
        fs      = { defs={} expr=v7105[16] }
        gs      = { defs={} expr=v7106[16] }
        cf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?1      = { defs={} expr=v7108[1] }
        pf      = { defs={0x08048587,0x080485a0} expr=1[1] }
        ?3      = { defs={} expr=v7110[1] }
        af      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?5      = { defs={} expr=v7112[1] }
        zf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        sf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        tf      = { defs={} expr=v7115[1] }
        if      = { defs={} expr=v7116[1] }
        df      = { defs={} expr=v7117[1] }
        of      = { defs={0x08048587,0x080485a0} expr=0[1] }
        iopl0   = { defs={} expr=v7119[1] }
        iopl1   = { defs={} expr=v7120[1] }
        nt      = { defs={} expr=v7121[1] }
        ?15     = { defs={} expr=v7122[1] }
        rf      = { defs={} expr=v7123[1] }
        vm      = { defs={} expr=v7124[1] }
        ac      = { defs={} expr=v7125[1] }
        vif     = { defs={} expr=v7126[1] }
        vip     = { defs={} expr=v7127[1] }
        id      = { defs={} expr=v7128[1] }
        ?22     = { defs={} expr=v7129[1] }
        ?23     = { defs={} expr=v7130[1] }
        ?24     = { defs={} expr=v7131[1] }
        ?25     = { defs={} expr=v7132[1] }
        ?26     = { defs={} expr=v7133[1] }
        ?27     = { defs={} expr=v7134[1] }
        ?28     = { defs={} expr=v7135[1] }
        ?29     = { defs={} expr=v7136[1] }
        ?30     = { defs={} expr=v7137[1] }
        ?31     = { defs={} expr=v7138[1] }
        ip      = { defs={0x08048580,0x08048583,0x0804858c,0x080485a3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7229[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e8[32] v7228[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7231[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495e9[32] v7230[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7233[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495ea[32] v7232[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7235[8] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7096[32])) (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v7096[32])) (add[32] (add[32] v7097[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v7098[32])) (add[32] (add[32] v7097[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v7098[32])) (add[32] v7097[32] -4[32]) (extract[8] 0[32] 8[32] v7098[32])) 0x080495eb[32] v7234[8]) 0x080495eb[32])))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596,0x08048599,0x080485a0,0x080485a3} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596,0x08048599,0x080485a0,0x080485a3} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596,0x08048599,0x080485a0,0x080485a3} expr=-123[8] }
          flags = { }
        address = { defs={0x08048580,0x08048583,0x08048584,0x080485a3} expr=(add[32] (add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596,0x08048599,0x080485a0,0x080485a3} expr=-91[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7097[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7096[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7097[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7096[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7097[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7098[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7097[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7234[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7232[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7230[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7228[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) }
        cx      = { defs={} expr=v7425[32] }
        dx      = { defs={} expr=v7426[32] }
        bx      = { defs={} expr=v7427[32] }
        sp      = { defs={} expr=v7428[32] }
        bp      = { defs={} expr=v7429[32] }
        si      = { defs={} expr=v7430[32] }
        di      = { defs={} expr=v7431[32] }
        es      = { defs={} expr=v7432[16] }
        cs      = { defs={} expr=v7433[16] }
        ss      = { defs={} expr=v7434[16] }
        ds      = { defs={} expr=v7435[16] }
        fs      = { defs={} expr=v7436[16] }
        gs      = { defs={} expr=v7437[16] }
        cf      = { defs={} expr=v7438[1] }
        ?1      = { defs={} expr=v7439[1] }
        pf      = { defs={} expr=v7440[1] }
        ?3      = { defs={} expr=v7441[1] }
        af      = { defs={} expr=v7442[1] }
        ?5      = { defs={} expr=v7443[1] }
        zf      = { defs={} expr=v7444[1] }
        sf      = { defs={} expr=v7445[1] }
        tf      = { defs={} expr=v7446[1] }
        if      = { defs={} expr=v7447[1] }
        df      = { defs={} expr=v7448[1] }
        of      = { defs={} expr=v7449[1] }
        iopl0   = { defs={} expr=v7450[1] }
        iopl1   = { defs={} expr=v7451[1] }
        nt      = { defs={} expr=v7452[1] }
        ?15     = { defs={} expr=v7453[1] }
        rf      = { defs={} expr=v7454[1] }
        vm      = { defs={} expr=v7455[1] }
        ac      = { defs={} expr=v7456[1] }
        vif     = { defs={} expr=v7457[1] }
        vip     = { defs={} expr=v7458[1] }
        id      = { defs={} expr=v7459[1] }
        ?22     = { defs={} expr=v7460[1] }
        ?23     = { defs={} expr=v7461[1] }
        ?24     = { defs={} expr=v7462[1] }
        ?25     = { defs={} expr=v7463[1] }
        ?26     = { defs={} expr=v7464[1] }
        ?27     = { defs={} expr=v7465[1] }
        ?28     = { defs={} expr=v7466[1] }
        ?29     = { defs={} expr=v7467[1] }
        ?30     = { defs={} expr=v7468[1] }
        ?31     = { defs={} expr=v7469[1] }
        ip      = { defs={0x080485a5} expr=0x080485a7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7427[32] 3[32]) }
          value = { defs={} expr=v7480[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7427[32] 2[32]) }
          value = { defs={} expr=v7479[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7427[32] 1[32]) }
          value = { defs={} expr=v7478[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7427[32] }
          value = { defs={} expr=v7477[8] }
          flags = { rdonly }
0x80485a7:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) }
        cx      = { defs={} expr=v7425[32] }
        dx      = { defs={} expr=v7426[32] }
        bx      = { defs={} expr=v7427[32] }
        sp      = { defs={} expr=v7428[32] }
        bp      = { defs={} expr=v7429[32] }
        si      = { defs={} expr=v7430[32] }
        di      = { defs={} expr=v7431[32] }
        es      = { defs={} expr=v7432[16] }
        cs      = { defs={} expr=v7433[16] }
        ss      = { defs={} expr=v7434[16] }
        ds      = { defs={} expr=v7435[16] }
        fs      = { defs={} expr=v7436[16] }
        gs      = { defs={} expr=v7437[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7439[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7441[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7443[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32])) }
        tf      = { defs={} expr=v7446[1] }
        if      = { defs={} expr=v7447[1] }
        df      = { defs={} expr=v7448[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=0[1] }
        iopl0   = { defs={} expr=v7450[1] }
        iopl1   = { defs={} expr=v7451[1] }
        nt      = { defs={} expr=v7452[1] }
        ?15     = { defs={} expr=v7453[1] }
        rf      = { defs={} expr=v7454[1] }
        vm      = { defs={} expr=v7455[1] }
        ac      = { defs={} expr=v7456[1] }
        vif     = { defs={} expr=v7457[1] }
        vip     = { defs={} expr=v7458[1] }
        id      = { defs={} expr=v7459[1] }
        ?22     = { defs={} expr=v7460[1] }
        ?23     = { defs={} expr=v7461[1] }
        ?24     = { defs={} expr=v7462[1] }
        ?25     = { defs={} expr=v7463[1] }
        ?26     = { defs={} expr=v7464[1] }
        ?27     = { defs={} expr=v7465[1] }
        ?28     = { defs={} expr=v7466[1] }
        ?29     = { defs={} expr=v7467[1] }
        ?30     = { defs={} expr=v7468[1] }
        ?31     = { defs={} expr=v7469[1] }
        ip      = { defs={0x080485a5,0x080485a7} expr=0x080485aa[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7427[32] 3[32]) }
          value = { defs={} expr=v7480[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7427[32] 2[32]) }
          value = { defs={} expr=v7479[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7427[32] 1[32]) }
          value = { defs={} expr=v7478[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7427[32] }
          value = { defs={} expr=v7477[8] }
          flags = { rdonly }
0x80485aa:jne    0x080485a0<<Insn>>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) }
        cx      = { defs={} expr=v7425[32] }
        dx      = { defs={} expr=v7426[32] }
        bx      = { defs={} expr=v7427[32] }
        sp      = { defs={} expr=v7428[32] }
        bp      = { defs={} expr=v7429[32] }
        si      = { defs={} expr=v7430[32] }
        di      = { defs={} expr=v7431[32] }
        es      = { defs={} expr=v7432[16] }
        cs      = { defs={} expr=v7433[16] }
        ss      = { defs={} expr=v7434[16] }
        ds      = { defs={} expr=v7435[16] }
        fs      = { defs={} expr=v7436[16] }
        gs      = { defs={} expr=v7437[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7439[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7441[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7443[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7480[8]))) 1[32])) }
        tf      = { defs={} expr=v7446[1] }
        if      = { defs={} expr=v7447[1] }
        df      = { defs={} expr=v7448[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=0[1] }
        iopl0   = { defs={} expr=v7450[1] }
        iopl1   = { defs={} expr=v7451[1] }
        nt      = { defs={} expr=v7452[1] }
        ?15     = { defs={} expr=v7453[1] }
        rf      = { defs={} expr=v7454[1] }
        vm      = { defs={} expr=v7455[1] }
        ac      = { defs={} expr=v7456[1] }
        vif     = { defs={} expr=v7457[1] }
        vip     = { defs={} expr=v7458[1] }
        id      = { defs={} expr=v7459[1] }
        ?22     = { defs={} expr=v7460[1] }
        ?23     = { defs={} expr=v7461[1] }
        ?24     = { defs={} expr=v7462[1] }
        ?25     = { defs={} expr=v7463[1] }
        ?26     = { defs={} expr=v7464[1] }
        ?27     = { defs={} expr=v7465[1] }
        ?28     = { defs={} expr=v7466[1] }
        ?29     = { defs={} expr=v7467[1] }
        ?30     = { defs={} expr=v7468[1] }
        ?31     = { defs={} expr=v7469[1] }
        ip      = { defs={0x080485a5,0x080485a7,0x080485aa} expr=0x080485a0[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7427[32] 3[32]) }
          value = { defs={} expr=v7480[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7427[32] 2[32]) }
          value = { defs={} expr=v7479[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7427[32] 1[32]) }
          value = { defs={} expr=v7478[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7427[32] }
          value = { defs={} expr=v7477[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ac:pop    eax
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7648[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7649[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7650[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7651[8]))) }
        cx      = { defs={} expr=v7594[32] }
        dx      = { defs={} expr=v7595[32] }
        bx      = { defs={} expr=v7596[32] }
        sp      = { defs={0x080485ac} expr=(add[32] v7597[32] 4[32]) }
        bp      = { defs={} expr=v7598[32] }
        si      = { defs={} expr=v7599[32] }
        di      = { defs={} expr=v7600[32] }
        es      = { defs={} expr=v7601[16] }
        cs      = { defs={} expr=v7602[16] }
        ss      = { defs={} expr=v7603[16] }
        ds      = { defs={} expr=v7604[16] }
        fs      = { defs={} expr=v7605[16] }
        gs      = { defs={} expr=v7606[16] }
        cf      = { defs={} expr=v7607[1] }
        ?1      = { defs={} expr=v7608[1] }
        pf      = { defs={} expr=v7609[1] }
        ?3      = { defs={} expr=v7610[1] }
        af      = { defs={} expr=v7611[1] }
        ?5      = { defs={} expr=v7612[1] }
        zf      = { defs={} expr=v7613[1] }
        sf      = { defs={} expr=v7614[1] }
        tf      = { defs={} expr=v7615[1] }
        if      = { defs={} expr=v7616[1] }
        df      = { defs={} expr=v7617[1] }
        of      = { defs={} expr=v7618[1] }
        iopl0   = { defs={} expr=v7619[1] }
        iopl1   = { defs={} expr=v7620[1] }
        nt      = { defs={} expr=v7621[1] }
        ?15     = { defs={} expr=v7622[1] }
        rf      = { defs={} expr=v7623[1] }
        vm      = { defs={} expr=v7624[1] }
        ac      = { defs={} expr=v7625[1] }
        vif     = { defs={} expr=v7626[1] }
        vip     = { defs={} expr=v7627[1] }
        id      = { defs={} expr=v7628[1] }
        ?22     = { defs={} expr=v7629[1] }
        ?23     = { defs={} expr=v7630[1] }
        ?24     = { defs={} expr=v7631[1] }
        ?25     = { defs={} expr=v7632[1] }
        ?26     = { defs={} expr=v7633[1] }
        ?27     = { defs={} expr=v7634[1] }
        ?28     = { defs={} expr=v7635[1] }
        ?29     = { defs={} expr=v7636[1] }
        ?30     = { defs={} expr=v7637[1] }
        ?31     = { defs={} expr=v7638[1] }
        ip      = { defs={0x080485ac} expr=0x080485ad[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7597[32] 3[32]) }
          value = { defs={} expr=v7651[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7597[32] 2[32]) }
          value = { defs={} expr=v7650[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7597[32] 1[32]) }
          value = { defs={} expr=v7649[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7597[32] }
          value = { defs={} expr=v7648[8] }
          flags = { rdonly }
0x80485ad:pop    ebx
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7648[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7649[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7650[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7651[8]))) }
        cx      = { defs={} expr=v7594[32] }
        dx      = { defs={} expr=v7595[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7665[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7666[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7667[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7668[8]))) }
        sp      = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v7597[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v7598[32] }
        si      = { defs={} expr=v7599[32] }
        di      = { defs={} expr=v7600[32] }
        es      = { defs={} expr=v7601[16] }
        cs      = { defs={} expr=v7602[16] }
        ss      = { defs={} expr=v7603[16] }
        ds      = { defs={} expr=v7604[16] }
        fs      = { defs={} expr=v7605[16] }
        gs      = { defs={} expr=v7606[16] }
        cf      = { defs={} expr=v7607[1] }
        ?1      = { defs={} expr=v7608[1] }
        pf      = { defs={} expr=v7609[1] }
        ?3      = { defs={} expr=v7610[1] }
        af      = { defs={} expr=v7611[1] }
        ?5      = { defs={} expr=v7612[1] }
        zf      = { defs={} expr=v7613[1] }
        sf      = { defs={} expr=v7614[1] }
        tf      = { defs={} expr=v7615[1] }
        if      = { defs={} expr=v7616[1] }
        df      = { defs={} expr=v7617[1] }
        of      = { defs={} expr=v7618[1] }
        iopl0   = { defs={} expr=v7619[1] }
        iopl1   = { defs={} expr=v7620[1] }
        nt      = { defs={} expr=v7621[1] }
        ?15     = { defs={} expr=v7622[1] }
        rf      = { defs={} expr=v7623[1] }
        vm      = { defs={} expr=v7624[1] }
        ac      = { defs={} expr=v7625[1] }
        vif     = { defs={} expr=v7626[1] }
        vip     = { defs={} expr=v7627[1] }
        id      = { defs={} expr=v7628[1] }
        ?22     = { defs={} expr=v7629[1] }
        ?23     = { defs={} expr=v7630[1] }
        ?24     = { defs={} expr=v7631[1] }
        ?25     = { defs={} expr=v7632[1] }
        ?26     = { defs={} expr=v7633[1] }
        ?27     = { defs={} expr=v7634[1] }
        ?28     = { defs={} expr=v7635[1] }
        ?29     = { defs={} expr=v7636[1] }
        ?30     = { defs={} expr=v7637[1] }
        ?31     = { defs={} expr=v7638[1] }
        ip      = { defs={0x080485ac,0x080485ad} expr=0x080485ae[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v7597[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7668[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7597[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7667[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7597[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7666[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7597[32] 4[32]) }
          value = { defs={} expr=v7665[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7597[32] 3[32]) }
          value = { defs={} expr=v7651[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7597[32] 2[32]) }
          value = { defs={} expr=v7650[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7597[32] 1[32]) }
          value = { defs={} expr=v7649[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7597[32] }
          value = { defs={} expr=v7648[8] }
          flags = { rdonly }
0x80485ae:pop    ebp
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7648[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7649[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7650[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7651[8]))) }
        cx      = { defs={} expr=v7594[32] }
        dx      = { defs={} expr=v7595[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7665[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7666[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7667[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7668[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7682[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7683[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7684[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7685[8]))) }
        si      = { defs={} expr=v7599[32] }
        di      = { defs={} expr=v7600[32] }
        es      = { defs={} expr=v7601[16] }
        cs      = { defs={} expr=v7602[16] }
        ss      = { defs={} expr=v7603[16] }
        ds      = { defs={} expr=v7604[16] }
        fs      = { defs={} expr=v7605[16] }
        gs      = { defs={} expr=v7606[16] }
        cf      = { defs={} expr=v7607[1] }
        ?1      = { defs={} expr=v7608[1] }
        pf      = { defs={} expr=v7609[1] }
        ?3      = { defs={} expr=v7610[1] }
        af      = { defs={} expr=v7611[1] }
        ?5      = { defs={} expr=v7612[1] }
        zf      = { defs={} expr=v7613[1] }
        sf      = { defs={} expr=v7614[1] }
        tf      = { defs={} expr=v7615[1] }
        if      = { defs={} expr=v7616[1] }
        df      = { defs={} expr=v7617[1] }
        of      = { defs={} expr=v7618[1] }
        iopl0   = { defs={} expr=v7619[1] }
        iopl1   = { defs={} expr=v7620[1] }
        nt      = { defs={} expr=v7621[1] }
        ?15     = { defs={} expr=v7622[1] }
        rf      = { defs={} expr=v7623[1] }
        vm      = { defs={} expr=v7624[1] }
        ac      = { defs={} expr=v7625[1] }
        vif     = { defs={} expr=v7626[1] }
        vip     = { defs={} expr=v7627[1] }
        id      = { defs={} expr=v7628[1] }
        ?22     = { defs={} expr=v7629[1] }
        ?23     = { defs={} expr=v7630[1] }
        ?24     = { defs={} expr=v7631[1] }
        ?25     = { defs={} expr=v7632[1] }
        ?26     = { defs={} expr=v7633[1] }
        ?27     = { defs={} expr=v7634[1] }
        ?28     = { defs={} expr=v7635[1] }
        ?29     = { defs={} expr=v7636[1] }
        ?30     = { defs={} expr=v7637[1] }
        ?31     = { defs={} expr=v7638[1] }
        ip      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=0x080485af[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7685[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7684[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7683[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] v7597[32] 4[32]) 4[32]) }
          value = { defs={} expr=v7682[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7597[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7668[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7597[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7667[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7597[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7666[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7597[32] 4[32]) }
          value = { defs={} expr=v7665[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7597[32] 3[32]) }
          value = { defs={} expr=v7651[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7597[32] 2[32]) }
          value = { defs={} expr=v7650[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7597[32] 1[32]) }
          value = { defs={} expr=v7649[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7597[32] }
          value = { defs={} expr=v7648[8] }
          flags = { rdonly }
0x80485af:ret    
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7648[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7649[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7650[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7651[8]))) }
        cx      = { defs={} expr=v7594[32] }
        dx      = { defs={} expr=v7595[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7665[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7666[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7667[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7668[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7682[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7683[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7684[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7685[8]))) }
        si      = { defs={} expr=v7599[32] }
        di      = { defs={} expr=v7600[32] }
        es      = { defs={} expr=v7601[16] }
        cs      = { defs={} expr=v7602[16] }
        ss      = { defs={} expr=v7603[16] }
        ds      = { defs={} expr=v7604[16] }
        fs      = { defs={} expr=v7605[16] }
        gs      = { defs={} expr=v7606[16] }
        cf      = { defs={} expr=v7607[1] }
        ?1      = { defs={} expr=v7608[1] }
        pf      = { defs={} expr=v7609[1] }
        ?3      = { defs={} expr=v7610[1] }
        af      = { defs={} expr=v7611[1] }
        ?5      = { defs={} expr=v7612[1] }
        zf      = { defs={} expr=v7613[1] }
        sf      = { defs={} expr=v7614[1] }
        tf      = { defs={} expr=v7615[1] }
        if      = { defs={} expr=v7616[1] }
        df      = { defs={} expr=v7617[1] }
        of      = { defs={} expr=v7618[1] }
        iopl0   = { defs={} expr=v7619[1] }
        iopl1   = { defs={} expr=v7620[1] }
        nt      = { defs={} expr=v7621[1] }
        ?15     = { defs={} expr=v7622[1] }
        rf      = { defs={} expr=v7623[1] }
        vm      = { defs={} expr=v7624[1] }
        ac      = { defs={} expr=v7625[1] }
        vif     = { defs={} expr=v7626[1] }
        vip     = { defs={} expr=v7627[1] }
        id      = { defs={} expr=v7628[1] }
        ?22     = { defs={} expr=v7629[1] }
        ?23     = { defs={} expr=v7630[1] }
        ?24     = { defs={} expr=v7631[1] }
        ?25     = { defs={} expr=v7632[1] }
        ?26     = { defs={} expr=v7633[1] }
        ?27     = { defs={} expr=v7634[1] }
        ?28     = { defs={} expr=v7635[1] }
        ?29     = { defs={} expr=v7636[1] }
        ?30     = { defs={} expr=v7637[1] }
        ?31     = { defs={} expr=v7638[1] }
        ip      = { defs={0x080485af} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7699[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7700[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7702[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7702[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7701[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7700[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7685[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7684[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7597[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7683[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] v7597[32] 4[32]) 4[32]) }
          value = { defs={} expr=v7682[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7597[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7668[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7597[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7667[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7597[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7666[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7597[32] 4[32]) }
          value = { defs={} expr=v7665[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7597[32] 3[32]) }
          value = { defs={} expr=v7651[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7597[32] 2[32]) }
          value = { defs={} expr=v7650[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7597[32] 1[32]) }
          value = { defs={} expr=v7649[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7597[32] }
          value = { defs={} expr=v7648[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485b0:push   ebp
    registers:
        ax      = { defs={} expr=v7757[32] }
        cx      = { defs={} expr=v7758[32] }
        dx      = { defs={} expr=v7759[32] }
        bx      = { defs={} expr=v7760[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v7761[32] -4[32]) }
        bp      = { defs={} expr=v7762[32] }
        si      = { defs={} expr=v7763[32] }
        di      = { defs={} expr=v7764[32] }
        es      = { defs={} expr=v7765[16] }
        cs      = { defs={} expr=v7766[16] }
        ss      = { defs={} expr=v7767[16] }
        ds      = { defs={} expr=v7768[16] }
        fs      = { defs={} expr=v7769[16] }
        gs      = { defs={} expr=v7770[16] }
        cf      = { defs={} expr=v7771[1] }
        ?1      = { defs={} expr=v7772[1] }
        pf      = { defs={} expr=v7773[1] }
        ?3      = { defs={} expr=v7774[1] }
        af      = { defs={} expr=v7775[1] }
        ?5      = { defs={} expr=v7776[1] }
        zf      = { defs={} expr=v7777[1] }
        sf      = { defs={} expr=v7778[1] }
        tf      = { defs={} expr=v7779[1] }
        if      = { defs={} expr=v7780[1] }
        df      = { defs={} expr=v7781[1] }
        of      = { defs={} expr=v7782[1] }
        iopl0   = { defs={} expr=v7783[1] }
        iopl1   = { defs={} expr=v7784[1] }
        nt      = { defs={} expr=v7785[1] }
        ?15     = { defs={} expr=v7786[1] }
        rf      = { defs={} expr=v7787[1] }
        vm      = { defs={} expr=v7788[1] }
        ac      = { defs={} expr=v7789[1] }
        vif     = { defs={} expr=v7790[1] }
        vip     = { defs={} expr=v7791[1] }
        id      = { defs={} expr=v7792[1] }
        ?22     = { defs={} expr=v7793[1] }
        ?23     = { defs={} expr=v7794[1] }
        ?24     = { defs={} expr=v7795[1] }
        ?25     = { defs={} expr=v7796[1] }
        ?26     = { defs={} expr=v7797[1] }
        ?27     = { defs={} expr=v7798[1] }
        ?28     = { defs={} expr=v7799[1] }
        ?29     = { defs={} expr=v7800[1] }
        ?30     = { defs={} expr=v7801[1] }
        ?31     = { defs={} expr=v7802[1] }
        ip      = { defs={0x080485b0} expr=0x080485b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 3[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 24[32] 32[32] v7762[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 2[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 16[32] 24[32] v7762[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 1[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 8[32] 16[32] v7762[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7761[32] -4[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 0[32] 8[32] v7762[32]) }
          flags = { }
    init mem:
0x80485b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v7757[32] }
        cx      = { defs={} expr=v7758[32] }
        dx      = { defs={} expr=v7759[32] }
        bx      = { defs={} expr=v7760[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v7761[32] -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7761[32] -4[32]) }
        si      = { defs={} expr=v7763[32] }
        di      = { defs={} expr=v7764[32] }
        es      = { defs={} expr=v7765[16] }
        cs      = { defs={} expr=v7766[16] }
        ss      = { defs={} expr=v7767[16] }
        ds      = { defs={} expr=v7768[16] }
        fs      = { defs={} expr=v7769[16] }
        gs      = { defs={} expr=v7770[16] }
        cf      = { defs={} expr=v7771[1] }
        ?1      = { defs={} expr=v7772[1] }
        pf      = { defs={} expr=v7773[1] }
        ?3      = { defs={} expr=v7774[1] }
        af      = { defs={} expr=v7775[1] }
        ?5      = { defs={} expr=v7776[1] }
        zf      = { defs={} expr=v7777[1] }
        sf      = { defs={} expr=v7778[1] }
        tf      = { defs={} expr=v7779[1] }
        if      = { defs={} expr=v7780[1] }
        df      = { defs={} expr=v7781[1] }
        of      = { defs={} expr=v7782[1] }
        iopl0   = { defs={} expr=v7783[1] }
        iopl1   = { defs={} expr=v7784[1] }
        nt      = { defs={} expr=v7785[1] }
        ?15     = { defs={} expr=v7786[1] }
        rf      = { defs={} expr=v7787[1] }
        vm      = { defs={} expr=v7788[1] }
        ac      = { defs={} expr=v7789[1] }
        vif     = { defs={} expr=v7790[1] }
        vip     = { defs={} expr=v7791[1] }
        id      = { defs={} expr=v7792[1] }
        ?22     = { defs={} expr=v7793[1] }
        ?23     = { defs={} expr=v7794[1] }
        ?24     = { defs={} expr=v7795[1] }
        ?25     = { defs={} expr=v7796[1] }
        ?26     = { defs={} expr=v7797[1] }
        ?27     = { defs={} expr=v7798[1] }
        ?28     = { defs={} expr=v7799[1] }
        ?29     = { defs={} expr=v7800[1] }
        ?30     = { defs={} expr=v7801[1] }
        ?31     = { defs={} expr=v7802[1] }
        ip      = { defs={0x080485b0,0x080485b1} expr=0x080485b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 3[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 24[32] 32[32] v7762[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 2[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 16[32] 24[32] v7762[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 1[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 8[32] 16[32] v7762[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7761[32] -4[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 0[32] 8[32] v7762[32]) }
          flags = { }
    init mem:
0x80485b3:push   ebx
    registers:
        ax      = { defs={} expr=v7757[32] }
        cx      = { defs={} expr=v7758[32] }
        dx      = { defs={} expr=v7759[32] }
        bx      = { defs={} expr=v7760[32] }
        sp      = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7761[32] -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7761[32] -4[32]) }
        si      = { defs={} expr=v7763[32] }
        di      = { defs={} expr=v7764[32] }
        es      = { defs={} expr=v7765[16] }
        cs      = { defs={} expr=v7766[16] }
        ss      = { defs={} expr=v7767[16] }
        ds      = { defs={} expr=v7768[16] }
        fs      = { defs={} expr=v7769[16] }
        gs      = { defs={} expr=v7770[16] }
        cf      = { defs={} expr=v7771[1] }
        ?1      = { defs={} expr=v7772[1] }
        pf      = { defs={} expr=v7773[1] }
        ?3      = { defs={} expr=v7774[1] }
        af      = { defs={} expr=v7775[1] }
        ?5      = { defs={} expr=v7776[1] }
        zf      = { defs={} expr=v7777[1] }
        sf      = { defs={} expr=v7778[1] }
        tf      = { defs={} expr=v7779[1] }
        if      = { defs={} expr=v7780[1] }
        df      = { defs={} expr=v7781[1] }
        of      = { defs={} expr=v7782[1] }
        iopl0   = { defs={} expr=v7783[1] }
        iopl1   = { defs={} expr=v7784[1] }
        nt      = { defs={} expr=v7785[1] }
        ?15     = { defs={} expr=v7786[1] }
        rf      = { defs={} expr=v7787[1] }
        vm      = { defs={} expr=v7788[1] }
        ac      = { defs={} expr=v7789[1] }
        vif     = { defs={} expr=v7790[1] }
        vip     = { defs={} expr=v7791[1] }
        id      = { defs={} expr=v7792[1] }
        ?22     = { defs={} expr=v7793[1] }
        ?23     = { defs={} expr=v7794[1] }
        ?24     = { defs={} expr=v7795[1] }
        ?25     = { defs={} expr=v7796[1] }
        ?26     = { defs={} expr=v7797[1] }
        ?27     = { defs={} expr=v7798[1] }
        ?28     = { defs={} expr=v7799[1] }
        ?29     = { defs={} expr=v7800[1] }
        ?30     = { defs={} expr=v7801[1] }
        ?31     = { defs={} expr=v7802[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3} expr=0x080485b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 24[32] 32[32] v7760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 16[32] 24[32] v7760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 8[32] 16[32] v7760[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7761[32] -4[32]) -4[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 0[32] 8[32] v7760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 3[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 24[32] 32[32] v7762[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 2[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 16[32] 24[32] v7762[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 1[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 8[32] 16[32] v7762[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7761[32] -4[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 0[32] 8[32] v7762[32]) }
          flags = { }
    init mem:
0x80485b4:push   eax
    registers:
        ax      = { defs={} expr=v7757[32] }
        cx      = { defs={} expr=v7758[32] }
        dx      = { defs={} expr=v7759[32] }
        bx      = { defs={} expr=v7760[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7761[32] -4[32]) }
        si      = { defs={} expr=v7763[32] }
        di      = { defs={} expr=v7764[32] }
        es      = { defs={} expr=v7765[16] }
        cs      = { defs={} expr=v7766[16] }
        ss      = { defs={} expr=v7767[16] }
        ds      = { defs={} expr=v7768[16] }
        fs      = { defs={} expr=v7769[16] }
        gs      = { defs={} expr=v7770[16] }
        cf      = { defs={} expr=v7771[1] }
        ?1      = { defs={} expr=v7772[1] }
        pf      = { defs={} expr=v7773[1] }
        ?3      = { defs={} expr=v7774[1] }
        af      = { defs={} expr=v7775[1] }
        ?5      = { defs={} expr=v7776[1] }
        zf      = { defs={} expr=v7777[1] }
        sf      = { defs={} expr=v7778[1] }
        tf      = { defs={} expr=v7779[1] }
        if      = { defs={} expr=v7780[1] }
        df      = { defs={} expr=v7781[1] }
        of      = { defs={} expr=v7782[1] }
        iopl0   = { defs={} expr=v7783[1] }
        iopl1   = { defs={} expr=v7784[1] }
        nt      = { defs={} expr=v7785[1] }
        ?15     = { defs={} expr=v7786[1] }
        rf      = { defs={} expr=v7787[1] }
        vm      = { defs={} expr=v7788[1] }
        ac      = { defs={} expr=v7789[1] }
        vif     = { defs={} expr=v7790[1] }
        vip     = { defs={} expr=v7791[1] }
        id      = { defs={} expr=v7792[1] }
        ?22     = { defs={} expr=v7793[1] }
        ?23     = { defs={} expr=v7794[1] }
        ?24     = { defs={} expr=v7795[1] }
        ?25     = { defs={} expr=v7796[1] }
        ?26     = { defs={} expr=v7797[1] }
        ?27     = { defs={} expr=v7798[1] }
        ?28     = { defs={} expr=v7799[1] }
        ?29     = { defs={} expr=v7800[1] }
        ?30     = { defs={} expr=v7801[1] }
        ?31     = { defs={} expr=v7802[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4} expr=0x080485b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 24[32] 32[32] v7757[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 16[32] 24[32] v7757[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 8[32] 16[32] v7757[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 0[32] 8[32] v7757[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 24[32] 32[32] v7760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 16[32] 24[32] v7760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 8[32] 16[32] v7760[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7761[32] -4[32]) -4[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 0[32] 8[32] v7760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 3[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 24[32] 32[32] v7762[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 2[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 16[32] 24[32] v7762[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 1[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 8[32] 16[32] v7762[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7761[32] -4[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 0[32] 8[32] v7762[32]) }
          flags = { }
    init mem:
0x80485b5:call   0x080485ba<<Insn>>
    registers:
        ax      = { defs={} expr=v7757[32] }
        cx      = { defs={} expr=v7758[32] }
        dx      = { defs={} expr=v7759[32] }
        bx      = { defs={} expr=v7760[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7761[32] -4[32]) }
        si      = { defs={} expr=v7763[32] }
        di      = { defs={} expr=v7764[32] }
        es      = { defs={} expr=v7765[16] }
        cs      = { defs={} expr=v7766[16] }
        ss      = { defs={} expr=v7767[16] }
        ds      = { defs={} expr=v7768[16] }
        fs      = { defs={} expr=v7769[16] }
        gs      = { defs={} expr=v7770[16] }
        cf      = { defs={} expr=v7771[1] }
        ?1      = { defs={} expr=v7772[1] }
        pf      = { defs={} expr=v7773[1] }
        ?3      = { defs={} expr=v7774[1] }
        af      = { defs={} expr=v7775[1] }
        ?5      = { defs={} expr=v7776[1] }
        zf      = { defs={} expr=v7777[1] }
        sf      = { defs={} expr=v7778[1] }
        tf      = { defs={} expr=v7779[1] }
        if      = { defs={} expr=v7780[1] }
        df      = { defs={} expr=v7781[1] }
        of      = { defs={} expr=v7782[1] }
        iopl0   = { defs={} expr=v7783[1] }
        iopl1   = { defs={} expr=v7784[1] }
        nt      = { defs={} expr=v7785[1] }
        ?15     = { defs={} expr=v7786[1] }
        rf      = { defs={} expr=v7787[1] }
        vm      = { defs={} expr=v7788[1] }
        ac      = { defs={} expr=v7789[1] }
        vif     = { defs={} expr=v7790[1] }
        vip     = { defs={} expr=v7791[1] }
        id      = { defs={} expr=v7792[1] }
        ?22     = { defs={} expr=v7793[1] }
        ?23     = { defs={} expr=v7794[1] }
        ?24     = { defs={} expr=v7795[1] }
        ?25     = { defs={} expr=v7796[1] }
        ?26     = { defs={} expr=v7797[1] }
        ?27     = { defs={} expr=v7798[1] }
        ?28     = { defs={} expr=v7799[1] }
        ?29     = { defs={} expr=v7800[1] }
        ?30     = { defs={} expr=v7801[1] }
        ?31     = { defs={} expr=v7802[1] }
        ip      = { defs={0x080485b5} expr=0x080485ba[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4,0x080485b5} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4,0x080485b5} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4,0x080485b5} expr=-123[8] }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4,0x080485b5} expr=-70[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 24[32] 32[32] v7757[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 16[32] 24[32] v7757[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 8[32] 16[32] v7757[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 0[32] 8[32] v7757[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 24[32] 32[32] v7760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 16[32] 24[32] v7760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7761[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 8[32] 16[32] v7760[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7761[32] -4[32]) -4[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 0[32] 8[32] v7760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 3[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 24[32] 32[32] v7762[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 2[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 16[32] 24[32] v7762[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7761[32] -4[32]) 1[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 8[32] 16[32] v7762[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7761[32] -4[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 0[32] 8[32] v7762[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ba:pop    ebx
    registers:
        ax      = { defs={} expr=v7902[32] }
        cx      = { defs={} expr=v7903[32] }
        dx      = { defs={} expr=v7904[32] }
        bx      = { defs={0x080485ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) }
        sp      = { defs={0x080485ba} expr=(add[32] v7906[32] 4[32]) }
        bp      = { defs={} expr=v7907[32] }
        si      = { defs={} expr=v7908[32] }
        di      = { defs={} expr=v7909[32] }
        es      = { defs={} expr=v7910[16] }
        cs      = { defs={} expr=v7911[16] }
        ss      = { defs={} expr=v7912[16] }
        ds      = { defs={} expr=v7913[16] }
        fs      = { defs={} expr=v7914[16] }
        gs      = { defs={} expr=v7915[16] }
        cf      = { defs={} expr=v7916[1] }
        ?1      = { defs={} expr=v7917[1] }
        pf      = { defs={} expr=v7918[1] }
        ?3      = { defs={} expr=v7919[1] }
        af      = { defs={} expr=v7920[1] }
        ?5      = { defs={} expr=v7921[1] }
        zf      = { defs={} expr=v7922[1] }
        sf      = { defs={} expr=v7923[1] }
        tf      = { defs={} expr=v7924[1] }
        if      = { defs={} expr=v7925[1] }
        df      = { defs={} expr=v7926[1] }
        of      = { defs={} expr=v7927[1] }
        iopl0   = { defs={} expr=v7928[1] }
        iopl1   = { defs={} expr=v7929[1] }
        nt      = { defs={} expr=v7930[1] }
        ?15     = { defs={} expr=v7931[1] }
        rf      = { defs={} expr=v7932[1] }
        vm      = { defs={} expr=v7933[1] }
        ac      = { defs={} expr=v7934[1] }
        vif     = { defs={} expr=v7935[1] }
        vip     = { defs={} expr=v7936[1] }
        id      = { defs={} expr=v7937[1] }
        ?22     = { defs={} expr=v7938[1] }
        ?23     = { defs={} expr=v7939[1] }
        ?24     = { defs={} expr=v7940[1] }
        ?25     = { defs={} expr=v7941[1] }
        ?26     = { defs={} expr=v7942[1] }
        ?27     = { defs={} expr=v7943[1] }
        ?28     = { defs={} expr=v7944[1] }
        ?29     = { defs={} expr=v7945[1] }
        ?30     = { defs={} expr=v7946[1] }
        ?31     = { defs={} expr=v7947[1] }
        ip      = { defs={0x080485ba} expr=0x080485bb[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7906[32] 3[32]) }
          value = { defs={} expr=v7960[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7906[32] 2[32]) }
          value = { defs={} expr=v7959[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7906[32] 1[32]) }
          value = { defs={} expr=v7958[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v7906[32] }
          value = { defs={} expr=v7957[8] }
          flags = { rdonly }
0x80485bb:add    ebx, 0x0000110e
    registers:
        ax      = { defs={} expr=v7902[32] }
        cx      = { defs={} expr=v7903[32] }
        dx      = { defs={} expr=v7904[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]) }
        sp      = { defs={0x080485ba} expr=(add[32] v7906[32] 4[32]) }
        bp      = { defs={} expr=v7907[32] }
        si      = { defs={} expr=v7908[32] }
        di      = { defs={} expr=v7909[32] }
        es      = { defs={} expr=v7910[16] }
        cs      = { defs={} expr=v7911[16] }
        ss      = { defs={} expr=v7912[16] }
        ds      = { defs={} expr=v7913[16] }
        fs      = { defs={} expr=v7914[16] }
        gs      = { defs={} expr=v7915[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v7917[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v7919[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v7921[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32])) }
        tf      = { defs={} expr=v7924[1] }
        if      = { defs={} expr=v7925[1] }
        df      = { defs={} expr=v7926[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=0[1] }
        iopl0   = { defs={} expr=v7928[1] }
        iopl1   = { defs={} expr=v7929[1] }
        nt      = { defs={} expr=v7930[1] }
        ?15     = { defs={} expr=v7931[1] }
        rf      = { defs={} expr=v7932[1] }
        vm      = { defs={} expr=v7933[1] }
        ac      = { defs={} expr=v7934[1] }
        vif     = { defs={} expr=v7935[1] }
        vip     = { defs={} expr=v7936[1] }
        id      = { defs={} expr=v7937[1] }
        ?22     = { defs={} expr=v7938[1] }
        ?23     = { defs={} expr=v7939[1] }
        ?24     = { defs={} expr=v7940[1] }
        ?25     = { defs={} expr=v7941[1] }
        ?26     = { defs={} expr=v7942[1] }
        ?27     = { defs={} expr=v7943[1] }
        ?28     = { defs={} expr=v7944[1] }
        ?29     = { defs={} expr=v7945[1] }
        ?30     = { defs={} expr=v7946[1] }
        ?31     = { defs={} expr=v7947[1] }
        ip      = { defs={0x080485ba,0x080485bb} expr=0x080485c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7906[32] 3[32]) }
          value = { defs={} expr=v7960[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7906[32] 2[32]) }
          value = { defs={} expr=v7959[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7906[32] 1[32]) }
          value = { defs={} expr=v7958[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v7906[32] }
          value = { defs={} expr=v7957[8] }
          flags = { rdonly }
0x80485c1:call   0x08048390<__do_global_dtors_aux>
    registers:
        ax      = { defs={} expr=v7902[32] }
        cx      = { defs={} expr=v7903[32] }
        dx      = { defs={} expr=v7904[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]) }
        sp      = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v7906[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v7907[32] }
        si      = { defs={} expr=v7908[32] }
        di      = { defs={} expr=v7909[32] }
        es      = { defs={} expr=v7910[16] }
        cs      = { defs={} expr=v7911[16] }
        ss      = { defs={} expr=v7912[16] }
        ds      = { defs={} expr=v7913[16] }
        fs      = { defs={} expr=v7914[16] }
        gs      = { defs={} expr=v7915[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v7917[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v7919[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v7921[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7957[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7958[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7959[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7960[8]))) 4366[32])) }
        tf      = { defs={} expr=v7924[1] }
        if      = { defs={} expr=v7925[1] }
        df      = { defs={} expr=v7926[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=0[1] }
        iopl0   = { defs={} expr=v7928[1] }
        iopl1   = { defs={} expr=v7929[1] }
        nt      = { defs={} expr=v7930[1] }
        ?15     = { defs={} expr=v7931[1] }
        rf      = { defs={} expr=v7932[1] }
        vm      = { defs={} expr=v7933[1] }
        ac      = { defs={} expr=v7934[1] }
        vif     = { defs={} expr=v7935[1] }
        vip     = { defs={} expr=v7936[1] }
        id      = { defs={} expr=v7937[1] }
        ?22     = { defs={} expr=v7938[1] }
        ?23     = { defs={} expr=v7939[1] }
        ?24     = { defs={} expr=v7940[1] }
        ?25     = { defs={} expr=v7941[1] }
        ?26     = { defs={} expr=v7942[1] }
        ?27     = { defs={} expr=v7943[1] }
        ?28     = { defs={} expr=v7944[1] }
        ?29     = { defs={} expr=v7945[1] }
        ?30     = { defs={} expr=v7946[1] }
        ?31     = { defs={} expr=v7947[1] }
        ip      = { defs={0x080485c1} expr=0x08048390[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7906[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485ba,0x080485bb,0x080485c1} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7906[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485ba,0x080485bb,0x080485c1} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7906[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485ba,0x080485bb,0x080485c1} expr=-123[8] }
          flags = { }
        address = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v7906[32] 4[32]) -4[32]) }
          value = { defs={0x080485ba,0x080485bb,0x080485c1} expr=-58[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v7906[32] 3[32]) }
          value = { defs={} expr=v7960[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7906[32] 2[32]) }
          value = { defs={} expr=v7959[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7906[32] 1[32]) }
          value = { defs={} expr=v7958[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v7906[32] }
          value = { defs={} expr=v7957[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485c6:pop    eax
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8129[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8130[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8131[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8132[8]))) }
        cx      = { defs={} expr=v8075[32] }
        dx      = { defs={} expr=v8076[32] }
        bx      = { defs={} expr=v8077[32] }
        sp      = { defs={0x080485c6} expr=(add[32] v8078[32] 4[32]) }
        bp      = { defs={} expr=v8079[32] }
        si      = { defs={} expr=v8080[32] }
        di      = { defs={} expr=v8081[32] }
        es      = { defs={} expr=v8082[16] }
        cs      = { defs={} expr=v8083[16] }
        ss      = { defs={} expr=v8084[16] }
        ds      = { defs={} expr=v8085[16] }
        fs      = { defs={} expr=v8086[16] }
        gs      = { defs={} expr=v8087[16] }
        cf      = { defs={} expr=v8088[1] }
        ?1      = { defs={} expr=v8089[1] }
        pf      = { defs={} expr=v8090[1] }
        ?3      = { defs={} expr=v8091[1] }
        af      = { defs={} expr=v8092[1] }
        ?5      = { defs={} expr=v8093[1] }
        zf      = { defs={} expr=v8094[1] }
        sf      = { defs={} expr=v8095[1] }
        tf      = { defs={} expr=v8096[1] }
        if      = { defs={} expr=v8097[1] }
        df      = { defs={} expr=v8098[1] }
        of      = { defs={} expr=v8099[1] }
        iopl0   = { defs={} expr=v8100[1] }
        iopl1   = { defs={} expr=v8101[1] }
        nt      = { defs={} expr=v8102[1] }
        ?15     = { defs={} expr=v8103[1] }
        rf      = { defs={} expr=v8104[1] }
        vm      = { defs={} expr=v8105[1] }
        ac      = { defs={} expr=v8106[1] }
        vif     = { defs={} expr=v8107[1] }
        vip     = { defs={} expr=v8108[1] }
        id      = { defs={} expr=v8109[1] }
        ?22     = { defs={} expr=v8110[1] }
        ?23     = { defs={} expr=v8111[1] }
        ?24     = { defs={} expr=v8112[1] }
        ?25     = { defs={} expr=v8113[1] }
        ?26     = { defs={} expr=v8114[1] }
        ?27     = { defs={} expr=v8115[1] }
        ?28     = { defs={} expr=v8116[1] }
        ?29     = { defs={} expr=v8117[1] }
        ?30     = { defs={} expr=v8118[1] }
        ?31     = { defs={} expr=v8119[1] }
        ip      = { defs={0x080485c6} expr=0x080485c7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v8078[32] 3[32]) }
          value = { defs={} expr=v8132[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8078[32] 2[32]) }
          value = { defs={} expr=v8131[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8078[32] 1[32]) }
          value = { defs={} expr=v8130[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8078[32] }
          value = { defs={} expr=v8129[8] }
          flags = { rdonly }
0x80485c7:pop    ebx
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8129[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8130[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8131[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8132[8]))) }
        cx      = { defs={} expr=v8075[32] }
        dx      = { defs={} expr=v8076[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8149[8]))) }
        sp      = { defs={0x080485c6,0x080485c7} expr=(add[32] (add[32] v8078[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v8079[32] }
        si      = { defs={} expr=v8080[32] }
        di      = { defs={} expr=v8081[32] }
        es      = { defs={} expr=v8082[16] }
        cs      = { defs={} expr=v8083[16] }
        ss      = { defs={} expr=v8084[16] }
        ds      = { defs={} expr=v8085[16] }
        fs      = { defs={} expr=v8086[16] }
        gs      = { defs={} expr=v8087[16] }
        cf      = { defs={} expr=v8088[1] }
        ?1      = { defs={} expr=v8089[1] }
        pf      = { defs={} expr=v8090[1] }
        ?3      = { defs={} expr=v8091[1] }
        af      = { defs={} expr=v8092[1] }
        ?5      = { defs={} expr=v8093[1] }
        zf      = { defs={} expr=v8094[1] }
        sf      = { defs={} expr=v8095[1] }
        tf      = { defs={} expr=v8096[1] }
        if      = { defs={} expr=v8097[1] }
        df      = { defs={} expr=v8098[1] }
        of      = { defs={} expr=v8099[1] }
        iopl0   = { defs={} expr=v8100[1] }
        iopl1   = { defs={} expr=v8101[1] }
        nt      = { defs={} expr=v8102[1] }
        ?15     = { defs={} expr=v8103[1] }
        rf      = { defs={} expr=v8104[1] }
        vm      = { defs={} expr=v8105[1] }
        ac      = { defs={} expr=v8106[1] }
        vif     = { defs={} expr=v8107[1] }
        vip     = { defs={} expr=v8108[1] }
        id      = { defs={} expr=v8109[1] }
        ?22     = { defs={} expr=v8110[1] }
        ?23     = { defs={} expr=v8111[1] }
        ?24     = { defs={} expr=v8112[1] }
        ?25     = { defs={} expr=v8113[1] }
        ?26     = { defs={} expr=v8114[1] }
        ?27     = { defs={} expr=v8115[1] }
        ?28     = { defs={} expr=v8116[1] }
        ?29     = { defs={} expr=v8117[1] }
        ?30     = { defs={} expr=v8118[1] }
        ?31     = { defs={} expr=v8119[1] }
        ip      = { defs={0x080485c6,0x080485c7} expr=0x080485c8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v8078[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8149[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8078[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8148[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8078[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8147[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v8078[32] 4[32]) }
          value = { defs={} expr=v8146[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8078[32] 3[32]) }
          value = { defs={} expr=v8132[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8078[32] 2[32]) }
          value = { defs={} expr=v8131[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8078[32] 1[32]) }
          value = { defs={} expr=v8130[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8078[32] }
          value = { defs={} expr=v8129[8] }
          flags = { rdonly }
0x80485c8:leave  
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8129[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8130[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8131[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8132[8]))) }
        cx      = { defs={} expr=v8075[32] }
        dx      = { defs={} expr=v8076[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8149[8]))) }
        sp      = { defs={0x080485c8} expr=(add[32] v8079[32] 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8165[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) v8079[32] v8164[8]) v8079[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8167[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) (add[32] v8079[32] 1[32]) v8166[8]) (add[32] v8079[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8169[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) (add[32] v8079[32] 2[32]) v8168[8]) (add[32] v8079[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8171[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) (add[32] v8079[32] 3[32]) v8170[8]) (add[32] v8079[32] 3[32]))))) }
        si      = { defs={} expr=v8080[32] }
        di      = { defs={} expr=v8081[32] }
        es      = { defs={} expr=v8082[16] }
        cs      = { defs={} expr=v8083[16] }
        ss      = { defs={} expr=v8084[16] }
        ds      = { defs={} expr=v8085[16] }
        fs      = { defs={} expr=v8086[16] }
        gs      = { defs={} expr=v8087[16] }
        cf      = { defs={} expr=v8088[1] }
        ?1      = { defs={} expr=v8089[1] }
        pf      = { defs={} expr=v8090[1] }
        ?3      = { defs={} expr=v8091[1] }
        af      = { defs={} expr=v8092[1] }
        ?5      = { defs={} expr=v8093[1] }
        zf      = { defs={} expr=v8094[1] }
        sf      = { defs={} expr=v8095[1] }
        tf      = { defs={} expr=v8096[1] }
        if      = { defs={} expr=v8097[1] }
        df      = { defs={} expr=v8098[1] }
        of      = { defs={} expr=v8099[1] }
        iopl0   = { defs={} expr=v8100[1] }
        iopl1   = { defs={} expr=v8101[1] }
        nt      = { defs={} expr=v8102[1] }
        ?15     = { defs={} expr=v8103[1] }
        rf      = { defs={} expr=v8104[1] }
        vm      = { defs={} expr=v8105[1] }
        ac      = { defs={} expr=v8106[1] }
        vif     = { defs={} expr=v8107[1] }
        vip     = { defs={} expr=v8108[1] }
        id      = { defs={} expr=v8109[1] }
        ?22     = { defs={} expr=v8110[1] }
        ?23     = { defs={} expr=v8111[1] }
        ?24     = { defs={} expr=v8112[1] }
        ?25     = { defs={} expr=v8113[1] }
        ?26     = { defs={} expr=v8114[1] }
        ?27     = { defs={} expr=v8115[1] }
        ?28     = { defs={} expr=v8116[1] }
        ?29     = { defs={} expr=v8117[1] }
        ?30     = { defs={} expr=v8118[1] }
        ?31     = { defs={} expr=v8119[1] }
        ip      = { defs={0x080485c6,0x080485c7,0x080485c8} expr=0x080485c9[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v8079[32] 3[32]) }
          value = { defs={} expr=v8170[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8079[32] 2[32]) }
          value = { defs={} expr=v8168[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8079[32] 1[32]) }
          value = { defs={} expr=v8166[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v8079[32] }
          value = { defs={} expr=v8164[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8078[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8149[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8078[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8148[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8078[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8147[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v8078[32] 4[32]) }
          value = { defs={} expr=v8146[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8078[32] 3[32]) }
          value = { defs={} expr=v8132[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8078[32] 2[32]) }
          value = { defs={} expr=v8131[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8078[32] 1[32]) }
          value = { defs={} expr=v8130[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8078[32] }
          value = { defs={} expr=v8129[8] }
          flags = { rdonly }
0x80485c9:ret    
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8129[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8130[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8131[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8132[8]))) }
        cx      = { defs={} expr=v8075[32] }
        dx      = { defs={} expr=v8076[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8149[8]))) }
        sp      = { defs={0x080485c8,0x080485c9} expr=(add[32] (add[32] v8079[32] 4[32]) 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8165[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) v8079[32] v8164[8]) v8079[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8167[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) (add[32] v8079[32] 1[32]) v8166[8]) (add[32] v8079[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8169[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) (add[32] v8079[32] 2[32]) v8168[8]) (add[32] v8079[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8171[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) (add[32] v8079[32] 3[32]) v8170[8]) (add[32] v8079[32] 3[32]))))) }
        si      = { defs={} expr=v8080[32] }
        di      = { defs={} expr=v8081[32] }
        es      = { defs={} expr=v8082[16] }
        cs      = { defs={} expr=v8083[16] }
        ss      = { defs={} expr=v8084[16] }
        ds      = { defs={} expr=v8085[16] }
        fs      = { defs={} expr=v8086[16] }
        gs      = { defs={} expr=v8087[16] }
        cf      = { defs={} expr=v8088[1] }
        ?1      = { defs={} expr=v8089[1] }
        pf      = { defs={} expr=v8090[1] }
        ?3      = { defs={} expr=v8091[1] }
        af      = { defs={} expr=v8092[1] }
        ?5      = { defs={} expr=v8093[1] }
        zf      = { defs={} expr=v8094[1] }
        sf      = { defs={} expr=v8095[1] }
        tf      = { defs={} expr=v8096[1] }
        if      = { defs={} expr=v8097[1] }
        df      = { defs={} expr=v8098[1] }
        of      = { defs={} expr=v8099[1] }
        iopl0   = { defs={} expr=v8100[1] }
        iopl1   = { defs={} expr=v8101[1] }
        nt      = { defs={} expr=v8102[1] }
        ?15     = { defs={} expr=v8103[1] }
        rf      = { defs={} expr=v8104[1] }
        vm      = { defs={} expr=v8105[1] }
        ac      = { defs={} expr=v8106[1] }
        vif     = { defs={} expr=v8107[1] }
        vip     = { defs={} expr=v8108[1] }
        id      = { defs={} expr=v8109[1] }
        ?22     = { defs={} expr=v8110[1] }
        ?23     = { defs={} expr=v8111[1] }
        ?24     = { defs={} expr=v8112[1] }
        ?25     = { defs={} expr=v8113[1] }
        ?26     = { defs={} expr=v8114[1] }
        ?27     = { defs={} expr=v8115[1] }
        ?28     = { defs={} expr=v8116[1] }
        ?29     = { defs={} expr=v8117[1] }
        ?30     = { defs={} expr=v8118[1] }
        ?31     = { defs={} expr=v8119[1] }
        ip      = { defs={0x080485c9} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8187[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) (add[32] v8079[32] 4[32]) v8186[8]) (add[32] v8079[32] 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8189[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) (add[32] (add[32] v8079[32] 4[32]) 1[32]) v8188[8]) (add[32] (add[32] v8079[32] 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8191[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) (add[32] (add[32] v8079[32] 4[32]) 2[32]) v8190[8]) (add[32] (add[32] v8079[32] 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m8193[8] (add[32] (add[32] v8078[32] 4[32]) 3[32]) v8149[8]) (add[32] (add[32] v8078[32] 4[32]) 2[32]) v8148[8]) (add[32] (add[32] v8078[32] 4[32]) 1[32]) v8147[8]) (add[32] v8078[32] 4[32]) v8146[8]) (add[32] v8078[32] 3[32]) v8132[8]) (add[32] v8078[32] 2[32]) v8131[8]) (add[32] v8078[32] 1[32]) v8130[8]) v8078[32] v8129[8]) (add[32] (add[32] v8079[32] 4[32]) 3[32]) v8192[8]) (add[32] (add[32] v8079[32] 4[32]) 3[32]))))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v8079[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8192[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8079[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8079[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8188[8] }
          flags = { rdonly }
        address = { defs={0x080485c8,0x080485c9} expr=(add[32] v8079[32] 4[32]) }
          value = { defs={} expr=v8186[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8079[32] 3[32]) }
          value = { defs={} expr=v8170[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8079[32] 2[32]) }
          value = { defs={} expr=v8168[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8079[32] 1[32]) }
          value = { defs={} expr=v8166[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v8079[32] }
          value = { defs={} expr=v8164[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8078[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8149[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8078[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8148[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8078[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8147[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v8078[32] 4[32]) }
          value = { defs={} expr=v8146[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8078[32] 3[32]) }
          value = { defs={} expr=v8132[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8078[32] 2[32]) }
          value = { defs={} expr=v8131[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8078[32] 1[32]) }
          value = { defs={} expr=v8130[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8078[32] }
          value = { defs={} expr=v8129[8] }
          flags = { rdonly }
analyzed headers: 1
