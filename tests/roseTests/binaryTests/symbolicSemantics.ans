=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482c8:push   ebp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={} expr=v53[32] }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8} expr=0x080482c9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482c9:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9} expr=0x080482cb[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482cb:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb} expr=(add[32] (add[32] v52[32] -4[32]) -8[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9,0x080482cb} expr=0x080482ce[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482ce:call   0x08048364<call_gmon_start>
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482ce} expr=0x08048364[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={0x080482c8,0x080482c9,0x080482cb,0x080482ce} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={0x080482c8,0x080482c9,0x080482cb,0x080482ce} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={0x080482c8,0x080482c9,0x080482cb,0x080482ce} expr=-126[8] }
          flags = { }
        address = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={0x080482c8,0x080482c9,0x080482cb,0x080482ce} expr=-45[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={0x080482c8} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d3:call   0x080483d0<frame_dummy>
    registers:
        ax      = { defs={} expr=v223[32] }
        cx      = { defs={} expr=v224[32] }
        dx      = { defs={} expr=v225[32] }
        bx      = { defs={} expr=v226[32] }
        sp      = { defs={0x080482d3} expr=(add[32] v227[32] -4[32]) }
        bp      = { defs={} expr=v228[32] }
        si      = { defs={} expr=v229[32] }
        di      = { defs={} expr=v230[32] }
        es      = { defs={} expr=v231[16] }
        cs      = { defs={} expr=v232[16] }
        ss      = { defs={} expr=v233[16] }
        ds      = { defs={} expr=v234[16] }
        fs      = { defs={} expr=v235[16] }
        gs      = { defs={} expr=v236[16] }
        cf      = { defs={} expr=v237[1] }
        ?1      = { defs={} expr=v238[1] }
        pf      = { defs={} expr=v239[1] }
        ?3      = { defs={} expr=v240[1] }
        af      = { defs={} expr=v241[1] }
        ?5      = { defs={} expr=v242[1] }
        zf      = { defs={} expr=v243[1] }
        sf      = { defs={} expr=v244[1] }
        tf      = { defs={} expr=v245[1] }
        if      = { defs={} expr=v246[1] }
        df      = { defs={} expr=v247[1] }
        of      = { defs={} expr=v248[1] }
        iopl0   = { defs={} expr=v249[1] }
        iopl1   = { defs={} expr=v250[1] }
        nt      = { defs={} expr=v251[1] }
        ?15     = { defs={} expr=v252[1] }
        rf      = { defs={} expr=v253[1] }
        vm      = { defs={} expr=v254[1] }
        ac      = { defs={} expr=v255[1] }
        vif     = { defs={} expr=v256[1] }
        vip     = { defs={} expr=v257[1] }
        id      = { defs={} expr=v258[1] }
        ?22     = { defs={} expr=v259[1] }
        ?23     = { defs={} expr=v260[1] }
        ?24     = { defs={} expr=v261[1] }
        ?25     = { defs={} expr=v262[1] }
        ?26     = { defs={} expr=v263[1] }
        ?27     = { defs={} expr=v264[1] }
        ?28     = { defs={} expr=v265[1] }
        ?29     = { defs={} expr=v266[1] }
        ?30     = { defs={} expr=v267[1] }
        ?31     = { defs={} expr=v268[1] }
        ip      = { defs={0x080482d3} expr=0x080483d0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v227[32] -4[32]) 3[32]) }
          value = { defs={0x080482d3} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v227[32] -4[32]) 2[32]) }
          value = { defs={0x080482d3} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v227[32] -4[32]) 1[32]) }
          value = { defs={0x080482d3} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d3} expr=(add[32] v227[32] -4[32]) }
          value = { defs={0x080482d3} expr=-40[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d8:call   0x08048580<__do_global_ctors_aux>
    registers:
        ax      = { defs={} expr=v330[32] }
        cx      = { defs={} expr=v331[32] }
        dx      = { defs={} expr=v332[32] }
        bx      = { defs={} expr=v333[32] }
        sp      = { defs={0x080482d8} expr=(add[32] v334[32] -4[32]) }
        bp      = { defs={} expr=v335[32] }
        si      = { defs={} expr=v336[32] }
        di      = { defs={} expr=v337[32] }
        es      = { defs={} expr=v338[16] }
        cs      = { defs={} expr=v339[16] }
        ss      = { defs={} expr=v340[16] }
        ds      = { defs={} expr=v341[16] }
        fs      = { defs={} expr=v342[16] }
        gs      = { defs={} expr=v343[16] }
        cf      = { defs={} expr=v344[1] }
        ?1      = { defs={} expr=v345[1] }
        pf      = { defs={} expr=v346[1] }
        ?3      = { defs={} expr=v347[1] }
        af      = { defs={} expr=v348[1] }
        ?5      = { defs={} expr=v349[1] }
        zf      = { defs={} expr=v350[1] }
        sf      = { defs={} expr=v351[1] }
        tf      = { defs={} expr=v352[1] }
        if      = { defs={} expr=v353[1] }
        df      = { defs={} expr=v354[1] }
        of      = { defs={} expr=v355[1] }
        iopl0   = { defs={} expr=v356[1] }
        iopl1   = { defs={} expr=v357[1] }
        nt      = { defs={} expr=v358[1] }
        ?15     = { defs={} expr=v359[1] }
        rf      = { defs={} expr=v360[1] }
        vm      = { defs={} expr=v361[1] }
        ac      = { defs={} expr=v362[1] }
        vif     = { defs={} expr=v363[1] }
        vip     = { defs={} expr=v364[1] }
        id      = { defs={} expr=v365[1] }
        ?22     = { defs={} expr=v366[1] }
        ?23     = { defs={} expr=v367[1] }
        ?24     = { defs={} expr=v368[1] }
        ?25     = { defs={} expr=v369[1] }
        ?26     = { defs={} expr=v370[1] }
        ?27     = { defs={} expr=v371[1] }
        ?28     = { defs={} expr=v372[1] }
        ?29     = { defs={} expr=v373[1] }
        ?30     = { defs={} expr=v374[1] }
        ?31     = { defs={} expr=v375[1] }
        ip      = { defs={0x080482d8} expr=0x08048580[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v334[32] -4[32]) 3[32]) }
          value = { defs={0x080482d8} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v334[32] -4[32]) 2[32]) }
          value = { defs={0x080482d8} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v334[32] -4[32]) 1[32]) }
          value = { defs={0x080482d8} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d8} expr=(add[32] v334[32] -4[32]) }
          value = { defs={0x080482d8} expr=-35[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482dd:leave  
    registers:
        ax      = { defs={} expr=v437[32] }
        cx      = { defs={} expr=v438[32] }
        dx      = { defs={} expr=v439[32] }
        bx      = { defs={} expr=v440[32] }
        sp      = { defs={0x080482dd} expr=(add[32] v442[32] 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v493[8]) (shr0[32] 8[32] (uextend[32] 32[32] v494[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v495[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v496[8]))) }
        si      = { defs={} expr=v443[32] }
        di      = { defs={} expr=v444[32] }
        es      = { defs={} expr=v445[16] }
        cs      = { defs={} expr=v446[16] }
        ss      = { defs={} expr=v447[16] }
        ds      = { defs={} expr=v448[16] }
        fs      = { defs={} expr=v449[16] }
        gs      = { defs={} expr=v450[16] }
        cf      = { defs={} expr=v451[1] }
        ?1      = { defs={} expr=v452[1] }
        pf      = { defs={} expr=v453[1] }
        ?3      = { defs={} expr=v454[1] }
        af      = { defs={} expr=v455[1] }
        ?5      = { defs={} expr=v456[1] }
        zf      = { defs={} expr=v457[1] }
        sf      = { defs={} expr=v458[1] }
        tf      = { defs={} expr=v459[1] }
        if      = { defs={} expr=v460[1] }
        df      = { defs={} expr=v461[1] }
        of      = { defs={} expr=v462[1] }
        iopl0   = { defs={} expr=v463[1] }
        iopl1   = { defs={} expr=v464[1] }
        nt      = { defs={} expr=v465[1] }
        ?15     = { defs={} expr=v466[1] }
        rf      = { defs={} expr=v467[1] }
        vm      = { defs={} expr=v468[1] }
        ac      = { defs={} expr=v469[1] }
        vif     = { defs={} expr=v470[1] }
        vip     = { defs={} expr=v471[1] }
        id      = { defs={} expr=v472[1] }
        ?22     = { defs={} expr=v473[1] }
        ?23     = { defs={} expr=v474[1] }
        ?24     = { defs={} expr=v475[1] }
        ?25     = { defs={} expr=v476[1] }
        ?26     = { defs={} expr=v477[1] }
        ?27     = { defs={} expr=v478[1] }
        ?28     = { defs={} expr=v479[1] }
        ?29     = { defs={} expr=v480[1] }
        ?30     = { defs={} expr=v481[1] }
        ?31     = { defs={} expr=v482[1] }
        ip      = { defs={0x080482dd} expr=0x080482de[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v442[32] 3[32]) }
          value = { defs={} expr=v496[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v442[32] 2[32]) }
          value = { defs={} expr=v495[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v442[32] 1[32]) }
          value = { defs={} expr=v494[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v442[32] }
          value = { defs={} expr=v493[8] }
          flags = { rdonly }
0x80482de:ret    
    registers:
        ax      = { defs={} expr=v437[32] }
        cx      = { defs={} expr=v438[32] }
        dx      = { defs={} expr=v439[32] }
        bx      = { defs={} expr=v440[32] }
        sp      = { defs={0x080482dd,0x080482de} expr=(add[32] (add[32] v442[32] 4[32]) 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v493[8]) (shr0[32] 8[32] (uextend[32] 32[32] v494[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v495[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v496[8]))) }
        si      = { defs={} expr=v443[32] }
        di      = { defs={} expr=v444[32] }
        es      = { defs={} expr=v445[16] }
        cs      = { defs={} expr=v446[16] }
        ss      = { defs={} expr=v447[16] }
        ds      = { defs={} expr=v448[16] }
        fs      = { defs={} expr=v449[16] }
        gs      = { defs={} expr=v450[16] }
        cf      = { defs={} expr=v451[1] }
        ?1      = { defs={} expr=v452[1] }
        pf      = { defs={} expr=v453[1] }
        ?3      = { defs={} expr=v454[1] }
        af      = { defs={} expr=v455[1] }
        ?5      = { defs={} expr=v456[1] }
        zf      = { defs={} expr=v457[1] }
        sf      = { defs={} expr=v458[1] }
        tf      = { defs={} expr=v459[1] }
        if      = { defs={} expr=v460[1] }
        df      = { defs={} expr=v461[1] }
        of      = { defs={} expr=v462[1] }
        iopl0   = { defs={} expr=v463[1] }
        iopl1   = { defs={} expr=v464[1] }
        nt      = { defs={} expr=v465[1] }
        ?15     = { defs={} expr=v466[1] }
        rf      = { defs={} expr=v467[1] }
        vm      = { defs={} expr=v468[1] }
        ac      = { defs={} expr=v469[1] }
        vif     = { defs={} expr=v470[1] }
        vip     = { defs={} expr=v471[1] }
        id      = { defs={} expr=v472[1] }
        ?22     = { defs={} expr=v473[1] }
        ?23     = { defs={} expr=v474[1] }
        ?24     = { defs={} expr=v475[1] }
        ?25     = { defs={} expr=v476[1] }
        ?26     = { defs={} expr=v477[1] }
        ?27     = { defs={} expr=v478[1] }
        ?28     = { defs={} expr=v479[1] }
        ?29     = { defs={} expr=v480[1] }
        ?30     = { defs={} expr=v481[1] }
        ?31     = { defs={} expr=v482[1] }
        ip      = { defs={0x080482de} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v511[8]) (shr0[32] 8[32] (uextend[32] 32[32] v512[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v513[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v514[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v442[32] 4[32]) 3[32]) }
          value = { defs={} expr=v514[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v442[32] 4[32]) 2[32]) }
          value = { defs={} expr=v513[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v442[32] 4[32]) 1[32]) }
          value = { defs={} expr=v512[8] }
          flags = { rdonly }
        address = { defs={0x080482dd,0x080482de} expr=(add[32] v442[32] 4[32]) }
          value = { defs={} expr=v511[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v442[32] 3[32]) }
          value = { defs={} expr=v496[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v442[32] 2[32]) }
          value = { defs={} expr=v495[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v442[32] 1[32]) }
          value = { defs={} expr=v494[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v442[32] }
          value = { defs={} expr=v493[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>]
    registers:
        ax      = { defs={} expr=v569[32] }
        cx      = { defs={} expr=v570[32] }
        dx      = { defs={} expr=v571[32] }
        bx      = { defs={} expr=v572[32] }
        sp      = { defs={} expr=v573[32] }
        bp      = { defs={} expr=v574[32] }
        si      = { defs={} expr=v575[32] }
        di      = { defs={} expr=v576[32] }
        es      = { defs={} expr=v577[16] }
        cs      = { defs={} expr=v578[16] }
        ss      = { defs={} expr=v579[16] }
        ds      = { defs={} expr=v580[16] }
        fs      = { defs={} expr=v581[16] }
        gs      = { defs={} expr=v582[16] }
        cf      = { defs={} expr=v583[1] }
        ?1      = { defs={} expr=v584[1] }
        pf      = { defs={} expr=v585[1] }
        ?3      = { defs={} expr=v586[1] }
        af      = { defs={} expr=v587[1] }
        ?5      = { defs={} expr=v588[1] }
        zf      = { defs={} expr=v589[1] }
        sf      = { defs={} expr=v590[1] }
        tf      = { defs={} expr=v591[1] }
        if      = { defs={} expr=v592[1] }
        df      = { defs={} expr=v593[1] }
        of      = { defs={} expr=v594[1] }
        iopl0   = { defs={} expr=v595[1] }
        iopl1   = { defs={} expr=v596[1] }
        nt      = { defs={} expr=v597[1] }
        ?15     = { defs={} expr=v598[1] }
        rf      = { defs={} expr=v599[1] }
        vm      = { defs={} expr=v600[1] }
        ac      = { defs={} expr=v601[1] }
        vif     = { defs={} expr=v602[1] }
        vip     = { defs={} expr=v603[1] }
        id      = { defs={} expr=v604[1] }
        ?22     = { defs={} expr=v605[1] }
        ?23     = { defs={} expr=v606[1] }
        ?24     = { defs={} expr=v607[1] }
        ?25     = { defs={} expr=v608[1] }
        ?26     = { defs={} expr=v609[1] }
        ?27     = { defs={} expr=v610[1] }
        ?28     = { defs={} expr=v611[1] }
        ?29     = { defs={} expr=v612[1] }
        ?30     = { defs={} expr=v613[1] }
        ?31     = { defs={} expr=v614[1] }
        ip      = { defs={0x080482f0} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v621[8]) (shr0[32] 8[32] (uextend[32] 32[32] v622[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v623[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v624[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496d7[32] }
          value = { defs={} expr=v624[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d6[32] }
          value = { defs={} expr=v623[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d5[32] }
          value = { defs={} expr=v622[8] }
          flags = { rdonly }
        address = { defs={0x080482f0} expr=0x080496d4[32] }
          value = { defs={} expr=v621[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>]
    registers:
        ax      = { defs={} expr=v678[32] }
        cx      = { defs={} expr=v679[32] }
        dx      = { defs={} expr=v680[32] }
        bx      = { defs={} expr=v681[32] }
        sp      = { defs={} expr=v682[32] }
        bp      = { defs={} expr=v683[32] }
        si      = { defs={} expr=v684[32] }
        di      = { defs={} expr=v685[32] }
        es      = { defs={} expr=v686[16] }
        cs      = { defs={} expr=v687[16] }
        ss      = { defs={} expr=v688[16] }
        ds      = { defs={} expr=v689[16] }
        fs      = { defs={} expr=v690[16] }
        gs      = { defs={} expr=v691[16] }
        cf      = { defs={} expr=v692[1] }
        ?1      = { defs={} expr=v693[1] }
        pf      = { defs={} expr=v694[1] }
        ?3      = { defs={} expr=v695[1] }
        af      = { defs={} expr=v696[1] }
        ?5      = { defs={} expr=v697[1] }
        zf      = { defs={} expr=v698[1] }
        sf      = { defs={} expr=v699[1] }
        tf      = { defs={} expr=v700[1] }
        if      = { defs={} expr=v701[1] }
        df      = { defs={} expr=v702[1] }
        of      = { defs={} expr=v703[1] }
        iopl0   = { defs={} expr=v704[1] }
        iopl1   = { defs={} expr=v705[1] }
        nt      = { defs={} expr=v706[1] }
        ?15     = { defs={} expr=v707[1] }
        rf      = { defs={} expr=v708[1] }
        vm      = { defs={} expr=v709[1] }
        ac      = { defs={} expr=v710[1] }
        vif     = { defs={} expr=v711[1] }
        vip     = { defs={} expr=v712[1] }
        id      = { defs={} expr=v713[1] }
        ?22     = { defs={} expr=v714[1] }
        ?23     = { defs={} expr=v715[1] }
        ?24     = { defs={} expr=v716[1] }
        ?25     = { defs={} expr=v717[1] }
        ?26     = { defs={} expr=v718[1] }
        ?27     = { defs={} expr=v719[1] }
        ?28     = { defs={} expr=v720[1] }
        ?29     = { defs={} expr=v721[1] }
        ?30     = { defs={} expr=v722[1] }
        ?31     = { defs={} expr=v723[1] }
        ip      = { defs={0x08048300} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v730[8]) (shr0[32] 8[32] (uextend[32] 32[32] v731[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v732[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v733[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496db[32] }
          value = { defs={} expr=v733[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496da[32] }
          value = { defs={} expr=v732[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d9[32] }
          value = { defs={} expr=v731[8] }
          flags = { rdonly }
        address = { defs={0x08048300} expr=0x080496d8[32] }
          value = { defs={} expr=v730[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>]
    registers:
        ax      = { defs={} expr=v787[32] }
        cx      = { defs={} expr=v788[32] }
        dx      = { defs={} expr=v789[32] }
        bx      = { defs={} expr=v790[32] }
        sp      = { defs={} expr=v791[32] }
        bp      = { defs={} expr=v792[32] }
        si      = { defs={} expr=v793[32] }
        di      = { defs={} expr=v794[32] }
        es      = { defs={} expr=v795[16] }
        cs      = { defs={} expr=v796[16] }
        ss      = { defs={} expr=v797[16] }
        ds      = { defs={} expr=v798[16] }
        fs      = { defs={} expr=v799[16] }
        gs      = { defs={} expr=v800[16] }
        cf      = { defs={} expr=v801[1] }
        ?1      = { defs={} expr=v802[1] }
        pf      = { defs={} expr=v803[1] }
        ?3      = { defs={} expr=v804[1] }
        af      = { defs={} expr=v805[1] }
        ?5      = { defs={} expr=v806[1] }
        zf      = { defs={} expr=v807[1] }
        sf      = { defs={} expr=v808[1] }
        tf      = { defs={} expr=v809[1] }
        if      = { defs={} expr=v810[1] }
        df      = { defs={} expr=v811[1] }
        of      = { defs={} expr=v812[1] }
        iopl0   = { defs={} expr=v813[1] }
        iopl1   = { defs={} expr=v814[1] }
        nt      = { defs={} expr=v815[1] }
        ?15     = { defs={} expr=v816[1] }
        rf      = { defs={} expr=v817[1] }
        vm      = { defs={} expr=v818[1] }
        ac      = { defs={} expr=v819[1] }
        vif     = { defs={} expr=v820[1] }
        vip     = { defs={} expr=v821[1] }
        id      = { defs={} expr=v822[1] }
        ?22     = { defs={} expr=v823[1] }
        ?23     = { defs={} expr=v824[1] }
        ?24     = { defs={} expr=v825[1] }
        ?25     = { defs={} expr=v826[1] }
        ?26     = { defs={} expr=v827[1] }
        ?27     = { defs={} expr=v828[1] }
        ?28     = { defs={} expr=v829[1] }
        ?29     = { defs={} expr=v830[1] }
        ?30     = { defs={} expr=v831[1] }
        ?31     = { defs={} expr=v832[1] }
        ip      = { defs={0x08048310} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v839[8]) (shr0[32] 8[32] (uextend[32] 32[32] v840[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v841[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v842[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496df[32] }
          value = { defs={} expr=v842[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496de[32] }
          value = { defs={} expr=v841[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496dd[32] }
          value = { defs={} expr=v840[8] }
          flags = { rdonly }
        address = { defs={0x08048310} expr=0x080496dc[32] }
          value = { defs={} expr=v839[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>]
    registers:
        ax      = { defs={} expr=v896[32] }
        cx      = { defs={} expr=v897[32] }
        dx      = { defs={} expr=v898[32] }
        bx      = { defs={} expr=v899[32] }
        sp      = { defs={} expr=v900[32] }
        bp      = { defs={} expr=v901[32] }
        si      = { defs={} expr=v902[32] }
        di      = { defs={} expr=v903[32] }
        es      = { defs={} expr=v904[16] }
        cs      = { defs={} expr=v905[16] }
        ss      = { defs={} expr=v906[16] }
        ds      = { defs={} expr=v907[16] }
        fs      = { defs={} expr=v908[16] }
        gs      = { defs={} expr=v909[16] }
        cf      = { defs={} expr=v910[1] }
        ?1      = { defs={} expr=v911[1] }
        pf      = { defs={} expr=v912[1] }
        ?3      = { defs={} expr=v913[1] }
        af      = { defs={} expr=v914[1] }
        ?5      = { defs={} expr=v915[1] }
        zf      = { defs={} expr=v916[1] }
        sf      = { defs={} expr=v917[1] }
        tf      = { defs={} expr=v918[1] }
        if      = { defs={} expr=v919[1] }
        df      = { defs={} expr=v920[1] }
        of      = { defs={} expr=v921[1] }
        iopl0   = { defs={} expr=v922[1] }
        iopl1   = { defs={} expr=v923[1] }
        nt      = { defs={} expr=v924[1] }
        ?15     = { defs={} expr=v925[1] }
        rf      = { defs={} expr=v926[1] }
        vm      = { defs={} expr=v927[1] }
        ac      = { defs={} expr=v928[1] }
        vif     = { defs={} expr=v929[1] }
        vip     = { defs={} expr=v930[1] }
        id      = { defs={} expr=v931[1] }
        ?22     = { defs={} expr=v932[1] }
        ?23     = { defs={} expr=v933[1] }
        ?24     = { defs={} expr=v934[1] }
        ?25     = { defs={} expr=v935[1] }
        ?26     = { defs={} expr=v936[1] }
        ?27     = { defs={} expr=v937[1] }
        ?28     = { defs={} expr=v938[1] }
        ?29     = { defs={} expr=v939[1] }
        ?30     = { defs={} expr=v940[1] }
        ?31     = { defs={} expr=v941[1] }
        ip      = { defs={0x08048320} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v948[8]) (shr0[32] 8[32] (uextend[32] 32[32] v949[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v950[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v951[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e3[32] }
          value = { defs={} expr=v951[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e2[32] }
          value = { defs={} expr=v950[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e1[32] }
          value = { defs={} expr=v949[8] }
          flags = { rdonly }
        address = { defs={0x08048320} expr=0x080496e0[32] }
          value = { defs={} expr=v948[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>]
    registers:
        ax      = { defs={} expr=v1005[32] }
        cx      = { defs={} expr=v1006[32] }
        dx      = { defs={} expr=v1007[32] }
        bx      = { defs={} expr=v1008[32] }
        sp      = { defs={} expr=v1009[32] }
        bp      = { defs={} expr=v1010[32] }
        si      = { defs={} expr=v1011[32] }
        di      = { defs={} expr=v1012[32] }
        es      = { defs={} expr=v1013[16] }
        cs      = { defs={} expr=v1014[16] }
        ss      = { defs={} expr=v1015[16] }
        ds      = { defs={} expr=v1016[16] }
        fs      = { defs={} expr=v1017[16] }
        gs      = { defs={} expr=v1018[16] }
        cf      = { defs={} expr=v1019[1] }
        ?1      = { defs={} expr=v1020[1] }
        pf      = { defs={} expr=v1021[1] }
        ?3      = { defs={} expr=v1022[1] }
        af      = { defs={} expr=v1023[1] }
        ?5      = { defs={} expr=v1024[1] }
        zf      = { defs={} expr=v1025[1] }
        sf      = { defs={} expr=v1026[1] }
        tf      = { defs={} expr=v1027[1] }
        if      = { defs={} expr=v1028[1] }
        df      = { defs={} expr=v1029[1] }
        of      = { defs={} expr=v1030[1] }
        iopl0   = { defs={} expr=v1031[1] }
        iopl1   = { defs={} expr=v1032[1] }
        nt      = { defs={} expr=v1033[1] }
        ?15     = { defs={} expr=v1034[1] }
        rf      = { defs={} expr=v1035[1] }
        vm      = { defs={} expr=v1036[1] }
        ac      = { defs={} expr=v1037[1] }
        vif     = { defs={} expr=v1038[1] }
        vip     = { defs={} expr=v1039[1] }
        id      = { defs={} expr=v1040[1] }
        ?22     = { defs={} expr=v1041[1] }
        ?23     = { defs={} expr=v1042[1] }
        ?24     = { defs={} expr=v1043[1] }
        ?25     = { defs={} expr=v1044[1] }
        ?26     = { defs={} expr=v1045[1] }
        ?27     = { defs={} expr=v1046[1] }
        ?28     = { defs={} expr=v1047[1] }
        ?29     = { defs={} expr=v1048[1] }
        ?30     = { defs={} expr=v1049[1] }
        ?31     = { defs={} expr=v1050[1] }
        ip      = { defs={0x08048330} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1057[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1058[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1059[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1060[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e7[32] }
          value = { defs={} expr=v1060[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e6[32] }
          value = { defs={} expr=v1059[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e5[32] }
          value = { defs={} expr=v1058[8] }
          flags = { rdonly }
        address = { defs={0x08048330} expr=0x080496e4[32] }
          value = { defs={} expr=v1057[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048340:xor    ebp, ebp
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={} expr=v1115[32] }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={} expr=v1118[32] }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={} expr=v1120[32] }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048340} expr=v1193[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340} expr=0x08048342[32] }
    memory:
    init mem:
0x8048342:pop    esi
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={} expr=v1115[32] }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342} expr=(add[32] v1118[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048340} expr=v1193[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342} expr=0x08048343[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048343:mov    ecx, esp
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342} expr=(add[32] v1118[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048340} expr=v1193[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343} expr=0x08048345[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048345:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345} expr=(bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345} expr=0x08048348[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048348:push   eax
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348} expr=0x08048349[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048349:push   esp
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349} expr=0x0804834a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x804834a:push   edx
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a} expr=0x0804834b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x804834b:push   0x08048520<__libc_csu_fini>
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=0x08048350[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048350:push   0x080484b0<__libc_csu_init>
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=0x08048355[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048350} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048350} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048350} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048350} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048355:push   ecx
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=0x08048356[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 24[32] 32[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 16[32] 24[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 8[32] 16[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 0[32] 8[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048350} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048350} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048350} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048350} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048356:push   esi
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=0x08048357[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 24[32] 32[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 16[32] 24[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 8[32] 16[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 0[32] 8[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048350} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048350} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048350} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048350} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x8048357:push   0x08048410<main>
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=0x0804835c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048357} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048357} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048357} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048357} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 24[32] 32[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 16[32] 24[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 8[32] 16[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 0[32] 8[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048350} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048350} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048350} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048350} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
0x804835c:call   0x08048310<__libc_start_main@plt>
    registers:
        ax      = { defs={} expr=v1114[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1118[32] 4[32]) }
        dx      = { defs={} expr=v1116[32] }
        bx      = { defs={} expr=v1117[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8]))) }
        di      = { defs={} expr=v1121[32] }
        es      = { defs={} expr=v1122[16] }
        cs      = { defs={} expr=v1123[16] }
        ss      = { defs={} expr=v1124[16] }
        ds      = { defs={} expr=v1125[16] }
        fs      = { defs={} expr=v1126[16] }
        gs      = { defs={} expr=v1127[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1129[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1131[1] }
        af      = { defs={0x08048345} expr=v1249[1] }
        ?5      = { defs={} expr=v1133[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1136[1] }
        if      = { defs={} expr=v1137[1] }
        df      = { defs={} expr=v1138[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1140[1] }
        iopl1   = { defs={} expr=v1141[1] }
        nt      = { defs={} expr=v1142[1] }
        ?15     = { defs={} expr=v1143[1] }
        rf      = { defs={} expr=v1144[1] }
        vm      = { defs={} expr=v1145[1] }
        ac      = { defs={} expr=v1146[1] }
        vif     = { defs={} expr=v1147[1] }
        vip     = { defs={} expr=v1148[1] }
        id      = { defs={} expr=v1149[1] }
        ?22     = { defs={} expr=v1150[1] }
        ?23     = { defs={} expr=v1151[1] }
        ?24     = { defs={} expr=v1152[1] }
        ?25     = { defs={} expr=v1153[1] }
        ?26     = { defs={} expr=v1154[1] }
        ?27     = { defs={} expr=v1155[1] }
        ?28     = { defs={} expr=v1156[1] }
        ?29     = { defs={} expr=v1157[1] }
        ?30     = { defs={} expr=v1158[1] }
        ?31     = { defs={} expr=v1159[1] }
        ip      = { defs={0x0804835c} expr=0x08048310[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=-125[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=97[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048357} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048357} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048357} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048357} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048356} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1204[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1206[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1207[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 24[32] 32[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 16[32] 24[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 8[32] 16[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048343,0x08048355} expr=(extract[8] 0[32] 8[32] (add[32] v1118[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048350} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048350} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048350} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048350} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834b} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834b} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 24[32] 32[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 16[32] 24[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 8[32] 16[32] v1116[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x0804834a} expr=(extract[8] 0[32] 8[32] v1116[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048348} expr=(extract[8] 24[32] 32[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048348} expr=(extract[8] 16[32] 24[32] v1114[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048348} expr=(extract[8] 8[32] 16[32] v1114[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1118[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={0x08048348} expr=(extract[8] 0[32] 8[32] v1114[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1118[32] 3[32]) }
          value = { defs={} expr=v1207[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 2[32]) }
          value = { defs={} expr=v1206[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1118[32] 1[32]) }
          value = { defs={} expr=v1205[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1118[32] }
          value = { defs={} expr=v1204[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048361:hlt    
    registers:
        ax      = { defs={} expr=v1397[32] }
        cx      = { defs={} expr=v1398[32] }
        dx      = { defs={} expr=v1399[32] }
        bx      = { defs={} expr=v1400[32] }
        sp      = { defs={} expr=v1401[32] }
        bp      = { defs={} expr=v1402[32] }
        si      = { defs={} expr=v1403[32] }
        di      = { defs={} expr=v1404[32] }
        es      = { defs={} expr=v1405[16] }
        cs      = { defs={} expr=v1406[16] }
        ss      = { defs={} expr=v1407[16] }
        ds      = { defs={} expr=v1408[16] }
        fs      = { defs={} expr=v1409[16] }
        gs      = { defs={} expr=v1410[16] }
        cf      = { defs={} expr=v1411[1] }
        ?1      = { defs={} expr=v1412[1] }
        pf      = { defs={} expr=v1413[1] }
        ?3      = { defs={} expr=v1414[1] }
        af      = { defs={} expr=v1415[1] }
        ?5      = { defs={} expr=v1416[1] }
        zf      = { defs={} expr=v1417[1] }
        sf      = { defs={} expr=v1418[1] }
        tf      = { defs={} expr=v1419[1] }
        if      = { defs={} expr=v1420[1] }
        df      = { defs={} expr=v1421[1] }
        of      = { defs={} expr=v1422[1] }
        iopl0   = { defs={} expr=v1423[1] }
        iopl1   = { defs={} expr=v1424[1] }
        nt      = { defs={} expr=v1425[1] }
        ?15     = { defs={} expr=v1426[1] }
        rf      = { defs={} expr=v1427[1] }
        vm      = { defs={} expr=v1428[1] }
        ac      = { defs={} expr=v1429[1] }
        vif     = { defs={} expr=v1430[1] }
        vip     = { defs={} expr=v1431[1] }
        id      = { defs={} expr=v1432[1] }
        ?22     = { defs={} expr=v1433[1] }
        ?23     = { defs={} expr=v1434[1] }
        ?24     = { defs={} expr=v1435[1] }
        ?25     = { defs={} expr=v1436[1] }
        ?26     = { defs={} expr=v1437[1] }
        ?27     = { defs={} expr=v1438[1] }
        ?28     = { defs={} expr=v1439[1] }
        ?29     = { defs={} expr=v1440[1] }
        ?30     = { defs={} expr=v1441[1] }
        ?31     = { defs={} expr=v1442[1] }
        ip      = { defs={0x08048361} expr=0x08048361[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048364:push   ebp
    registers:
        ax      = { defs={} expr=v1496[32] }
        cx      = { defs={} expr=v1497[32] }
        dx      = { defs={} expr=v1498[32] }
        bx      = { defs={} expr=v1499[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
        bp      = { defs={} expr=v1501[32] }
        si      = { defs={} expr=v1502[32] }
        di      = { defs={} expr=v1503[32] }
        es      = { defs={} expr=v1504[16] }
        cs      = { defs={} expr=v1505[16] }
        ss      = { defs={} expr=v1506[16] }
        ds      = { defs={} expr=v1507[16] }
        fs      = { defs={} expr=v1508[16] }
        gs      = { defs={} expr=v1509[16] }
        cf      = { defs={} expr=v1510[1] }
        ?1      = { defs={} expr=v1511[1] }
        pf      = { defs={} expr=v1512[1] }
        ?3      = { defs={} expr=v1513[1] }
        af      = { defs={} expr=v1514[1] }
        ?5      = { defs={} expr=v1515[1] }
        zf      = { defs={} expr=v1516[1] }
        sf      = { defs={} expr=v1517[1] }
        tf      = { defs={} expr=v1518[1] }
        if      = { defs={} expr=v1519[1] }
        df      = { defs={} expr=v1520[1] }
        of      = { defs={} expr=v1521[1] }
        iopl0   = { defs={} expr=v1522[1] }
        iopl1   = { defs={} expr=v1523[1] }
        nt      = { defs={} expr=v1524[1] }
        ?15     = { defs={} expr=v1525[1] }
        rf      = { defs={} expr=v1526[1] }
        vm      = { defs={} expr=v1527[1] }
        ac      = { defs={} expr=v1528[1] }
        vif     = { defs={} expr=v1529[1] }
        vip     = { defs={} expr=v1530[1] }
        id      = { defs={} expr=v1531[1] }
        ?22     = { defs={} expr=v1532[1] }
        ?23     = { defs={} expr=v1533[1] }
        ?24     = { defs={} expr=v1534[1] }
        ?25     = { defs={} expr=v1535[1] }
        ?26     = { defs={} expr=v1536[1] }
        ?27     = { defs={} expr=v1537[1] }
        ?28     = { defs={} expr=v1538[1] }
        ?29     = { defs={} expr=v1539[1] }
        ?30     = { defs={} expr=v1540[1] }
        ?31     = { defs={} expr=v1541[1] }
        ip      = { defs={0x08048364} expr=0x08048365[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 3[32]) }
          value = { defs={0x08048364} expr=(extract[8] 24[32] 32[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 2[32]) }
          value = { defs={0x08048364} expr=(extract[8] 16[32] 24[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 1[32]) }
          value = { defs={0x08048364} expr=(extract[8] 8[32] 16[32] v1501[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
          value = { defs={0x08048364} expr=(extract[8] 0[32] 8[32] v1501[32]) }
          flags = { }
    init mem:
0x8048365:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v1496[32] }
        cx      = { defs={} expr=v1497[32] }
        dx      = { defs={} expr=v1498[32] }
        bx      = { defs={} expr=v1499[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1500[32] -4[32]) }
        si      = { defs={} expr=v1502[32] }
        di      = { defs={} expr=v1503[32] }
        es      = { defs={} expr=v1504[16] }
        cs      = { defs={} expr=v1505[16] }
        ss      = { defs={} expr=v1506[16] }
        ds      = { defs={} expr=v1507[16] }
        fs      = { defs={} expr=v1508[16] }
        gs      = { defs={} expr=v1509[16] }
        cf      = { defs={} expr=v1510[1] }
        ?1      = { defs={} expr=v1511[1] }
        pf      = { defs={} expr=v1512[1] }
        ?3      = { defs={} expr=v1513[1] }
        af      = { defs={} expr=v1514[1] }
        ?5      = { defs={} expr=v1515[1] }
        zf      = { defs={} expr=v1516[1] }
        sf      = { defs={} expr=v1517[1] }
        tf      = { defs={} expr=v1518[1] }
        if      = { defs={} expr=v1519[1] }
        df      = { defs={} expr=v1520[1] }
        of      = { defs={} expr=v1521[1] }
        iopl0   = { defs={} expr=v1522[1] }
        iopl1   = { defs={} expr=v1523[1] }
        nt      = { defs={} expr=v1524[1] }
        ?15     = { defs={} expr=v1525[1] }
        rf      = { defs={} expr=v1526[1] }
        vm      = { defs={} expr=v1527[1] }
        ac      = { defs={} expr=v1528[1] }
        vif     = { defs={} expr=v1529[1] }
        vip     = { defs={} expr=v1530[1] }
        id      = { defs={} expr=v1531[1] }
        ?22     = { defs={} expr=v1532[1] }
        ?23     = { defs={} expr=v1533[1] }
        ?24     = { defs={} expr=v1534[1] }
        ?25     = { defs={} expr=v1535[1] }
        ?26     = { defs={} expr=v1536[1] }
        ?27     = { defs={} expr=v1537[1] }
        ?28     = { defs={} expr=v1538[1] }
        ?29     = { defs={} expr=v1539[1] }
        ?30     = { defs={} expr=v1540[1] }
        ?31     = { defs={} expr=v1541[1] }
        ip      = { defs={0x08048364,0x08048365} expr=0x08048367[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 3[32]) }
          value = { defs={0x08048364} expr=(extract[8] 24[32] 32[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 2[32]) }
          value = { defs={0x08048364} expr=(extract[8] 16[32] 24[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 1[32]) }
          value = { defs={0x08048364} expr=(extract[8] 8[32] 16[32] v1501[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
          value = { defs={0x08048364} expr=(extract[8] 0[32] 8[32] v1501[32]) }
          flags = { }
    init mem:
0x8048367:push   ebx
    registers:
        ax      = { defs={} expr=v1496[32] }
        cx      = { defs={} expr=v1497[32] }
        dx      = { defs={} expr=v1498[32] }
        bx      = { defs={} expr=v1499[32] }
        sp      = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1500[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1500[32] -4[32]) }
        si      = { defs={} expr=v1502[32] }
        di      = { defs={} expr=v1503[32] }
        es      = { defs={} expr=v1504[16] }
        cs      = { defs={} expr=v1505[16] }
        ss      = { defs={} expr=v1506[16] }
        ds      = { defs={} expr=v1507[16] }
        fs      = { defs={} expr=v1508[16] }
        gs      = { defs={} expr=v1509[16] }
        cf      = { defs={} expr=v1510[1] }
        ?1      = { defs={} expr=v1511[1] }
        pf      = { defs={} expr=v1512[1] }
        ?3      = { defs={} expr=v1513[1] }
        af      = { defs={} expr=v1514[1] }
        ?5      = { defs={} expr=v1515[1] }
        zf      = { defs={} expr=v1516[1] }
        sf      = { defs={} expr=v1517[1] }
        tf      = { defs={} expr=v1518[1] }
        if      = { defs={} expr=v1519[1] }
        df      = { defs={} expr=v1520[1] }
        of      = { defs={} expr=v1521[1] }
        iopl0   = { defs={} expr=v1522[1] }
        iopl1   = { defs={} expr=v1523[1] }
        nt      = { defs={} expr=v1524[1] }
        ?15     = { defs={} expr=v1525[1] }
        rf      = { defs={} expr=v1526[1] }
        vm      = { defs={} expr=v1527[1] }
        ac      = { defs={} expr=v1528[1] }
        vif     = { defs={} expr=v1529[1] }
        vip     = { defs={} expr=v1530[1] }
        id      = { defs={} expr=v1531[1] }
        ?22     = { defs={} expr=v1532[1] }
        ?23     = { defs={} expr=v1533[1] }
        ?24     = { defs={} expr=v1534[1] }
        ?25     = { defs={} expr=v1535[1] }
        ?26     = { defs={} expr=v1536[1] }
        ?27     = { defs={} expr=v1537[1] }
        ?28     = { defs={} expr=v1538[1] }
        ?29     = { defs={} expr=v1539[1] }
        ?30     = { defs={} expr=v1540[1] }
        ?31     = { defs={} expr=v1541[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367} expr=0x08048368[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048367} expr=(extract[8] 24[32] 32[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048367} expr=(extract[8] 16[32] 24[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048367} expr=(extract[8] 8[32] 16[32] v1499[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1500[32] -4[32]) -4[32]) }
          value = { defs={0x08048367} expr=(extract[8] 0[32] 8[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 3[32]) }
          value = { defs={0x08048364} expr=(extract[8] 24[32] 32[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 2[32]) }
          value = { defs={0x08048364} expr=(extract[8] 16[32] 24[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 1[32]) }
          value = { defs={0x08048364} expr=(extract[8] 8[32] 16[32] v1501[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
          value = { defs={0x08048364} expr=(extract[8] 0[32] 8[32] v1501[32]) }
          flags = { }
    init mem:
0x8048368:push   ecx
    registers:
        ax      = { defs={} expr=v1496[32] }
        cx      = { defs={} expr=v1497[32] }
        dx      = { defs={} expr=v1498[32] }
        bx      = { defs={} expr=v1499[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1500[32] -4[32]) }
        si      = { defs={} expr=v1502[32] }
        di      = { defs={} expr=v1503[32] }
        es      = { defs={} expr=v1504[16] }
        cs      = { defs={} expr=v1505[16] }
        ss      = { defs={} expr=v1506[16] }
        ds      = { defs={} expr=v1507[16] }
        fs      = { defs={} expr=v1508[16] }
        gs      = { defs={} expr=v1509[16] }
        cf      = { defs={} expr=v1510[1] }
        ?1      = { defs={} expr=v1511[1] }
        pf      = { defs={} expr=v1512[1] }
        ?3      = { defs={} expr=v1513[1] }
        af      = { defs={} expr=v1514[1] }
        ?5      = { defs={} expr=v1515[1] }
        zf      = { defs={} expr=v1516[1] }
        sf      = { defs={} expr=v1517[1] }
        tf      = { defs={} expr=v1518[1] }
        if      = { defs={} expr=v1519[1] }
        df      = { defs={} expr=v1520[1] }
        of      = { defs={} expr=v1521[1] }
        iopl0   = { defs={} expr=v1522[1] }
        iopl1   = { defs={} expr=v1523[1] }
        nt      = { defs={} expr=v1524[1] }
        ?15     = { defs={} expr=v1525[1] }
        rf      = { defs={} expr=v1526[1] }
        vm      = { defs={} expr=v1527[1] }
        ac      = { defs={} expr=v1528[1] }
        vif     = { defs={} expr=v1529[1] }
        vip     = { defs={} expr=v1530[1] }
        id      = { defs={} expr=v1531[1] }
        ?22     = { defs={} expr=v1532[1] }
        ?23     = { defs={} expr=v1533[1] }
        ?24     = { defs={} expr=v1534[1] }
        ?25     = { defs={} expr=v1535[1] }
        ?26     = { defs={} expr=v1536[1] }
        ?27     = { defs={} expr=v1537[1] }
        ?28     = { defs={} expr=v1538[1] }
        ?29     = { defs={} expr=v1539[1] }
        ?30     = { defs={} expr=v1540[1] }
        ?31     = { defs={} expr=v1541[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367,0x08048368} expr=0x08048369[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048368} expr=(extract[8] 24[32] 32[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048368} expr=(extract[8] 16[32] 24[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048368} expr=(extract[8] 8[32] 16[32] v1497[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048368} expr=(extract[8] 0[32] 8[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048367} expr=(extract[8] 24[32] 32[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048367} expr=(extract[8] 16[32] 24[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048367} expr=(extract[8] 8[32] 16[32] v1499[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1500[32] -4[32]) -4[32]) }
          value = { defs={0x08048367} expr=(extract[8] 0[32] 8[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 3[32]) }
          value = { defs={0x08048364} expr=(extract[8] 24[32] 32[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 2[32]) }
          value = { defs={0x08048364} expr=(extract[8] 16[32] 24[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 1[32]) }
          value = { defs={0x08048364} expr=(extract[8] 8[32] 16[32] v1501[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
          value = { defs={0x08048364} expr=(extract[8] 0[32] 8[32] v1501[32]) }
          flags = { }
    init mem:
0x8048369:call   0x0804836e<<Insn>>
    registers:
        ax      = { defs={} expr=v1496[32] }
        cx      = { defs={} expr=v1497[32] }
        dx      = { defs={} expr=v1498[32] }
        bx      = { defs={} expr=v1499[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1500[32] -4[32]) }
        si      = { defs={} expr=v1502[32] }
        di      = { defs={} expr=v1503[32] }
        es      = { defs={} expr=v1504[16] }
        cs      = { defs={} expr=v1505[16] }
        ss      = { defs={} expr=v1506[16] }
        ds      = { defs={} expr=v1507[16] }
        fs      = { defs={} expr=v1508[16] }
        gs      = { defs={} expr=v1509[16] }
        cf      = { defs={} expr=v1510[1] }
        ?1      = { defs={} expr=v1511[1] }
        pf      = { defs={} expr=v1512[1] }
        ?3      = { defs={} expr=v1513[1] }
        af      = { defs={} expr=v1514[1] }
        ?5      = { defs={} expr=v1515[1] }
        zf      = { defs={} expr=v1516[1] }
        sf      = { defs={} expr=v1517[1] }
        tf      = { defs={} expr=v1518[1] }
        if      = { defs={} expr=v1519[1] }
        df      = { defs={} expr=v1520[1] }
        of      = { defs={} expr=v1521[1] }
        iopl0   = { defs={} expr=v1522[1] }
        iopl1   = { defs={} expr=v1523[1] }
        nt      = { defs={} expr=v1524[1] }
        ?15     = { defs={} expr=v1525[1] }
        rf      = { defs={} expr=v1526[1] }
        vm      = { defs={} expr=v1527[1] }
        ac      = { defs={} expr=v1528[1] }
        vif     = { defs={} expr=v1529[1] }
        vip     = { defs={} expr=v1530[1] }
        id      = { defs={} expr=v1531[1] }
        ?22     = { defs={} expr=v1532[1] }
        ?23     = { defs={} expr=v1533[1] }
        ?24     = { defs={} expr=v1534[1] }
        ?25     = { defs={} expr=v1535[1] }
        ?26     = { defs={} expr=v1536[1] }
        ?27     = { defs={} expr=v1537[1] }
        ?28     = { defs={} expr=v1538[1] }
        ?29     = { defs={} expr=v1539[1] }
        ?30     = { defs={} expr=v1540[1] }
        ?31     = { defs={} expr=v1541[1] }
        ip      = { defs={0x08048369} expr=0x0804836e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048364,0x08048365,0x08048367,0x08048368,0x08048369} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048364,0x08048365,0x08048367,0x08048368,0x08048369} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048364,0x08048365,0x08048367,0x08048368,0x08048369} expr=-125[8] }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048364,0x08048365,0x08048367,0x08048368,0x08048369} expr=110[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048368} expr=(extract[8] 24[32] 32[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048368} expr=(extract[8] 16[32] 24[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048368} expr=(extract[8] 8[32] 16[32] v1497[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048368} expr=(extract[8] 0[32] 8[32] v1497[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048367} expr=(extract[8] 24[32] 32[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048367} expr=(extract[8] 16[32] 24[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1500[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048367} expr=(extract[8] 8[32] 16[32] v1499[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1500[32] -4[32]) -4[32]) }
          value = { defs={0x08048367} expr=(extract[8] 0[32] 8[32] v1499[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 3[32]) }
          value = { defs={0x08048364} expr=(extract[8] 24[32] 32[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 2[32]) }
          value = { defs={0x08048364} expr=(extract[8] 16[32] 24[32] v1501[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1500[32] -4[32]) 1[32]) }
          value = { defs={0x08048364} expr=(extract[8] 8[32] 16[32] v1501[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1500[32] -4[32]) }
          value = { defs={0x08048364} expr=(extract[8] 0[32] 8[32] v1501[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804836e:pop    ebx
    registers:
        ax      = { defs={} expr=v1641[32] }
        cx      = { defs={} expr=v1642[32] }
        dx      = { defs={} expr=v1643[32] }
        bx      = { defs={0x0804836e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) }
        sp      = { defs={0x0804836e} expr=(add[32] v1645[32] 4[32]) }
        bp      = { defs={} expr=v1646[32] }
        si      = { defs={} expr=v1647[32] }
        di      = { defs={} expr=v1648[32] }
        es      = { defs={} expr=v1649[16] }
        cs      = { defs={} expr=v1650[16] }
        ss      = { defs={} expr=v1651[16] }
        ds      = { defs={} expr=v1652[16] }
        fs      = { defs={} expr=v1653[16] }
        gs      = { defs={} expr=v1654[16] }
        cf      = { defs={} expr=v1655[1] }
        ?1      = { defs={} expr=v1656[1] }
        pf      = { defs={} expr=v1657[1] }
        ?3      = { defs={} expr=v1658[1] }
        af      = { defs={} expr=v1659[1] }
        ?5      = { defs={} expr=v1660[1] }
        zf      = { defs={} expr=v1661[1] }
        sf      = { defs={} expr=v1662[1] }
        tf      = { defs={} expr=v1663[1] }
        if      = { defs={} expr=v1664[1] }
        df      = { defs={} expr=v1665[1] }
        of      = { defs={} expr=v1666[1] }
        iopl0   = { defs={} expr=v1667[1] }
        iopl1   = { defs={} expr=v1668[1] }
        nt      = { defs={} expr=v1669[1] }
        ?15     = { defs={} expr=v1670[1] }
        rf      = { defs={} expr=v1671[1] }
        vm      = { defs={} expr=v1672[1] }
        ac      = { defs={} expr=v1673[1] }
        vif     = { defs={} expr=v1674[1] }
        vip     = { defs={} expr=v1675[1] }
        id      = { defs={} expr=v1676[1] }
        ?22     = { defs={} expr=v1677[1] }
        ?23     = { defs={} expr=v1678[1] }
        ?24     = { defs={} expr=v1679[1] }
        ?25     = { defs={} expr=v1680[1] }
        ?26     = { defs={} expr=v1681[1] }
        ?27     = { defs={} expr=v1682[1] }
        ?28     = { defs={} expr=v1683[1] }
        ?29     = { defs={} expr=v1684[1] }
        ?30     = { defs={} expr=v1685[1] }
        ?31     = { defs={} expr=v1686[1] }
        ip      = { defs={0x0804836e} expr=0x0804836f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1645[32] 3[32]) }
          value = { defs={} expr=v1699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 2[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 1[32]) }
          value = { defs={} expr=v1697[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1645[32] }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
0x804836f:add    ebx, 0x0000135a
    registers:
        ax      = { defs={} expr=v1641[32] }
        cx      = { defs={} expr=v1642[32] }
        dx      = { defs={} expr=v1643[32] }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1645[32] 4[32]) }
        bp      = { defs={} expr=v1646[32] }
        si      = { defs={} expr=v1647[32] }
        di      = { defs={} expr=v1648[32] }
        es      = { defs={} expr=v1649[16] }
        cs      = { defs={} expr=v1650[16] }
        ss      = { defs={} expr=v1651[16] }
        ds      = { defs={} expr=v1652[16] }
        fs      = { defs={} expr=v1653[16] }
        gs      = { defs={} expr=v1654[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1656[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1658[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1660[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])) }
        tf      = { defs={} expr=v1663[1] }
        if      = { defs={} expr=v1664[1] }
        df      = { defs={} expr=v1665[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33])))))) }
        iopl0   = { defs={} expr=v1667[1] }
        iopl1   = { defs={} expr=v1668[1] }
        nt      = { defs={} expr=v1669[1] }
        ?15     = { defs={} expr=v1670[1] }
        rf      = { defs={} expr=v1671[1] }
        vm      = { defs={} expr=v1672[1] }
        ac      = { defs={} expr=v1673[1] }
        vif     = { defs={} expr=v1674[1] }
        vip     = { defs={} expr=v1675[1] }
        id      = { defs={} expr=v1676[1] }
        ?22     = { defs={} expr=v1677[1] }
        ?23     = { defs={} expr=v1678[1] }
        ?24     = { defs={} expr=v1679[1] }
        ?25     = { defs={} expr=v1680[1] }
        ?26     = { defs={} expr=v1681[1] }
        ?27     = { defs={} expr=v1682[1] }
        ?28     = { defs={} expr=v1683[1] }
        ?29     = { defs={} expr=v1684[1] }
        ?30     = { defs={} expr=v1685[1] }
        ?31     = { defs={} expr=v1686[1] }
        ip      = { defs={0x0804836e,0x0804836f} expr=0x08048375[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1645[32] 3[32]) }
          value = { defs={} expr=v1699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 2[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 1[32]) }
          value = { defs={} expr=v1697[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1645[32] }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
    registers:
        ax      = { defs={} expr=v1641[32] }
        cx      = { defs={} expr=v1642[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1645[32] 4[32]) }
        bp      = { defs={} expr=v1646[32] }
        si      = { defs={} expr=v1647[32] }
        di      = { defs={} expr=v1648[32] }
        es      = { defs={} expr=v1649[16] }
        cs      = { defs={} expr=v1650[16] }
        ss      = { defs={} expr=v1651[16] }
        ds      = { defs={} expr=v1652[16] }
        fs      = { defs={} expr=v1653[16] }
        gs      = { defs={} expr=v1654[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1656[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1658[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1660[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32])) }
        tf      = { defs={} expr=v1663[1] }
        if      = { defs={} expr=v1664[1] }
        df      = { defs={} expr=v1665[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8])))) 4954[33])))))) }
        iopl0   = { defs={} expr=v1667[1] }
        iopl1   = { defs={} expr=v1668[1] }
        nt      = { defs={} expr=v1669[1] }
        ?15     = { defs={} expr=v1670[1] }
        rf      = { defs={} expr=v1671[1] }
        vm      = { defs={} expr=v1672[1] }
        ac      = { defs={} expr=v1673[1] }
        vif     = { defs={} expr=v1674[1] }
        vip     = { defs={} expr=v1675[1] }
        id      = { defs={} expr=v1676[1] }
        ?22     = { defs={} expr=v1677[1] }
        ?23     = { defs={} expr=v1678[1] }
        ?24     = { defs={} expr=v1679[1] }
        ?25     = { defs={} expr=v1680[1] }
        ?26     = { defs={} expr=v1681[1] }
        ?27     = { defs={} expr=v1682[1] }
        ?28     = { defs={} expr=v1683[1] }
        ?29     = { defs={} expr=v1684[1] }
        ?30     = { defs={} expr=v1685[1] }
        ?31     = { defs={} expr=v1686[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375} expr=0x0804837b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1763[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1762[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1761[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 3[32]) }
          value = { defs={} expr=v1699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 2[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 1[32]) }
          value = { defs={} expr=v1697[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1645[32] }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
0x804837b:test   edx, edx
    registers:
        ax      = { defs={} expr=v1641[32] }
        cx      = { defs={} expr=v1642[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1645[32] 4[32]) }
        bp      = { defs={} expr=v1646[32] }
        si      = { defs={} expr=v1647[32] }
        di      = { defs={} expr=v1648[32] }
        es      = { defs={} expr=v1649[16] }
        cs      = { defs={} expr=v1650[16] }
        ss      = { defs={} expr=v1651[16] }
        ds      = { defs={} expr=v1652[16] }
        fs      = { defs={} expr=v1653[16] }
        gs      = { defs={} expr=v1654[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1656[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))))))) }
        ?3      = { defs={} expr=v1658[1] }
        af      = { defs={0x0804837b} expr=v1800[1] }
        ?5      = { defs={} expr=v1660[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))))) }
        tf      = { defs={} expr=v1663[1] }
        if      = { defs={} expr=v1664[1] }
        df      = { defs={} expr=v1665[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1667[1] }
        iopl1   = { defs={} expr=v1668[1] }
        nt      = { defs={} expr=v1669[1] }
        ?15     = { defs={} expr=v1670[1] }
        rf      = { defs={} expr=v1671[1] }
        vm      = { defs={} expr=v1672[1] }
        ac      = { defs={} expr=v1673[1] }
        vif     = { defs={} expr=v1674[1] }
        vip     = { defs={} expr=v1675[1] }
        id      = { defs={} expr=v1676[1] }
        ?22     = { defs={} expr=v1677[1] }
        ?23     = { defs={} expr=v1678[1] }
        ?24     = { defs={} expr=v1679[1] }
        ?25     = { defs={} expr=v1680[1] }
        ?26     = { defs={} expr=v1681[1] }
        ?27     = { defs={} expr=v1682[1] }
        ?28     = { defs={} expr=v1683[1] }
        ?29     = { defs={} expr=v1684[1] }
        ?30     = { defs={} expr=v1685[1] }
        ?31     = { defs={} expr=v1686[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b} expr=0x0804837d[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1763[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1762[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1761[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 3[32]) }
          value = { defs={} expr=v1699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 2[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 1[32]) }
          value = { defs={} expr=v1697[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1645[32] }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
0x804837d:je     0x08048384<<Insn>>
    registers:
        ax      = { defs={} expr=v1641[32] }
        cx      = { defs={} expr=v1642[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1645[32] 4[32]) }
        bp      = { defs={} expr=v1646[32] }
        si      = { defs={} expr=v1647[32] }
        di      = { defs={} expr=v1648[32] }
        es      = { defs={} expr=v1649[16] }
        cs      = { defs={} expr=v1650[16] }
        ss      = { defs={} expr=v1651[16] }
        ds      = { defs={} expr=v1652[16] }
        fs      = { defs={} expr=v1653[16] }
        gs      = { defs={} expr=v1654[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1656[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8])))))))))) }
        ?3      = { defs={} expr=v1658[1] }
        af      = { defs={0x0804837b} expr=v1800[1] }
        ?5      = { defs={} expr=v1660[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))))) }
        tf      = { defs={} expr=v1663[1] }
        if      = { defs={} expr=v1664[1] }
        df      = { defs={} expr=v1665[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1667[1] }
        iopl1   = { defs={} expr=v1668[1] }
        nt      = { defs={} expr=v1669[1] }
        ?15     = { defs={} expr=v1670[1] }
        rf      = { defs={} expr=v1671[1] }
        vm      = { defs={} expr=v1672[1] }
        ac      = { defs={} expr=v1673[1] }
        vif     = { defs={} expr=v1674[1] }
        vip     = { defs={} expr=v1675[1] }
        id      = { defs={} expr=v1676[1] }
        ?22     = { defs={} expr=v1677[1] }
        ?23     = { defs={} expr=v1678[1] }
        ?24     = { defs={} expr=v1679[1] }
        ?25     = { defs={} expr=v1680[1] }
        ?26     = { defs={} expr=v1681[1] }
        ?27     = { defs={} expr=v1682[1] }
        ?28     = { defs={} expr=v1683[1] }
        ?29     = { defs={} expr=v1684[1] }
        ?30     = { defs={} expr=v1685[1] }
        ?31     = { defs={} expr=v1686[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b,0x0804837d} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))))) 0x08048384[32] 0x0804837f[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1763[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1762[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1761[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1696[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1697[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1698[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1699[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 3[32]) }
          value = { defs={} expr=v1699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 2[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1645[32] 1[32]) }
          value = { defs={} expr=v1697[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1645[32] }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804837f:call   0x08048330<__gmon_start__@plt>
    registers:
        ax      = { defs={} expr=v1858[32] }
        cx      = { defs={} expr=v1859[32] }
        dx      = { defs={} expr=v1860[32] }
        bx      = { defs={} expr=v1861[32] }
        sp      = { defs={0x0804837f} expr=(add[32] v1862[32] -4[32]) }
        bp      = { defs={} expr=v1863[32] }
        si      = { defs={} expr=v1864[32] }
        di      = { defs={} expr=v1865[32] }
        es      = { defs={} expr=v1866[16] }
        cs      = { defs={} expr=v1867[16] }
        ss      = { defs={} expr=v1868[16] }
        ds      = { defs={} expr=v1869[16] }
        fs      = { defs={} expr=v1870[16] }
        gs      = { defs={} expr=v1871[16] }
        cf      = { defs={} expr=v1872[1] }
        ?1      = { defs={} expr=v1873[1] }
        pf      = { defs={} expr=v1874[1] }
        ?3      = { defs={} expr=v1875[1] }
        af      = { defs={} expr=v1876[1] }
        ?5      = { defs={} expr=v1877[1] }
        zf      = { defs={} expr=v1878[1] }
        sf      = { defs={} expr=v1879[1] }
        tf      = { defs={} expr=v1880[1] }
        if      = { defs={} expr=v1881[1] }
        df      = { defs={} expr=v1882[1] }
        of      = { defs={} expr=v1883[1] }
        iopl0   = { defs={} expr=v1884[1] }
        iopl1   = { defs={} expr=v1885[1] }
        nt      = { defs={} expr=v1886[1] }
        ?15     = { defs={} expr=v1887[1] }
        rf      = { defs={} expr=v1888[1] }
        vm      = { defs={} expr=v1889[1] }
        ac      = { defs={} expr=v1890[1] }
        vif     = { defs={} expr=v1891[1] }
        vip     = { defs={} expr=v1892[1] }
        id      = { defs={} expr=v1893[1] }
        ?22     = { defs={} expr=v1894[1] }
        ?23     = { defs={} expr=v1895[1] }
        ?24     = { defs={} expr=v1896[1] }
        ?25     = { defs={} expr=v1897[1] }
        ?26     = { defs={} expr=v1898[1] }
        ?27     = { defs={} expr=v1899[1] }
        ?28     = { defs={} expr=v1900[1] }
        ?29     = { defs={} expr=v1901[1] }
        ?30     = { defs={} expr=v1902[1] }
        ?31     = { defs={} expr=v1903[1] }
        ip      = { defs={0x0804837f} expr=0x08048330[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1862[32] -4[32]) 3[32]) }
          value = { defs={0x0804837f} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1862[32] -4[32]) 2[32]) }
          value = { defs={0x0804837f} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1862[32] -4[32]) 1[32]) }
          value = { defs={0x0804837f} expr=-125[8] }
          flags = { }
        address = { defs={0x0804837f} expr=(add[32] v1862[32] -4[32]) }
          value = { defs={0x0804837f} expr=-124[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048384:pop    eax
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2020[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2022[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2023[8]))) }
        cx      = { defs={} expr=v1966[32] }
        dx      = { defs={} expr=v1967[32] }
        bx      = { defs={} expr=v1968[32] }
        sp      = { defs={0x08048384} expr=(add[32] v1969[32] 4[32]) }
        bp      = { defs={} expr=v1970[32] }
        si      = { defs={} expr=v1971[32] }
        di      = { defs={} expr=v1972[32] }
        es      = { defs={} expr=v1973[16] }
        cs      = { defs={} expr=v1974[16] }
        ss      = { defs={} expr=v1975[16] }
        ds      = { defs={} expr=v1976[16] }
        fs      = { defs={} expr=v1977[16] }
        gs      = { defs={} expr=v1978[16] }
        cf      = { defs={} expr=v1979[1] }
        ?1      = { defs={} expr=v1980[1] }
        pf      = { defs={} expr=v1981[1] }
        ?3      = { defs={} expr=v1982[1] }
        af      = { defs={} expr=v1983[1] }
        ?5      = { defs={} expr=v1984[1] }
        zf      = { defs={} expr=v1985[1] }
        sf      = { defs={} expr=v1986[1] }
        tf      = { defs={} expr=v1987[1] }
        if      = { defs={} expr=v1988[1] }
        df      = { defs={} expr=v1989[1] }
        of      = { defs={} expr=v1990[1] }
        iopl0   = { defs={} expr=v1991[1] }
        iopl1   = { defs={} expr=v1992[1] }
        nt      = { defs={} expr=v1993[1] }
        ?15     = { defs={} expr=v1994[1] }
        rf      = { defs={} expr=v1995[1] }
        vm      = { defs={} expr=v1996[1] }
        ac      = { defs={} expr=v1997[1] }
        vif     = { defs={} expr=v1998[1] }
        vip     = { defs={} expr=v1999[1] }
        id      = { defs={} expr=v2000[1] }
        ?22     = { defs={} expr=v2001[1] }
        ?23     = { defs={} expr=v2002[1] }
        ?24     = { defs={} expr=v2003[1] }
        ?25     = { defs={} expr=v2004[1] }
        ?26     = { defs={} expr=v2005[1] }
        ?27     = { defs={} expr=v2006[1] }
        ?28     = { defs={} expr=v2007[1] }
        ?29     = { defs={} expr=v2008[1] }
        ?30     = { defs={} expr=v2009[1] }
        ?31     = { defs={} expr=v2010[1] }
        ip      = { defs={0x08048384} expr=0x08048385[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1969[32] 3[32]) }
          value = { defs={} expr=v2023[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1969[32] 2[32]) }
          value = { defs={} expr=v2022[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1969[32] 1[32]) }
          value = { defs={} expr=v2021[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1969[32] }
          value = { defs={} expr=v2020[8] }
          flags = { rdonly }
0x8048385:pop    ebx
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2020[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2022[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2023[8]))) }
        cx      = { defs={} expr=v1966[32] }
        dx      = { defs={} expr=v1967[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2037[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2038[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2039[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2040[8]))) }
        sp      = { defs={0x08048384,0x08048385} expr=(add[32] (add[32] v1969[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v1970[32] }
        si      = { defs={} expr=v1971[32] }
        di      = { defs={} expr=v1972[32] }
        es      = { defs={} expr=v1973[16] }
        cs      = { defs={} expr=v1974[16] }
        ss      = { defs={} expr=v1975[16] }
        ds      = { defs={} expr=v1976[16] }
        fs      = { defs={} expr=v1977[16] }
        gs      = { defs={} expr=v1978[16] }
        cf      = { defs={} expr=v1979[1] }
        ?1      = { defs={} expr=v1980[1] }
        pf      = { defs={} expr=v1981[1] }
        ?3      = { defs={} expr=v1982[1] }
        af      = { defs={} expr=v1983[1] }
        ?5      = { defs={} expr=v1984[1] }
        zf      = { defs={} expr=v1985[1] }
        sf      = { defs={} expr=v1986[1] }
        tf      = { defs={} expr=v1987[1] }
        if      = { defs={} expr=v1988[1] }
        df      = { defs={} expr=v1989[1] }
        of      = { defs={} expr=v1990[1] }
        iopl0   = { defs={} expr=v1991[1] }
        iopl1   = { defs={} expr=v1992[1] }
        nt      = { defs={} expr=v1993[1] }
        ?15     = { defs={} expr=v1994[1] }
        rf      = { defs={} expr=v1995[1] }
        vm      = { defs={} expr=v1996[1] }
        ac      = { defs={} expr=v1997[1] }
        vif     = { defs={} expr=v1998[1] }
        vip     = { defs={} expr=v1999[1] }
        id      = { defs={} expr=v2000[1] }
        ?22     = { defs={} expr=v2001[1] }
        ?23     = { defs={} expr=v2002[1] }
        ?24     = { defs={} expr=v2003[1] }
        ?25     = { defs={} expr=v2004[1] }
        ?26     = { defs={} expr=v2005[1] }
        ?27     = { defs={} expr=v2006[1] }
        ?28     = { defs={} expr=v2007[1] }
        ?29     = { defs={} expr=v2008[1] }
        ?30     = { defs={} expr=v2009[1] }
        ?31     = { defs={} expr=v2010[1] }
        ip      = { defs={0x08048384,0x08048385} expr=0x08048386[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1969[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2040[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1969[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2039[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1969[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2038[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1969[32] 4[32]) }
          value = { defs={} expr=v2037[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1969[32] 3[32]) }
          value = { defs={} expr=v2023[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1969[32] 2[32]) }
          value = { defs={} expr=v2022[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1969[32] 1[32]) }
          value = { defs={} expr=v2021[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1969[32] }
          value = { defs={} expr=v2020[8] }
          flags = { rdonly }
0x8048386:leave  
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2020[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2022[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2023[8]))) }
        cx      = { defs={} expr=v1966[32] }
        dx      = { defs={} expr=v1967[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2037[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2038[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2039[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2040[8]))) }
        sp      = { defs={0x08048386} expr=(add[32] v1970[32] 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2055[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2056[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2057[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2058[8]))) }
        si      = { defs={} expr=v1971[32] }
        di      = { defs={} expr=v1972[32] }
        es      = { defs={} expr=v1973[16] }
        cs      = { defs={} expr=v1974[16] }
        ss      = { defs={} expr=v1975[16] }
        ds      = { defs={} expr=v1976[16] }
        fs      = { defs={} expr=v1977[16] }
        gs      = { defs={} expr=v1978[16] }
        cf      = { defs={} expr=v1979[1] }
        ?1      = { defs={} expr=v1980[1] }
        pf      = { defs={} expr=v1981[1] }
        ?3      = { defs={} expr=v1982[1] }
        af      = { defs={} expr=v1983[1] }
        ?5      = { defs={} expr=v1984[1] }
        zf      = { defs={} expr=v1985[1] }
        sf      = { defs={} expr=v1986[1] }
        tf      = { defs={} expr=v1987[1] }
        if      = { defs={} expr=v1988[1] }
        df      = { defs={} expr=v1989[1] }
        of      = { defs={} expr=v1990[1] }
        iopl0   = { defs={} expr=v1991[1] }
        iopl1   = { defs={} expr=v1992[1] }
        nt      = { defs={} expr=v1993[1] }
        ?15     = { defs={} expr=v1994[1] }
        rf      = { defs={} expr=v1995[1] }
        vm      = { defs={} expr=v1996[1] }
        ac      = { defs={} expr=v1997[1] }
        vif     = { defs={} expr=v1998[1] }
        vip     = { defs={} expr=v1999[1] }
        id      = { defs={} expr=v2000[1] }
        ?22     = { defs={} expr=v2001[1] }
        ?23     = { defs={} expr=v2002[1] }
        ?24     = { defs={} expr=v2003[1] }
        ?25     = { defs={} expr=v2004[1] }
        ?26     = { defs={} expr=v2005[1] }
        ?27     = { defs={} expr=v2006[1] }
        ?28     = { defs={} expr=v2007[1] }
        ?29     = { defs={} expr=v2008[1] }
        ?30     = { defs={} expr=v2009[1] }
        ?31     = { defs={} expr=v2010[1] }
        ip      = { defs={0x08048384,0x08048385,0x08048386} expr=0x08048387[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1970[32] 3[32]) }
          value = { defs={} expr=v2058[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1970[32] 2[32]) }
          value = { defs={} expr=v2057[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1970[32] 1[32]) }
          value = { defs={} expr=v2056[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1970[32] }
          value = { defs={} expr=v2055[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1969[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2040[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1969[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2039[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1969[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2038[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1969[32] 4[32]) }
          value = { defs={} expr=v2037[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1969[32] 3[32]) }
          value = { defs={} expr=v2023[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1969[32] 2[32]) }
          value = { defs={} expr=v2022[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1969[32] 1[32]) }
          value = { defs={} expr=v2021[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1969[32] }
          value = { defs={} expr=v2020[8] }
          flags = { rdonly }
0x8048387:ret    
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2020[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2022[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2023[8]))) }
        cx      = { defs={} expr=v1966[32] }
        dx      = { defs={} expr=v1967[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2037[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2038[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2039[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2040[8]))) }
        sp      = { defs={0x08048386,0x08048387} expr=(add[32] (add[32] v1970[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2055[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2056[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2057[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2058[8]))) }
        si      = { defs={} expr=v1971[32] }
        di      = { defs={} expr=v1972[32] }
        es      = { defs={} expr=v1973[16] }
        cs      = { defs={} expr=v1974[16] }
        ss      = { defs={} expr=v1975[16] }
        ds      = { defs={} expr=v1976[16] }
        fs      = { defs={} expr=v1977[16] }
        gs      = { defs={} expr=v1978[16] }
        cf      = { defs={} expr=v1979[1] }
        ?1      = { defs={} expr=v1980[1] }
        pf      = { defs={} expr=v1981[1] }
        ?3      = { defs={} expr=v1982[1] }
        af      = { defs={} expr=v1983[1] }
        ?5      = { defs={} expr=v1984[1] }
        zf      = { defs={} expr=v1985[1] }
        sf      = { defs={} expr=v1986[1] }
        tf      = { defs={} expr=v1987[1] }
        if      = { defs={} expr=v1988[1] }
        df      = { defs={} expr=v1989[1] }
        of      = { defs={} expr=v1990[1] }
        iopl0   = { defs={} expr=v1991[1] }
        iopl1   = { defs={} expr=v1992[1] }
        nt      = { defs={} expr=v1993[1] }
        ?15     = { defs={} expr=v1994[1] }
        rf      = { defs={} expr=v1995[1] }
        vm      = { defs={} expr=v1996[1] }
        ac      = { defs={} expr=v1997[1] }
        vif     = { defs={} expr=v1998[1] }
        vip     = { defs={} expr=v1999[1] }
        id      = { defs={} expr=v2000[1] }
        ?22     = { defs={} expr=v2001[1] }
        ?23     = { defs={} expr=v2002[1] }
        ?24     = { defs={} expr=v2003[1] }
        ?25     = { defs={} expr=v2004[1] }
        ?26     = { defs={} expr=v2005[1] }
        ?27     = { defs={} expr=v2006[1] }
        ?28     = { defs={} expr=v2007[1] }
        ?29     = { defs={} expr=v2008[1] }
        ?30     = { defs={} expr=v2009[1] }
        ?31     = { defs={} expr=v2010[1] }
        ip      = { defs={0x08048387} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2073[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2074[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2075[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2076[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1970[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2076[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1970[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2075[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1970[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2074[8] }
          flags = { rdonly }
        address = { defs={0x08048386,0x08048387} expr=(add[32] v1970[32] 4[32]) }
          value = { defs={} expr=v2073[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1970[32] 3[32]) }
          value = { defs={} expr=v2058[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1970[32] 2[32]) }
          value = { defs={} expr=v2057[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1970[32] 1[32]) }
          value = { defs={} expr=v2056[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1970[32] }
          value = { defs={} expr=v2055[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1969[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2040[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1969[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2039[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1969[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2038[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1969[32] 4[32]) }
          value = { defs={} expr=v2037[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1969[32] 3[32]) }
          value = { defs={} expr=v2023[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1969[32] 2[32]) }
          value = { defs={} expr=v2022[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1969[32] 1[32]) }
          value = { defs={} expr=v2021[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1969[32] }
          value = { defs={} expr=v2020[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048390:push   ebp
    registers:
        ax      = { defs={} expr=v2131[32] }
        cx      = { defs={} expr=v2132[32] }
        dx      = { defs={} expr=v2133[32] }
        bx      = { defs={} expr=v2134[32] }
        sp      = { defs={0x08048390} expr=(add[32] v2135[32] -4[32]) }
        bp      = { defs={} expr=v2136[32] }
        si      = { defs={} expr=v2137[32] }
        di      = { defs={} expr=v2138[32] }
        es      = { defs={} expr=v2139[16] }
        cs      = { defs={} expr=v2140[16] }
        ss      = { defs={} expr=v2141[16] }
        ds      = { defs={} expr=v2142[16] }
        fs      = { defs={} expr=v2143[16] }
        gs      = { defs={} expr=v2144[16] }
        cf      = { defs={} expr=v2145[1] }
        ?1      = { defs={} expr=v2146[1] }
        pf      = { defs={} expr=v2147[1] }
        ?3      = { defs={} expr=v2148[1] }
        af      = { defs={} expr=v2149[1] }
        ?5      = { defs={} expr=v2150[1] }
        zf      = { defs={} expr=v2151[1] }
        sf      = { defs={} expr=v2152[1] }
        tf      = { defs={} expr=v2153[1] }
        if      = { defs={} expr=v2154[1] }
        df      = { defs={} expr=v2155[1] }
        of      = { defs={} expr=v2156[1] }
        iopl0   = { defs={} expr=v2157[1] }
        iopl1   = { defs={} expr=v2158[1] }
        nt      = { defs={} expr=v2159[1] }
        ?15     = { defs={} expr=v2160[1] }
        rf      = { defs={} expr=v2161[1] }
        vm      = { defs={} expr=v2162[1] }
        ac      = { defs={} expr=v2163[1] }
        vif     = { defs={} expr=v2164[1] }
        vip     = { defs={} expr=v2165[1] }
        id      = { defs={} expr=v2166[1] }
        ?22     = { defs={} expr=v2167[1] }
        ?23     = { defs={} expr=v2168[1] }
        ?24     = { defs={} expr=v2169[1] }
        ?25     = { defs={} expr=v2170[1] }
        ?26     = { defs={} expr=v2171[1] }
        ?27     = { defs={} expr=v2172[1] }
        ?28     = { defs={} expr=v2173[1] }
        ?29     = { defs={} expr=v2174[1] }
        ?30     = { defs={} expr=v2175[1] }
        ?31     = { defs={} expr=v2176[1] }
        ip      = { defs={0x08048390} expr=0x08048391[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 3[32]) }
          value = { defs={0x08048390} expr=(extract[8] 24[32] 32[32] v2136[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 2[32]) }
          value = { defs={0x08048390} expr=(extract[8] 16[32] 24[32] v2136[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 1[32]) }
          value = { defs={0x08048390} expr=(extract[8] 8[32] 16[32] v2136[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2135[32] -4[32]) }
          value = { defs={0x08048390} expr=(extract[8] 0[32] 8[32] v2136[32]) }
          flags = { }
    init mem:
0x8048391:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2131[32] }
        cx      = { defs={} expr=v2132[32] }
        dx      = { defs={} expr=v2133[32] }
        bx      = { defs={} expr=v2134[32] }
        sp      = { defs={0x08048390} expr=(add[32] v2135[32] -4[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2135[32] -4[32]) }
        si      = { defs={} expr=v2137[32] }
        di      = { defs={} expr=v2138[32] }
        es      = { defs={} expr=v2139[16] }
        cs      = { defs={} expr=v2140[16] }
        ss      = { defs={} expr=v2141[16] }
        ds      = { defs={} expr=v2142[16] }
        fs      = { defs={} expr=v2143[16] }
        gs      = { defs={} expr=v2144[16] }
        cf      = { defs={} expr=v2145[1] }
        ?1      = { defs={} expr=v2146[1] }
        pf      = { defs={} expr=v2147[1] }
        ?3      = { defs={} expr=v2148[1] }
        af      = { defs={} expr=v2149[1] }
        ?5      = { defs={} expr=v2150[1] }
        zf      = { defs={} expr=v2151[1] }
        sf      = { defs={} expr=v2152[1] }
        tf      = { defs={} expr=v2153[1] }
        if      = { defs={} expr=v2154[1] }
        df      = { defs={} expr=v2155[1] }
        of      = { defs={} expr=v2156[1] }
        iopl0   = { defs={} expr=v2157[1] }
        iopl1   = { defs={} expr=v2158[1] }
        nt      = { defs={} expr=v2159[1] }
        ?15     = { defs={} expr=v2160[1] }
        rf      = { defs={} expr=v2161[1] }
        vm      = { defs={} expr=v2162[1] }
        ac      = { defs={} expr=v2163[1] }
        vif     = { defs={} expr=v2164[1] }
        vip     = { defs={} expr=v2165[1] }
        id      = { defs={} expr=v2166[1] }
        ?22     = { defs={} expr=v2167[1] }
        ?23     = { defs={} expr=v2168[1] }
        ?24     = { defs={} expr=v2169[1] }
        ?25     = { defs={} expr=v2170[1] }
        ?26     = { defs={} expr=v2171[1] }
        ?27     = { defs={} expr=v2172[1] }
        ?28     = { defs={} expr=v2173[1] }
        ?29     = { defs={} expr=v2174[1] }
        ?30     = { defs={} expr=v2175[1] }
        ?31     = { defs={} expr=v2176[1] }
        ip      = { defs={0x08048390,0x08048391} expr=0x08048393[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 3[32]) }
          value = { defs={0x08048390} expr=(extract[8] 24[32] 32[32] v2136[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 2[32]) }
          value = { defs={0x08048390} expr=(extract[8] 16[32] 24[32] v2136[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 1[32]) }
          value = { defs={0x08048390} expr=(extract[8] 8[32] 16[32] v2136[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2135[32] -4[32]) }
          value = { defs={0x08048390} expr=(extract[8] 0[32] 8[32] v2136[32]) }
          flags = { }
    init mem:
0x8048393:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2131[32] }
        cx      = { defs={} expr=v2132[32] }
        dx      = { defs={} expr=v2133[32] }
        bx      = { defs={} expr=v2134[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2135[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2135[32] -4[32]) }
        si      = { defs={} expr=v2137[32] }
        di      = { defs={} expr=v2138[32] }
        es      = { defs={} expr=v2139[16] }
        cs      = { defs={} expr=v2140[16] }
        ss      = { defs={} expr=v2141[16] }
        ds      = { defs={} expr=v2142[16] }
        fs      = { defs={} expr=v2143[16] }
        gs      = { defs={} expr=v2144[16] }
        cf      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2135[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2135[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2146[1] }
        pf      = { defs={0x08048390,0x08048393} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2135[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2135[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2135[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2135[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2135[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2135[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2135[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2135[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2148[1] }
        af      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2135[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2135[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2150[1] }
        zf      = { defs={0x08048390,0x08048393} expr=(zerop[1] (add[32] (add[32] v2135[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048390,0x08048393} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2135[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2153[1] }
        if      = { defs={} expr=v2154[1] }
        df      = { defs={} expr=v2155[1] }
        of      = { defs={0x08048390,0x08048393} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2135[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2135[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2135[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2135[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2157[1] }
        iopl1   = { defs={} expr=v2158[1] }
        nt      = { defs={} expr=v2159[1] }
        ?15     = { defs={} expr=v2160[1] }
        rf      = { defs={} expr=v2161[1] }
        vm      = { defs={} expr=v2162[1] }
        ac      = { defs={} expr=v2163[1] }
        vif     = { defs={} expr=v2164[1] }
        vip     = { defs={} expr=v2165[1] }
        id      = { defs={} expr=v2166[1] }
        ?22     = { defs={} expr=v2167[1] }
        ?23     = { defs={} expr=v2168[1] }
        ?24     = { defs={} expr=v2169[1] }
        ?25     = { defs={} expr=v2170[1] }
        ?26     = { defs={} expr=v2171[1] }
        ?27     = { defs={} expr=v2172[1] }
        ?28     = { defs={} expr=v2173[1] }
        ?29     = { defs={} expr=v2174[1] }
        ?30     = { defs={} expr=v2175[1] }
        ?31     = { defs={} expr=v2176[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393} expr=0x08048396[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 3[32]) }
          value = { defs={0x08048390} expr=(extract[8] 24[32] 32[32] v2136[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 2[32]) }
          value = { defs={0x08048390} expr=(extract[8] 16[32] 24[32] v2136[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 1[32]) }
          value = { defs={0x08048390} expr=(extract[8] 8[32] 16[32] v2136[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2135[32] -4[32]) }
          value = { defs={0x08048390} expr=(extract[8] 0[32] 8[32] v2136[32]) }
          flags = { }
    init mem:
0x8048396:cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00
    registers:
        ax      = { defs={} expr=v2131[32] }
        cx      = { defs={} expr=v2132[32] }
        dx      = { defs={} expr=v2133[32] }
        bx      = { defs={} expr=v2134[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2135[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2135[32] -4[32]) }
        si      = { defs={} expr=v2137[32] }
        di      = { defs={} expr=v2138[32] }
        es      = { defs={} expr=v2139[16] }
        cs      = { defs={} expr=v2140[16] }
        ss      = { defs={} expr=v2141[16] }
        ds      = { defs={} expr=v2142[16] }
        fs      = { defs={} expr=v2143[16] }
        gs      = { defs={} expr=v2144[16] }
        cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2252[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2252[8]) -256[9])))))) }
        ?1      = { defs={} expr=v2146[1] }
        pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v2252[8]) (extract[1] 1[32] 2[32] v2252[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v2252[8]) (extract[1] 3[32] 4[32] v2252[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v2252[8]) (extract[1] 5[32] 6[32] v2252[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v2252[8]) (extract[1] 7[32] 8[32] v2252[8]))))) }
        ?3      = { defs={} expr=v2148[1] }
        af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2252[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2252[8]) -256[9])))))) }
        ?5      = { defs={} expr=v2150[1] }
        zf      = { defs={0x08048396} expr=(zerop[1] v2252[8]) }
        sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] v2252[8]) }
        tf      = { defs={} expr=v2153[1] }
        if      = { defs={} expr=v2154[1] }
        df      = { defs={} expr=v2155[1] }
        of      = { defs={0x08048396} expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2252[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2252[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2252[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2252[8]) -256[9])))))) }
        iopl0   = { defs={} expr=v2157[1] }
        iopl1   = { defs={} expr=v2158[1] }
        nt      = { defs={} expr=v2159[1] }
        ?15     = { defs={} expr=v2160[1] }
        rf      = { defs={} expr=v2161[1] }
        vm      = { defs={} expr=v2162[1] }
        ac      = { defs={} expr=v2163[1] }
        vif     = { defs={} expr=v2164[1] }
        vip     = { defs={} expr=v2165[1] }
        id      = { defs={} expr=v2166[1] }
        ?22     = { defs={} expr=v2167[1] }
        ?23     = { defs={} expr=v2168[1] }
        ?24     = { defs={} expr=v2169[1] }
        ?25     = { defs={} expr=v2170[1] }
        ?26     = { defs={} expr=v2171[1] }
        ?27     = { defs={} expr=v2172[1] }
        ?28     = { defs={} expr=v2173[1] }
        ?29     = { defs={} expr=v2174[1] }
        ?30     = { defs={} expr=v2175[1] }
        ?31     = { defs={} expr=v2176[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396} expr=0x0804839d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 3[32]) }
          value = { defs={0x08048390} expr=(extract[8] 24[32] 32[32] v2136[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 2[32]) }
          value = { defs={0x08048390} expr=(extract[8] 16[32] 24[32] v2136[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 1[32]) }
          value = { defs={0x08048390} expr=(extract[8] 8[32] 16[32] v2136[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2135[32] -4[32]) }
          value = { defs={0x08048390} expr=(extract[8] 0[32] 8[32] v2136[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v2252[8] }
          flags = { rdonly }
0x804839d:jne    0x080483cc<<Insn>>
    registers:
        ax      = { defs={} expr=v2131[32] }
        cx      = { defs={} expr=v2132[32] }
        dx      = { defs={} expr=v2133[32] }
        bx      = { defs={} expr=v2134[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2135[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2135[32] -4[32]) }
        si      = { defs={} expr=v2137[32] }
        di      = { defs={} expr=v2138[32] }
        es      = { defs={} expr=v2139[16] }
        cs      = { defs={} expr=v2140[16] }
        ss      = { defs={} expr=v2141[16] }
        ds      = { defs={} expr=v2142[16] }
        fs      = { defs={} expr=v2143[16] }
        gs      = { defs={} expr=v2144[16] }
        cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2252[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2252[8]) -256[9])))))) }
        ?1      = { defs={} expr=v2146[1] }
        pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v2252[8]) (extract[1] 1[32] 2[32] v2252[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v2252[8]) (extract[1] 3[32] 4[32] v2252[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v2252[8]) (extract[1] 5[32] 6[32] v2252[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v2252[8]) (extract[1] 7[32] 8[32] v2252[8]))))) }
        ?3      = { defs={} expr=v2148[1] }
        af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2252[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2252[8]) -256[9])))))) }
        ?5      = { defs={} expr=v2150[1] }
        zf      = { defs={0x08048396} expr=(zerop[1] v2252[8]) }
        sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] v2252[8]) }
        tf      = { defs={} expr=v2153[1] }
        if      = { defs={} expr=v2154[1] }
        df      = { defs={} expr=v2155[1] }
        of      = { defs={0x08048396} expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2252[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2252[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2252[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2252[8]) -256[9])))))) }
        iopl0   = { defs={} expr=v2157[1] }
        iopl1   = { defs={} expr=v2158[1] }
        nt      = { defs={} expr=v2159[1] }
        ?15     = { defs={} expr=v2160[1] }
        rf      = { defs={} expr=v2161[1] }
        vm      = { defs={} expr=v2162[1] }
        ac      = { defs={} expr=v2163[1] }
        vif     = { defs={} expr=v2164[1] }
        vip     = { defs={} expr=v2165[1] }
        id      = { defs={} expr=v2166[1] }
        ?22     = { defs={} expr=v2167[1] }
        ?23     = { defs={} expr=v2168[1] }
        ?24     = { defs={} expr=v2169[1] }
        ?25     = { defs={} expr=v2170[1] }
        ?26     = { defs={} expr=v2171[1] }
        ?27     = { defs={} expr=v2172[1] }
        ?28     = { defs={} expr=v2173[1] }
        ?29     = { defs={} expr=v2174[1] }
        ?30     = { defs={} expr=v2175[1] }
        ?31     = { defs={} expr=v2176[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396,0x0804839d} expr=(ite[32] (invert[1] (zerop[1] v2252[8])) 0x080483cc[32] 0x0804839f[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 3[32]) }
          value = { defs={0x08048390} expr=(extract[8] 24[32] 32[32] v2136[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 2[32]) }
          value = { defs={0x08048390} expr=(extract[8] 16[32] 24[32] v2136[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2135[32] -4[32]) 1[32]) }
          value = { defs={0x08048390} expr=(extract[8] 8[32] 16[32] v2136[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2135[32] -4[32]) }
          value = { defs={0x08048390} expr=(extract[8] 0[32] 8[32] v2136[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v2252[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) }
        cx      = { defs={} expr=v2357[32] }
        dx      = { defs={} expr=v2358[32] }
        bx      = { defs={} expr=v2359[32] }
        sp      = { defs={} expr=v2360[32] }
        bp      = { defs={} expr=v2361[32] }
        si      = { defs={} expr=v2362[32] }
        di      = { defs={} expr=v2363[32] }
        es      = { defs={} expr=v2364[16] }
        cs      = { defs={} expr=v2365[16] }
        ss      = { defs={} expr=v2366[16] }
        ds      = { defs={} expr=v2367[16] }
        fs      = { defs={} expr=v2368[16] }
        gs      = { defs={} expr=v2369[16] }
        cf      = { defs={} expr=v2370[1] }
        ?1      = { defs={} expr=v2371[1] }
        pf      = { defs={} expr=v2372[1] }
        ?3      = { defs={} expr=v2373[1] }
        af      = { defs={} expr=v2374[1] }
        ?5      = { defs={} expr=v2375[1] }
        zf      = { defs={} expr=v2376[1] }
        sf      = { defs={} expr=v2377[1] }
        tf      = { defs={} expr=v2378[1] }
        if      = { defs={} expr=v2379[1] }
        df      = { defs={} expr=v2380[1] }
        of      = { defs={} expr=v2381[1] }
        iopl0   = { defs={} expr=v2382[1] }
        iopl1   = { defs={} expr=v2383[1] }
        nt      = { defs={} expr=v2384[1] }
        ?15     = { defs={} expr=v2385[1] }
        rf      = { defs={} expr=v2386[1] }
        vm      = { defs={} expr=v2387[1] }
        ac      = { defs={} expr=v2388[1] }
        vif     = { defs={} expr=v2389[1] }
        vip     = { defs={} expr=v2390[1] }
        id      = { defs={} expr=v2391[1] }
        ?22     = { defs={} expr=v2392[1] }
        ?23     = { defs={} expr=v2393[1] }
        ?24     = { defs={} expr=v2394[1] }
        ?25     = { defs={} expr=v2395[1] }
        ?26     = { defs={} expr=v2396[1] }
        ?27     = { defs={} expr=v2397[1] }
        ?28     = { defs={} expr=v2398[1] }
        ?29     = { defs={} expr=v2399[1] }
        ?30     = { defs={} expr=v2400[1] }
        ?31     = { defs={} expr=v2401[1] }
        ip      = { defs={0x0804839f} expr=0x080483a4[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2411[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2410[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2409[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2408[8] }
          flags = { rdonly }
0x80483a4:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) }
        cx      = { defs={} expr=v2357[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) }
        bx      = { defs={} expr=v2359[32] }
        sp      = { defs={} expr=v2360[32] }
        bp      = { defs={} expr=v2361[32] }
        si      = { defs={} expr=v2362[32] }
        di      = { defs={} expr=v2363[32] }
        es      = { defs={} expr=v2364[16] }
        cs      = { defs={} expr=v2365[16] }
        ss      = { defs={} expr=v2366[16] }
        ds      = { defs={} expr=v2367[16] }
        fs      = { defs={} expr=v2368[16] }
        gs      = { defs={} expr=v2369[16] }
        cf      = { defs={} expr=v2370[1] }
        ?1      = { defs={} expr=v2371[1] }
        pf      = { defs={} expr=v2372[1] }
        ?3      = { defs={} expr=v2373[1] }
        af      = { defs={} expr=v2374[1] }
        ?5      = { defs={} expr=v2375[1] }
        zf      = { defs={} expr=v2376[1] }
        sf      = { defs={} expr=v2377[1] }
        tf      = { defs={} expr=v2378[1] }
        if      = { defs={} expr=v2379[1] }
        df      = { defs={} expr=v2380[1] }
        of      = { defs={} expr=v2381[1] }
        iopl0   = { defs={} expr=v2382[1] }
        iopl1   = { defs={} expr=v2383[1] }
        nt      = { defs={} expr=v2384[1] }
        ?15     = { defs={} expr=v2385[1] }
        rf      = { defs={} expr=v2386[1] }
        vm      = { defs={} expr=v2387[1] }
        ac      = { defs={} expr=v2388[1] }
        vif     = { defs={} expr=v2389[1] }
        vip     = { defs={} expr=v2390[1] }
        id      = { defs={} expr=v2391[1] }
        ?22     = { defs={} expr=v2392[1] }
        ?23     = { defs={} expr=v2393[1] }
        ?24     = { defs={} expr=v2394[1] }
        ?25     = { defs={} expr=v2395[1] }
        ?26     = { defs={} expr=v2396[1] }
        ?27     = { defs={} expr=v2397[1] }
        ?28     = { defs={} expr=v2398[1] }
        ?29     = { defs={} expr=v2399[1] }
        ?30     = { defs={} expr=v2400[1] }
        ?31     = { defs={} expr=v2401[1] }
        ip      = { defs={0x0804839f,0x080483a4} expr=0x080483a6[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) 3[32]) }
          value = { defs={} expr=v2426[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) 2[32]) }
          value = { defs={} expr=v2425[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) 1[32]) }
          value = { defs={} expr=v2424[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) }
          value = { defs={} expr=v2423[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2411[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2410[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2409[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2408[8] }
          flags = { rdonly }
0x80483a6:test   edx, edx
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) }
        cx      = { defs={} expr=v2357[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) }
        bx      = { defs={} expr=v2359[32] }
        sp      = { defs={} expr=v2360[32] }
        bp      = { defs={} expr=v2361[32] }
        si      = { defs={} expr=v2362[32] }
        di      = { defs={} expr=v2363[32] }
        es      = { defs={} expr=v2364[16] }
        cs      = { defs={} expr=v2365[16] }
        ss      = { defs={} expr=v2366[16] }
        ds      = { defs={} expr=v2367[16] }
        fs      = { defs={} expr=v2368[16] }
        gs      = { defs={} expr=v2369[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v2371[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))))))) }
        ?3      = { defs={} expr=v2373[1] }
        af      = { defs={0x080483a6} expr=v2463[1] }
        ?5      = { defs={} expr=v2375[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))))) }
        tf      = { defs={} expr=v2378[1] }
        if      = { defs={} expr=v2379[1] }
        df      = { defs={} expr=v2380[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v2382[1] }
        iopl1   = { defs={} expr=v2383[1] }
        nt      = { defs={} expr=v2384[1] }
        ?15     = { defs={} expr=v2385[1] }
        rf      = { defs={} expr=v2386[1] }
        vm      = { defs={} expr=v2387[1] }
        ac      = { defs={} expr=v2388[1] }
        vif     = { defs={} expr=v2389[1] }
        vip     = { defs={} expr=v2390[1] }
        id      = { defs={} expr=v2391[1] }
        ?22     = { defs={} expr=v2392[1] }
        ?23     = { defs={} expr=v2393[1] }
        ?24     = { defs={} expr=v2394[1] }
        ?25     = { defs={} expr=v2395[1] }
        ?26     = { defs={} expr=v2396[1] }
        ?27     = { defs={} expr=v2397[1] }
        ?28     = { defs={} expr=v2398[1] }
        ?29     = { defs={} expr=v2399[1] }
        ?30     = { defs={} expr=v2400[1] }
        ?31     = { defs={} expr=v2401[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6} expr=0x080483a8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) 3[32]) }
          value = { defs={} expr=v2426[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) 2[32]) }
          value = { defs={} expr=v2425[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) 1[32]) }
          value = { defs={} expr=v2424[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) }
          value = { defs={} expr=v2423[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2411[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2410[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2409[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2408[8] }
          flags = { rdonly }
0x80483a8:je     0x080483c5<<Insn>>
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) }
        cx      = { defs={} expr=v2357[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) }
        bx      = { defs={} expr=v2359[32] }
        sp      = { defs={} expr=v2360[32] }
        bp      = { defs={} expr=v2361[32] }
        si      = { defs={} expr=v2362[32] }
        di      = { defs={} expr=v2363[32] }
        es      = { defs={} expr=v2364[16] }
        cs      = { defs={} expr=v2365[16] }
        ss      = { defs={} expr=v2366[16] }
        ds      = { defs={} expr=v2367[16] }
        fs      = { defs={} expr=v2368[16] }
        gs      = { defs={} expr=v2369[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v2371[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8])))))))))) }
        ?3      = { defs={} expr=v2373[1] }
        af      = { defs={0x080483a6} expr=v2463[1] }
        ?5      = { defs={} expr=v2375[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))))) }
        tf      = { defs={} expr=v2378[1] }
        if      = { defs={} expr=v2379[1] }
        df      = { defs={} expr=v2380[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v2382[1] }
        iopl1   = { defs={} expr=v2383[1] }
        nt      = { defs={} expr=v2384[1] }
        ?15     = { defs={} expr=v2385[1] }
        rf      = { defs={} expr=v2386[1] }
        vm      = { defs={} expr=v2387[1] }
        ac      = { defs={} expr=v2388[1] }
        vif     = { defs={} expr=v2389[1] }
        vip     = { defs={} expr=v2390[1] }
        id      = { defs={} expr=v2391[1] }
        ?22     = { defs={} expr=v2392[1] }
        ?23     = { defs={} expr=v2393[1] }
        ?24     = { defs={} expr=v2394[1] }
        ?25     = { defs={} expr=v2395[1] }
        ?26     = { defs={} expr=v2396[1] }
        ?27     = { defs={} expr=v2397[1] }
        ?28     = { defs={} expr=v2398[1] }
        ?29     = { defs={} expr=v2399[1] }
        ?30     = { defs={} expr=v2400[1] }
        ?31     = { defs={} expr=v2401[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6,0x080483a8} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2423[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2424[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2425[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2426[8]))))) 0x080483c5[32] 0x080483aa[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) 3[32]) }
          value = { defs={} expr=v2426[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) 2[32]) }
          value = { defs={} expr=v2425[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) 1[32]) }
          value = { defs={} expr=v2424[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2411[8]))) }
          value = { defs={} expr=v2423[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2411[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2410[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2409[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2408[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483aa:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v2521[32] }
        cx      = { defs={} expr=v2522[32] }
        dx      = { defs={} expr=v2523[32] }
        bx      = { defs={} expr=v2524[32] }
        sp      = { defs={} expr=v2525[32] }
        bp      = { defs={} expr=v2526[32] }
        si      = { defs={0x080483aa} expr=v2527[32] }
        di      = { defs={} expr=v2528[32] }
        es      = { defs={} expr=v2529[16] }
        cs      = { defs={} expr=v2530[16] }
        ss      = { defs={} expr=v2531[16] }
        ds      = { defs={} expr=v2532[16] }
        fs      = { defs={} expr=v2533[16] }
        gs      = { defs={} expr=v2534[16] }
        cf      = { defs={} expr=v2535[1] }
        ?1      = { defs={} expr=v2536[1] }
        pf      = { defs={} expr=v2537[1] }
        ?3      = { defs={} expr=v2538[1] }
        af      = { defs={} expr=v2539[1] }
        ?5      = { defs={} expr=v2540[1] }
        zf      = { defs={} expr=v2541[1] }
        sf      = { defs={} expr=v2542[1] }
        tf      = { defs={} expr=v2543[1] }
        if      = { defs={} expr=v2544[1] }
        df      = { defs={} expr=v2545[1] }
        of      = { defs={} expr=v2546[1] }
        iopl0   = { defs={} expr=v2547[1] }
        iopl1   = { defs={} expr=v2548[1] }
        nt      = { defs={} expr=v2549[1] }
        ?15     = { defs={} expr=v2550[1] }
        rf      = { defs={} expr=v2551[1] }
        vm      = { defs={} expr=v2552[1] }
        ac      = { defs={} expr=v2553[1] }
        vif     = { defs={} expr=v2554[1] }
        vip     = { defs={} expr=v2555[1] }
        id      = { defs={} expr=v2556[1] }
        ?22     = { defs={} expr=v2557[1] }
        ?23     = { defs={} expr=v2558[1] }
        ?24     = { defs={} expr=v2559[1] }
        ?25     = { defs={} expr=v2560[1] }
        ?26     = { defs={} expr=v2561[1] }
        ?27     = { defs={} expr=v2562[1] }
        ?28     = { defs={} expr=v2563[1] }
        ?29     = { defs={} expr=v2564[1] }
        ?30     = { defs={} expr=v2565[1] }
        ?31     = { defs={} expr=v2566[1] }
        ip      = { defs={0x080483aa} expr=0x080483b0[32] }
    memory:
    init mem:
0x80483b0:add    eax, 0x04
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2521[32] 4[32]) }
        cx      = { defs={} expr=v2522[32] }
        dx      = { defs={} expr=v2523[32] }
        bx      = { defs={} expr=v2524[32] }
        sp      = { defs={} expr=v2525[32] }
        bp      = { defs={} expr=v2526[32] }
        si      = { defs={0x080483aa} expr=v2527[32] }
        di      = { defs={} expr=v2528[32] }
        es      = { defs={} expr=v2529[16] }
        cs      = { defs={} expr=v2530[16] }
        ss      = { defs={} expr=v2531[16] }
        ds      = { defs={} expr=v2532[16] }
        fs      = { defs={} expr=v2533[16] }
        gs      = { defs={} expr=v2534[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2536[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2538[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2540[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2521[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2521[32] 4[32])) }
        tf      = { defs={} expr=v2543[1] }
        if      = { defs={} expr=v2544[1] }
        df      = { defs={} expr=v2545[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2547[1] }
        iopl1   = { defs={} expr=v2548[1] }
        nt      = { defs={} expr=v2549[1] }
        ?15     = { defs={} expr=v2550[1] }
        rf      = { defs={} expr=v2551[1] }
        vm      = { defs={} expr=v2552[1] }
        ac      = { defs={} expr=v2553[1] }
        vif     = { defs={} expr=v2554[1] }
        vip     = { defs={} expr=v2555[1] }
        id      = { defs={} expr=v2556[1] }
        ?22     = { defs={} expr=v2557[1] }
        ?23     = { defs={} expr=v2558[1] }
        ?24     = { defs={} expr=v2559[1] }
        ?25     = { defs={} expr=v2560[1] }
        ?26     = { defs={} expr=v2561[1] }
        ?27     = { defs={} expr=v2562[1] }
        ?28     = { defs={} expr=v2563[1] }
        ?29     = { defs={} expr=v2564[1] }
        ?30     = { defs={} expr=v2565[1] }
        ?31     = { defs={} expr=v2566[1] }
        ip      = { defs={0x080483aa,0x080483b0} expr=0x080483b3[32] }
    memory:
    init mem:
0x80483b3:mov    DWORD PTR ds:[0x080496f0<.data+8>], eax
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2521[32] 4[32]) }
        cx      = { defs={} expr=v2522[32] }
        dx      = { defs={} expr=v2523[32] }
        bx      = { defs={} expr=v2524[32] }
        sp      = { defs={} expr=v2525[32] }
        bp      = { defs={} expr=v2526[32] }
        si      = { defs={0x080483aa} expr=v2527[32] }
        di      = { defs={} expr=v2528[32] }
        es      = { defs={} expr=v2529[16] }
        cs      = { defs={} expr=v2530[16] }
        ss      = { defs={} expr=v2531[16] }
        ds      = { defs={} expr=v2532[16] }
        fs      = { defs={} expr=v2533[16] }
        gs      = { defs={} expr=v2534[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2536[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2538[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2540[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2521[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2521[32] 4[32])) }
        tf      = { defs={} expr=v2543[1] }
        if      = { defs={} expr=v2544[1] }
        df      = { defs={} expr=v2545[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2547[1] }
        iopl1   = { defs={} expr=v2548[1] }
        nt      = { defs={} expr=v2549[1] }
        ?15     = { defs={} expr=v2550[1] }
        rf      = { defs={} expr=v2551[1] }
        vm      = { defs={} expr=v2552[1] }
        ac      = { defs={} expr=v2553[1] }
        vif     = { defs={} expr=v2554[1] }
        vip     = { defs={} expr=v2555[1] }
        id      = { defs={} expr=v2556[1] }
        ?22     = { defs={} expr=v2557[1] }
        ?23     = { defs={} expr=v2558[1] }
        ?24     = { defs={} expr=v2559[1] }
        ?25     = { defs={} expr=v2560[1] }
        ?26     = { defs={} expr=v2561[1] }
        ?27     = { defs={} expr=v2562[1] }
        ?28     = { defs={} expr=v2563[1] }
        ?29     = { defs={} expr=v2564[1] }
        ?30     = { defs={} expr=v2565[1] }
        ?31     = { defs={} expr=v2566[1] }
        ip      = { defs={0x080483aa,0x080483b0,0x080483b3} expr=0x080483b8[32] }
    memory:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 24[32] 32[32] (add[32] v2521[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 16[32] 24[32] (add[32] v2521[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 8[32] 16[32] (add[32] v2521[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32])) }
          flags = { }
    init mem:
0x80483b8:call   edx
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2521[32] 4[32]) }
        cx      = { defs={} expr=v2522[32] }
        dx      = { defs={} expr=v2523[32] }
        bx      = { defs={} expr=v2524[32] }
        sp      = { defs={0x080483b8} expr=(add[32] v2525[32] -4[32]) }
        bp      = { defs={} expr=v2526[32] }
        si      = { defs={0x080483aa} expr=v2527[32] }
        di      = { defs={} expr=v2528[32] }
        es      = { defs={} expr=v2529[16] }
        cs      = { defs={} expr=v2530[16] }
        ss      = { defs={} expr=v2531[16] }
        ds      = { defs={} expr=v2532[16] }
        fs      = { defs={} expr=v2533[16] }
        gs      = { defs={} expr=v2534[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2536[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2538[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2540[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2521[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2521[32] 4[32])) }
        tf      = { defs={} expr=v2543[1] }
        if      = { defs={} expr=v2544[1] }
        df      = { defs={} expr=v2545[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2521[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2521[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2547[1] }
        iopl1   = { defs={} expr=v2548[1] }
        nt      = { defs={} expr=v2549[1] }
        ?15     = { defs={} expr=v2550[1] }
        rf      = { defs={} expr=v2551[1] }
        vm      = { defs={} expr=v2552[1] }
        ac      = { defs={} expr=v2553[1] }
        vif     = { defs={} expr=v2554[1] }
        vip     = { defs={} expr=v2555[1] }
        id      = { defs={} expr=v2556[1] }
        ?22     = { defs={} expr=v2557[1] }
        ?23     = { defs={} expr=v2558[1] }
        ?24     = { defs={} expr=v2559[1] }
        ?25     = { defs={} expr=v2560[1] }
        ?26     = { defs={} expr=v2561[1] }
        ?27     = { defs={} expr=v2562[1] }
        ?28     = { defs={} expr=v2563[1] }
        ?29     = { defs={} expr=v2564[1] }
        ?30     = { defs={} expr=v2565[1] }
        ?31     = { defs={} expr=v2566[1] }
        ip      = { defs={0x080483b8} expr=v2523[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2525[32] -4[32]) 3[32]) }
          value = { defs={0x080483aa,0x080483b0,0x080483b3,0x080483b8} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2525[32] -4[32]) 2[32]) }
          value = { defs={0x080483aa,0x080483b0,0x080483b3,0x080483b8} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2525[32] -4[32]) 1[32]) }
          value = { defs={0x080483aa,0x080483b0,0x080483b3,0x080483b8} expr=-125[8] }
          flags = { }
        address = { defs={0x080483b8} expr=(add[32] v2525[32] -4[32]) }
          value = { defs={0x080483aa,0x080483b0,0x080483b3,0x080483b8} expr=-70[8] }
          flags = { }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 24[32] 32[32] (add[32] v2521[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 16[32] 24[32] (add[32] v2521[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 8[32] 16[32] (add[32] v2521[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={0x080483b0,0x080483b3} expr=(extract[8] 0[32] 8[32] (add[32] v2521[32] 4[32])) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) }
        cx      = { defs={} expr=v2692[32] }
        dx      = { defs={} expr=v2693[32] }
        bx      = { defs={} expr=v2694[32] }
        sp      = { defs={} expr=v2695[32] }
        bp      = { defs={} expr=v2696[32] }
        si      = { defs={} expr=v2697[32] }
        di      = { defs={} expr=v2698[32] }
        es      = { defs={} expr=v2699[16] }
        cs      = { defs={} expr=v2700[16] }
        ss      = { defs={} expr=v2701[16] }
        ds      = { defs={} expr=v2702[16] }
        fs      = { defs={} expr=v2703[16] }
        gs      = { defs={} expr=v2704[16] }
        cf      = { defs={} expr=v2705[1] }
        ?1      = { defs={} expr=v2706[1] }
        pf      = { defs={} expr=v2707[1] }
        ?3      = { defs={} expr=v2708[1] }
        af      = { defs={} expr=v2709[1] }
        ?5      = { defs={} expr=v2710[1] }
        zf      = { defs={} expr=v2711[1] }
        sf      = { defs={} expr=v2712[1] }
        tf      = { defs={} expr=v2713[1] }
        if      = { defs={} expr=v2714[1] }
        df      = { defs={} expr=v2715[1] }
        of      = { defs={} expr=v2716[1] }
        iopl0   = { defs={} expr=v2717[1] }
        iopl1   = { defs={} expr=v2718[1] }
        nt      = { defs={} expr=v2719[1] }
        ?15     = { defs={} expr=v2720[1] }
        rf      = { defs={} expr=v2721[1] }
        vm      = { defs={} expr=v2722[1] }
        ac      = { defs={} expr=v2723[1] }
        vif     = { defs={} expr=v2724[1] }
        vip     = { defs={} expr=v2725[1] }
        id      = { defs={} expr=v2726[1] }
        ?22     = { defs={} expr=v2727[1] }
        ?23     = { defs={} expr=v2728[1] }
        ?24     = { defs={} expr=v2729[1] }
        ?25     = { defs={} expr=v2730[1] }
        ?26     = { defs={} expr=v2731[1] }
        ?27     = { defs={} expr=v2732[1] }
        ?28     = { defs={} expr=v2733[1] }
        ?29     = { defs={} expr=v2734[1] }
        ?30     = { defs={} expr=v2735[1] }
        ?31     = { defs={} expr=v2736[1] }
        ip      = { defs={0x080483ba} expr=0x080483bf[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2746[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2745[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2744[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2743[8] }
          flags = { rdonly }
0x80483bf:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) }
        cx      = { defs={} expr=v2692[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) }
        bx      = { defs={} expr=v2694[32] }
        sp      = { defs={} expr=v2695[32] }
        bp      = { defs={} expr=v2696[32] }
        si      = { defs={} expr=v2697[32] }
        di      = { defs={} expr=v2698[32] }
        es      = { defs={} expr=v2699[16] }
        cs      = { defs={} expr=v2700[16] }
        ss      = { defs={} expr=v2701[16] }
        ds      = { defs={} expr=v2702[16] }
        fs      = { defs={} expr=v2703[16] }
        gs      = { defs={} expr=v2704[16] }
        cf      = { defs={} expr=v2705[1] }
        ?1      = { defs={} expr=v2706[1] }
        pf      = { defs={} expr=v2707[1] }
        ?3      = { defs={} expr=v2708[1] }
        af      = { defs={} expr=v2709[1] }
        ?5      = { defs={} expr=v2710[1] }
        zf      = { defs={} expr=v2711[1] }
        sf      = { defs={} expr=v2712[1] }
        tf      = { defs={} expr=v2713[1] }
        if      = { defs={} expr=v2714[1] }
        df      = { defs={} expr=v2715[1] }
        of      = { defs={} expr=v2716[1] }
        iopl0   = { defs={} expr=v2717[1] }
        iopl1   = { defs={} expr=v2718[1] }
        nt      = { defs={} expr=v2719[1] }
        ?15     = { defs={} expr=v2720[1] }
        rf      = { defs={} expr=v2721[1] }
        vm      = { defs={} expr=v2722[1] }
        ac      = { defs={} expr=v2723[1] }
        vif     = { defs={} expr=v2724[1] }
        vip     = { defs={} expr=v2725[1] }
        id      = { defs={} expr=v2726[1] }
        ?22     = { defs={} expr=v2727[1] }
        ?23     = { defs={} expr=v2728[1] }
        ?24     = { defs={} expr=v2729[1] }
        ?25     = { defs={} expr=v2730[1] }
        ?26     = { defs={} expr=v2731[1] }
        ?27     = { defs={} expr=v2732[1] }
        ?28     = { defs={} expr=v2733[1] }
        ?29     = { defs={} expr=v2734[1] }
        ?30     = { defs={} expr=v2735[1] }
        ?31     = { defs={} expr=v2736[1] }
        ip      = { defs={0x080483ba,0x080483bf} expr=0x080483c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) 3[32]) }
          value = { defs={} expr=v2761[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) 2[32]) }
          value = { defs={} expr=v2760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) 1[32]) }
          value = { defs={} expr=v2759[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) }
          value = { defs={} expr=v2758[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2746[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2745[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2744[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2743[8] }
          flags = { rdonly }
0x80483c1:test   edx, edx
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) }
        cx      = { defs={} expr=v2692[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) }
        bx      = { defs={} expr=v2694[32] }
        sp      = { defs={} expr=v2695[32] }
        bp      = { defs={} expr=v2696[32] }
        si      = { defs={} expr=v2697[32] }
        di      = { defs={} expr=v2698[32] }
        es      = { defs={} expr=v2699[16] }
        cs      = { defs={} expr=v2700[16] }
        ss      = { defs={} expr=v2701[16] }
        ds      = { defs={} expr=v2702[16] }
        fs      = { defs={} expr=v2703[16] }
        gs      = { defs={} expr=v2704[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v2706[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))))))) }
        ?3      = { defs={} expr=v2708[1] }
        af      = { defs={0x080483c1} expr=v2798[1] }
        ?5      = { defs={} expr=v2710[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))))) }
        tf      = { defs={} expr=v2713[1] }
        if      = { defs={} expr=v2714[1] }
        df      = { defs={} expr=v2715[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v2717[1] }
        iopl1   = { defs={} expr=v2718[1] }
        nt      = { defs={} expr=v2719[1] }
        ?15     = { defs={} expr=v2720[1] }
        rf      = { defs={} expr=v2721[1] }
        vm      = { defs={} expr=v2722[1] }
        ac      = { defs={} expr=v2723[1] }
        vif     = { defs={} expr=v2724[1] }
        vip     = { defs={} expr=v2725[1] }
        id      = { defs={} expr=v2726[1] }
        ?22     = { defs={} expr=v2727[1] }
        ?23     = { defs={} expr=v2728[1] }
        ?24     = { defs={} expr=v2729[1] }
        ?25     = { defs={} expr=v2730[1] }
        ?26     = { defs={} expr=v2731[1] }
        ?27     = { defs={} expr=v2732[1] }
        ?28     = { defs={} expr=v2733[1] }
        ?29     = { defs={} expr=v2734[1] }
        ?30     = { defs={} expr=v2735[1] }
        ?31     = { defs={} expr=v2736[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1} expr=0x080483c3[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) 3[32]) }
          value = { defs={} expr=v2761[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) 2[32]) }
          value = { defs={} expr=v2760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) 1[32]) }
          value = { defs={} expr=v2759[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) }
          value = { defs={} expr=v2758[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2746[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2745[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2744[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2743[8] }
          flags = { rdonly }
0x80483c3:jne    0x080483b0<<Insn>>
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) }
        cx      = { defs={} expr=v2692[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) }
        bx      = { defs={} expr=v2694[32] }
        sp      = { defs={} expr=v2695[32] }
        bp      = { defs={} expr=v2696[32] }
        si      = { defs={} expr=v2697[32] }
        di      = { defs={} expr=v2698[32] }
        es      = { defs={} expr=v2699[16] }
        cs      = { defs={} expr=v2700[16] }
        ss      = { defs={} expr=v2701[16] }
        ds      = { defs={} expr=v2702[16] }
        fs      = { defs={} expr=v2703[16] }
        gs      = { defs={} expr=v2704[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v2706[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))))))) }
        ?3      = { defs={} expr=v2708[1] }
        af      = { defs={0x080483c1} expr=v2798[1] }
        ?5      = { defs={} expr=v2710[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))))) }
        tf      = { defs={} expr=v2713[1] }
        if      = { defs={} expr=v2714[1] }
        df      = { defs={} expr=v2715[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v2717[1] }
        iopl1   = { defs={} expr=v2718[1] }
        nt      = { defs={} expr=v2719[1] }
        ?15     = { defs={} expr=v2720[1] }
        rf      = { defs={} expr=v2721[1] }
        vm      = { defs={} expr=v2722[1] }
        ac      = { defs={} expr=v2723[1] }
        vif     = { defs={} expr=v2724[1] }
        vip     = { defs={} expr=v2725[1] }
        id      = { defs={} expr=v2726[1] }
        ?22     = { defs={} expr=v2727[1] }
        ?23     = { defs={} expr=v2728[1] }
        ?24     = { defs={} expr=v2729[1] }
        ?25     = { defs={} expr=v2730[1] }
        ?26     = { defs={} expr=v2731[1] }
        ?27     = { defs={} expr=v2732[1] }
        ?28     = { defs={} expr=v2733[1] }
        ?29     = { defs={} expr=v2734[1] }
        ?30     = { defs={} expr=v2735[1] }
        ?31     = { defs={} expr=v2736[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1,0x080483c3} expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2758[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2759[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2760[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2761[8])))))) 0x080483b0[32] 0x080483c5[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) 3[32]) }
          value = { defs={} expr=v2761[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) 2[32]) }
          value = { defs={} expr=v2760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) 1[32]) }
          value = { defs={} expr=v2759[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2743[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2744[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2745[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2746[8]))) }
          value = { defs={} expr=v2758[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2746[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2745[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2744[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2743[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483c5:mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01
    registers:
        ax      = { defs={} expr=v2857[32] }
        cx      = { defs={} expr=v2858[32] }
        dx      = { defs={} expr=v2859[32] }
        bx      = { defs={} expr=v2860[32] }
        sp      = { defs={} expr=v2861[32] }
        bp      = { defs={} expr=v2862[32] }
        si      = { defs={} expr=v2863[32] }
        di      = { defs={} expr=v2864[32] }
        es      = { defs={} expr=v2865[16] }
        cs      = { defs={} expr=v2866[16] }
        ss      = { defs={} expr=v2867[16] }
        ds      = { defs={} expr=v2868[16] }
        fs      = { defs={} expr=v2869[16] }
        gs      = { defs={} expr=v2870[16] }
        cf      = { defs={} expr=v2871[1] }
        ?1      = { defs={} expr=v2872[1] }
        pf      = { defs={} expr=v2873[1] }
        ?3      = { defs={} expr=v2874[1] }
        af      = { defs={} expr=v2875[1] }
        ?5      = { defs={} expr=v2876[1] }
        zf      = { defs={} expr=v2877[1] }
        sf      = { defs={} expr=v2878[1] }
        tf      = { defs={} expr=v2879[1] }
        if      = { defs={} expr=v2880[1] }
        df      = { defs={} expr=v2881[1] }
        of      = { defs={} expr=v2882[1] }
        iopl0   = { defs={} expr=v2883[1] }
        iopl1   = { defs={} expr=v2884[1] }
        nt      = { defs={} expr=v2885[1] }
        ?15     = { defs={} expr=v2886[1] }
        rf      = { defs={} expr=v2887[1] }
        vm      = { defs={} expr=v2888[1] }
        ac      = { defs={} expr=v2889[1] }
        vif     = { defs={} expr=v2890[1] }
        vip     = { defs={} expr=v2891[1] }
        id      = { defs={} expr=v2892[1] }
        ?22     = { defs={} expr=v2893[1] }
        ?23     = { defs={} expr=v2894[1] }
        ?24     = { defs={} expr=v2895[1] }
        ?25     = { defs={} expr=v2896[1] }
        ?26     = { defs={} expr=v2897[1] }
        ?27     = { defs={} expr=v2898[1] }
        ?28     = { defs={} expr=v2899[1] }
        ?29     = { defs={} expr=v2900[1] }
        ?30     = { defs={} expr=v2901[1] }
        ?31     = { defs={} expr=v2902[1] }
        ip      = { defs={0x080483c5} expr=0x080483cc[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={0x080483c5} expr=1[8] }
          flags = { }
    init mem:
0x80483cc:leave  
    registers:
        ax      = { defs={} expr=v2857[32] }
        cx      = { defs={} expr=v2858[32] }
        dx      = { defs={} expr=v2859[32] }
        bx      = { defs={} expr=v2860[32] }
        sp      = { defs={0x080483cc} expr=(add[32] v2862[32] 4[32]) }
        bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2917[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2918[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2919[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2920[8]))) }
        si      = { defs={} expr=v2863[32] }
        di      = { defs={} expr=v2864[32] }
        es      = { defs={} expr=v2865[16] }
        cs      = { defs={} expr=v2866[16] }
        ss      = { defs={} expr=v2867[16] }
        ds      = { defs={} expr=v2868[16] }
        fs      = { defs={} expr=v2869[16] }
        gs      = { defs={} expr=v2870[16] }
        cf      = { defs={} expr=v2871[1] }
        ?1      = { defs={} expr=v2872[1] }
        pf      = { defs={} expr=v2873[1] }
        ?3      = { defs={} expr=v2874[1] }
        af      = { defs={} expr=v2875[1] }
        ?5      = { defs={} expr=v2876[1] }
        zf      = { defs={} expr=v2877[1] }
        sf      = { defs={} expr=v2878[1] }
        tf      = { defs={} expr=v2879[1] }
        if      = { defs={} expr=v2880[1] }
        df      = { defs={} expr=v2881[1] }
        of      = { defs={} expr=v2882[1] }
        iopl0   = { defs={} expr=v2883[1] }
        iopl1   = { defs={} expr=v2884[1] }
        nt      = { defs={} expr=v2885[1] }
        ?15     = { defs={} expr=v2886[1] }
        rf      = { defs={} expr=v2887[1] }
        vm      = { defs={} expr=v2888[1] }
        ac      = { defs={} expr=v2889[1] }
        vif     = { defs={} expr=v2890[1] }
        vip     = { defs={} expr=v2891[1] }
        id      = { defs={} expr=v2892[1] }
        ?22     = { defs={} expr=v2893[1] }
        ?23     = { defs={} expr=v2894[1] }
        ?24     = { defs={} expr=v2895[1] }
        ?25     = { defs={} expr=v2896[1] }
        ?26     = { defs={} expr=v2897[1] }
        ?27     = { defs={} expr=v2898[1] }
        ?28     = { defs={} expr=v2899[1] }
        ?29     = { defs={} expr=v2900[1] }
        ?30     = { defs={} expr=v2901[1] }
        ?31     = { defs={} expr=v2902[1] }
        ip      = { defs={0x080483c5,0x080483cc} expr=0x080483cd[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={0x080483c5} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v2862[32] 3[32]) }
          value = { defs={} expr=v2920[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2862[32] 2[32]) }
          value = { defs={} expr=v2919[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2862[32] 1[32]) }
          value = { defs={} expr=v2918[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2862[32] }
          value = { defs={} expr=v2917[8] }
          flags = { rdonly }
0x80483cd:ret    
    registers:
        ax      = { defs={} expr=v2857[32] }
        cx      = { defs={} expr=v2858[32] }
        dx      = { defs={} expr=v2859[32] }
        bx      = { defs={} expr=v2860[32] }
        sp      = { defs={0x080483cc,0x080483cd} expr=(add[32] (add[32] v2862[32] 4[32]) 4[32]) }
        bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2917[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2918[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2919[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2920[8]))) }
        si      = { defs={} expr=v2863[32] }
        di      = { defs={} expr=v2864[32] }
        es      = { defs={} expr=v2865[16] }
        cs      = { defs={} expr=v2866[16] }
        ss      = { defs={} expr=v2867[16] }
        ds      = { defs={} expr=v2868[16] }
        fs      = { defs={} expr=v2869[16] }
        gs      = { defs={} expr=v2870[16] }
        cf      = { defs={} expr=v2871[1] }
        ?1      = { defs={} expr=v2872[1] }
        pf      = { defs={} expr=v2873[1] }
        ?3      = { defs={} expr=v2874[1] }
        af      = { defs={} expr=v2875[1] }
        ?5      = { defs={} expr=v2876[1] }
        zf      = { defs={} expr=v2877[1] }
        sf      = { defs={} expr=v2878[1] }
        tf      = { defs={} expr=v2879[1] }
        if      = { defs={} expr=v2880[1] }
        df      = { defs={} expr=v2881[1] }
        of      = { defs={} expr=v2882[1] }
        iopl0   = { defs={} expr=v2883[1] }
        iopl1   = { defs={} expr=v2884[1] }
        nt      = { defs={} expr=v2885[1] }
        ?15     = { defs={} expr=v2886[1] }
        rf      = { defs={} expr=v2887[1] }
        vm      = { defs={} expr=v2888[1] }
        ac      = { defs={} expr=v2889[1] }
        vif     = { defs={} expr=v2890[1] }
        vip     = { defs={} expr=v2891[1] }
        id      = { defs={} expr=v2892[1] }
        ?22     = { defs={} expr=v2893[1] }
        ?23     = { defs={} expr=v2894[1] }
        ?24     = { defs={} expr=v2895[1] }
        ?25     = { defs={} expr=v2896[1] }
        ?26     = { defs={} expr=v2897[1] }
        ?27     = { defs={} expr=v2898[1] }
        ?28     = { defs={} expr=v2899[1] }
        ?29     = { defs={} expr=v2900[1] }
        ?30     = { defs={} expr=v2901[1] }
        ?31     = { defs={} expr=v2902[1] }
        ip      = { defs={0x080483cd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2935[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2936[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2937[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2938[8]))) }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={0x080483c5} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2862[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2938[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2862[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2937[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2862[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2936[8] }
          flags = { rdonly }
        address = { defs={0x080483cc,0x080483cd} expr=(add[32] v2862[32] 4[32]) }
          value = { defs={} expr=v2935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2862[32] 3[32]) }
          value = { defs={} expr=v2920[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2862[32] 2[32]) }
          value = { defs={} expr=v2919[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2862[32] 1[32]) }
          value = { defs={} expr=v2918[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2862[32] }
          value = { defs={} expr=v2917[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483d0:push   ebp
    registers:
        ax      = { defs={} expr=v2993[32] }
        cx      = { defs={} expr=v2994[32] }
        dx      = { defs={} expr=v2995[32] }
        bx      = { defs={} expr=v2996[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v2997[32] -4[32]) }
        bp      = { defs={} expr=v2998[32] }
        si      = { defs={} expr=v2999[32] }
        di      = { defs={} expr=v3000[32] }
        es      = { defs={} expr=v3001[16] }
        cs      = { defs={} expr=v3002[16] }
        ss      = { defs={} expr=v3003[16] }
        ds      = { defs={} expr=v3004[16] }
        fs      = { defs={} expr=v3005[16] }
        gs      = { defs={} expr=v3006[16] }
        cf      = { defs={} expr=v3007[1] }
        ?1      = { defs={} expr=v3008[1] }
        pf      = { defs={} expr=v3009[1] }
        ?3      = { defs={} expr=v3010[1] }
        af      = { defs={} expr=v3011[1] }
        ?5      = { defs={} expr=v3012[1] }
        zf      = { defs={} expr=v3013[1] }
        sf      = { defs={} expr=v3014[1] }
        tf      = { defs={} expr=v3015[1] }
        if      = { defs={} expr=v3016[1] }
        df      = { defs={} expr=v3017[1] }
        of      = { defs={} expr=v3018[1] }
        iopl0   = { defs={} expr=v3019[1] }
        iopl1   = { defs={} expr=v3020[1] }
        nt      = { defs={} expr=v3021[1] }
        ?15     = { defs={} expr=v3022[1] }
        rf      = { defs={} expr=v3023[1] }
        vm      = { defs={} expr=v3024[1] }
        ac      = { defs={} expr=v3025[1] }
        vif     = { defs={} expr=v3026[1] }
        vip     = { defs={} expr=v3027[1] }
        id      = { defs={} expr=v3028[1] }
        ?22     = { defs={} expr=v3029[1] }
        ?23     = { defs={} expr=v3030[1] }
        ?24     = { defs={} expr=v3031[1] }
        ?25     = { defs={} expr=v3032[1] }
        ?26     = { defs={} expr=v3033[1] }
        ?27     = { defs={} expr=v3034[1] }
        ?28     = { defs={} expr=v3035[1] }
        ?29     = { defs={} expr=v3036[1] }
        ?30     = { defs={} expr=v3037[1] }
        ?31     = { defs={} expr=v3038[1] }
        ip      = { defs={0x080483d0} expr=0x080483d1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v2998[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2997[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v2998[32]) }
          flags = { }
    init mem:
0x80483d1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2993[32] }
        cx      = { defs={} expr=v2994[32] }
        dx      = { defs={} expr=v2995[32] }
        bx      = { defs={} expr=v2996[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v2997[32] -4[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2997[32] -4[32]) }
        si      = { defs={} expr=v2999[32] }
        di      = { defs={} expr=v3000[32] }
        es      = { defs={} expr=v3001[16] }
        cs      = { defs={} expr=v3002[16] }
        ss      = { defs={} expr=v3003[16] }
        ds      = { defs={} expr=v3004[16] }
        fs      = { defs={} expr=v3005[16] }
        gs      = { defs={} expr=v3006[16] }
        cf      = { defs={} expr=v3007[1] }
        ?1      = { defs={} expr=v3008[1] }
        pf      = { defs={} expr=v3009[1] }
        ?3      = { defs={} expr=v3010[1] }
        af      = { defs={} expr=v3011[1] }
        ?5      = { defs={} expr=v3012[1] }
        zf      = { defs={} expr=v3013[1] }
        sf      = { defs={} expr=v3014[1] }
        tf      = { defs={} expr=v3015[1] }
        if      = { defs={} expr=v3016[1] }
        df      = { defs={} expr=v3017[1] }
        of      = { defs={} expr=v3018[1] }
        iopl0   = { defs={} expr=v3019[1] }
        iopl1   = { defs={} expr=v3020[1] }
        nt      = { defs={} expr=v3021[1] }
        ?15     = { defs={} expr=v3022[1] }
        rf      = { defs={} expr=v3023[1] }
        vm      = { defs={} expr=v3024[1] }
        ac      = { defs={} expr=v3025[1] }
        vif     = { defs={} expr=v3026[1] }
        vip     = { defs={} expr=v3027[1] }
        id      = { defs={} expr=v3028[1] }
        ?22     = { defs={} expr=v3029[1] }
        ?23     = { defs={} expr=v3030[1] }
        ?24     = { defs={} expr=v3031[1] }
        ?25     = { defs={} expr=v3032[1] }
        ?26     = { defs={} expr=v3033[1] }
        ?27     = { defs={} expr=v3034[1] }
        ?28     = { defs={} expr=v3035[1] }
        ?29     = { defs={} expr=v3036[1] }
        ?30     = { defs={} expr=v3037[1] }
        ?31     = { defs={} expr=v3038[1] }
        ip      = { defs={0x080483d0,0x080483d1} expr=0x080483d3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v2998[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2997[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v2998[32]) }
          flags = { }
    init mem:
0x80483d3:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2993[32] }
        cx      = { defs={} expr=v2994[32] }
        dx      = { defs={} expr=v2995[32] }
        bx      = { defs={} expr=v2996[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2997[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2997[32] -4[32]) }
        si      = { defs={} expr=v2999[32] }
        di      = { defs={} expr=v3000[32] }
        es      = { defs={} expr=v3001[16] }
        cs      = { defs={} expr=v3002[16] }
        ss      = { defs={} expr=v3003[16] }
        ds      = { defs={} expr=v3004[16] }
        fs      = { defs={} expr=v3005[16] }
        gs      = { defs={} expr=v3006[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3008[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3010[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3012[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2997[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2997[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3015[1] }
        if      = { defs={} expr=v3016[1] }
        df      = { defs={} expr=v3017[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3019[1] }
        iopl1   = { defs={} expr=v3020[1] }
        nt      = { defs={} expr=v3021[1] }
        ?15     = { defs={} expr=v3022[1] }
        rf      = { defs={} expr=v3023[1] }
        vm      = { defs={} expr=v3024[1] }
        ac      = { defs={} expr=v3025[1] }
        vif     = { defs={} expr=v3026[1] }
        vip     = { defs={} expr=v3027[1] }
        id      = { defs={} expr=v3028[1] }
        ?22     = { defs={} expr=v3029[1] }
        ?23     = { defs={} expr=v3030[1] }
        ?24     = { defs={} expr=v3031[1] }
        ?25     = { defs={} expr=v3032[1] }
        ?26     = { defs={} expr=v3033[1] }
        ?27     = { defs={} expr=v3034[1] }
        ?28     = { defs={} expr=v3035[1] }
        ?29     = { defs={} expr=v3036[1] }
        ?30     = { defs={} expr=v3037[1] }
        ?31     = { defs={} expr=v3038[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3} expr=0x080483d6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v2998[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2997[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v2998[32]) }
          flags = { }
    init mem:
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8<.jcr>]
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) }
        cx      = { defs={} expr=v2994[32] }
        dx      = { defs={} expr=v2995[32] }
        bx      = { defs={} expr=v2996[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2997[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2997[32] -4[32]) }
        si      = { defs={} expr=v2999[32] }
        di      = { defs={} expr=v3000[32] }
        es      = { defs={} expr=v3001[16] }
        cs      = { defs={} expr=v3002[16] }
        ss      = { defs={} expr=v3003[16] }
        ds      = { defs={} expr=v3004[16] }
        fs      = { defs={} expr=v3005[16] }
        gs      = { defs={} expr=v3006[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3008[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2997[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3010[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3012[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2997[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2997[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3015[1] }
        if      = { defs={} expr=v3016[1] }
        df      = { defs={} expr=v3017[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2997[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3019[1] }
        iopl1   = { defs={} expr=v3020[1] }
        nt      = { defs={} expr=v3021[1] }
        ?15     = { defs={} expr=v3022[1] }
        rf      = { defs={} expr=v3023[1] }
        vm      = { defs={} expr=v3024[1] }
        ac      = { defs={} expr=v3025[1] }
        vif     = { defs={} expr=v3026[1] }
        vip     = { defs={} expr=v3027[1] }
        id      = { defs={} expr=v3028[1] }
        ?22     = { defs={} expr=v3029[1] }
        ?23     = { defs={} expr=v3030[1] }
        ?24     = { defs={} expr=v3031[1] }
        ?25     = { defs={} expr=v3032[1] }
        ?26     = { defs={} expr=v3033[1] }
        ?27     = { defs={} expr=v3034[1] }
        ?28     = { defs={} expr=v3035[1] }
        ?29     = { defs={} expr=v3036[1] }
        ?30     = { defs={} expr=v3037[1] }
        ?31     = { defs={} expr=v3038[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6} expr=0x080483db[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v2998[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2997[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v2998[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3116[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3115[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3114[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3113[8] }
          flags = { rdonly }
0x80483db:test   eax, eax
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) }
        cx      = { defs={} expr=v2994[32] }
        dx      = { defs={} expr=v2995[32] }
        bx      = { defs={} expr=v2996[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2997[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2997[32] -4[32]) }
        si      = { defs={} expr=v2999[32] }
        di      = { defs={} expr=v3000[32] }
        es      = { defs={} expr=v3001[16] }
        cs      = { defs={} expr=v3002[16] }
        ss      = { defs={} expr=v3003[16] }
        ds      = { defs={} expr=v3004[16] }
        fs      = { defs={} expr=v3005[16] }
        gs      = { defs={} expr=v3006[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v3008[1] }
        pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))))))) }
        ?3      = { defs={} expr=v3010[1] }
        af      = { defs={0x080483db} expr=v3153[1] }
        ?5      = { defs={} expr=v3012[1] }
        zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))))) }
        sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))))) }
        tf      = { defs={} expr=v3015[1] }
        if      = { defs={} expr=v3016[1] }
        df      = { defs={} expr=v3017[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v3019[1] }
        iopl1   = { defs={} expr=v3020[1] }
        nt      = { defs={} expr=v3021[1] }
        ?15     = { defs={} expr=v3022[1] }
        rf      = { defs={} expr=v3023[1] }
        vm      = { defs={} expr=v3024[1] }
        ac      = { defs={} expr=v3025[1] }
        vif     = { defs={} expr=v3026[1] }
        vip     = { defs={} expr=v3027[1] }
        id      = { defs={} expr=v3028[1] }
        ?22     = { defs={} expr=v3029[1] }
        ?23     = { defs={} expr=v3030[1] }
        ?24     = { defs={} expr=v3031[1] }
        ?25     = { defs={} expr=v3032[1] }
        ?26     = { defs={} expr=v3033[1] }
        ?27     = { defs={} expr=v3034[1] }
        ?28     = { defs={} expr=v3035[1] }
        ?29     = { defs={} expr=v3036[1] }
        ?30     = { defs={} expr=v3037[1] }
        ?31     = { defs={} expr=v3038[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db} expr=0x080483dd[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v2998[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2997[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v2998[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3116[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3115[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3114[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3113[8] }
          flags = { rdonly }
0x80483dd:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) }
        cx      = { defs={} expr=v2994[32] }
        dx      = { defs={} expr=v2995[32] }
        bx      = { defs={} expr=v2996[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2997[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2997[32] -4[32]) }
        si      = { defs={} expr=v2999[32] }
        di      = { defs={} expr=v3000[32] }
        es      = { defs={} expr=v3001[16] }
        cs      = { defs={} expr=v3002[16] }
        ss      = { defs={} expr=v3003[16] }
        ds      = { defs={} expr=v3004[16] }
        fs      = { defs={} expr=v3005[16] }
        gs      = { defs={} expr=v3006[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v3008[1] }
        pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8])))))))))) }
        ?3      = { defs={} expr=v3010[1] }
        af      = { defs={0x080483db} expr=v3153[1] }
        ?5      = { defs={} expr=v3012[1] }
        zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))))) }
        sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))))) }
        tf      = { defs={} expr=v3015[1] }
        if      = { defs={} expr=v3016[1] }
        df      = { defs={} expr=v3017[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v3019[1] }
        iopl1   = { defs={} expr=v3020[1] }
        nt      = { defs={} expr=v3021[1] }
        ?15     = { defs={} expr=v3022[1] }
        rf      = { defs={} expr=v3023[1] }
        vm      = { defs={} expr=v3024[1] }
        ac      = { defs={} expr=v3025[1] }
        vif     = { defs={} expr=v3026[1] }
        vip     = { defs={} expr=v3027[1] }
        id      = { defs={} expr=v3028[1] }
        ?22     = { defs={} expr=v3029[1] }
        ?23     = { defs={} expr=v3030[1] }
        ?24     = { defs={} expr=v3031[1] }
        ?25     = { defs={} expr=v3032[1] }
        ?26     = { defs={} expr=v3033[1] }
        ?27     = { defs={} expr=v3034[1] }
        ?28     = { defs={} expr=v3035[1] }
        ?29     = { defs={} expr=v3036[1] }
        ?30     = { defs={} expr=v3037[1] }
        ?31     = { defs={} expr=v3038[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db,0x080483dd} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3116[8]))))) 0x08048400[32] 0x080483df[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 3[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 24[32] 32[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 2[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 16[32] 24[32] v2998[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2997[32] -4[32]) 1[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 8[32] 16[32] v2998[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2997[32] -4[32]) }
          value = { defs={0x080483d0} expr=(extract[8] 0[32] 8[32] v2998[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3116[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3115[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3114[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3113[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483df:mov    eax, 0x00000000
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3212[32] }
        dx      = { defs={} expr=v3213[32] }
        bx      = { defs={} expr=v3214[32] }
        sp      = { defs={} expr=v3215[32] }
        bp      = { defs={} expr=v3216[32] }
        si      = { defs={} expr=v3217[32] }
        di      = { defs={} expr=v3218[32] }
        es      = { defs={} expr=v3219[16] }
        cs      = { defs={} expr=v3220[16] }
        ss      = { defs={} expr=v3221[16] }
        ds      = { defs={} expr=v3222[16] }
        fs      = { defs={} expr=v3223[16] }
        gs      = { defs={} expr=v3224[16] }
        cf      = { defs={} expr=v3225[1] }
        ?1      = { defs={} expr=v3226[1] }
        pf      = { defs={} expr=v3227[1] }
        ?3      = { defs={} expr=v3228[1] }
        af      = { defs={} expr=v3229[1] }
        ?5      = { defs={} expr=v3230[1] }
        zf      = { defs={} expr=v3231[1] }
        sf      = { defs={} expr=v3232[1] }
        tf      = { defs={} expr=v3233[1] }
        if      = { defs={} expr=v3234[1] }
        df      = { defs={} expr=v3235[1] }
        of      = { defs={} expr=v3236[1] }
        iopl0   = { defs={} expr=v3237[1] }
        iopl1   = { defs={} expr=v3238[1] }
        nt      = { defs={} expr=v3239[1] }
        ?15     = { defs={} expr=v3240[1] }
        rf      = { defs={} expr=v3241[1] }
        vm      = { defs={} expr=v3242[1] }
        ac      = { defs={} expr=v3243[1] }
        vif     = { defs={} expr=v3244[1] }
        vip     = { defs={} expr=v3245[1] }
        id      = { defs={} expr=v3246[1] }
        ?22     = { defs={} expr=v3247[1] }
        ?23     = { defs={} expr=v3248[1] }
        ?24     = { defs={} expr=v3249[1] }
        ?25     = { defs={} expr=v3250[1] }
        ?26     = { defs={} expr=v3251[1] }
        ?27     = { defs={} expr=v3252[1] }
        ?28     = { defs={} expr=v3253[1] }
        ?29     = { defs={} expr=v3254[1] }
        ?30     = { defs={} expr=v3255[1] }
        ?31     = { defs={} expr=v3256[1] }
        ip      = { defs={0x080483df} expr=0x080483e4[32] }
    memory:
    init mem:
0x80483e4:test   eax, eax
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3212[32] }
        dx      = { defs={} expr=v3213[32] }
        bx      = { defs={} expr=v3214[32] }
        sp      = { defs={} expr=v3215[32] }
        bp      = { defs={} expr=v3216[32] }
        si      = { defs={} expr=v3217[32] }
        di      = { defs={} expr=v3218[32] }
        es      = { defs={} expr=v3219[16] }
        cs      = { defs={} expr=v3220[16] }
        ss      = { defs={} expr=v3221[16] }
        ds      = { defs={} expr=v3222[16] }
        fs      = { defs={} expr=v3223[16] }
        gs      = { defs={} expr=v3224[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3226[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3228[1] }
        af      = { defs={0x080483e4} expr=v3293[1] }
        ?5      = { defs={} expr=v3230[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3233[1] }
        if      = { defs={} expr=v3234[1] }
        df      = { defs={} expr=v3235[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3237[1] }
        iopl1   = { defs={} expr=v3238[1] }
        nt      = { defs={} expr=v3239[1] }
        ?15     = { defs={} expr=v3240[1] }
        rf      = { defs={} expr=v3241[1] }
        vm      = { defs={} expr=v3242[1] }
        ac      = { defs={} expr=v3243[1] }
        vif     = { defs={} expr=v3244[1] }
        vip     = { defs={} expr=v3245[1] }
        id      = { defs={} expr=v3246[1] }
        ?22     = { defs={} expr=v3247[1] }
        ?23     = { defs={} expr=v3248[1] }
        ?24     = { defs={} expr=v3249[1] }
        ?25     = { defs={} expr=v3250[1] }
        ?26     = { defs={} expr=v3251[1] }
        ?27     = { defs={} expr=v3252[1] }
        ?28     = { defs={} expr=v3253[1] }
        ?29     = { defs={} expr=v3254[1] }
        ?30     = { defs={} expr=v3255[1] }
        ?31     = { defs={} expr=v3256[1] }
        ip      = { defs={0x080483df,0x080483e4} expr=0x080483e6[32] }
    memory:
    init mem:
0x80483e6:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3212[32] }
        dx      = { defs={} expr=v3213[32] }
        bx      = { defs={} expr=v3214[32] }
        sp      = { defs={} expr=v3215[32] }
        bp      = { defs={} expr=v3216[32] }
        si      = { defs={} expr=v3217[32] }
        di      = { defs={} expr=v3218[32] }
        es      = { defs={} expr=v3219[16] }
        cs      = { defs={} expr=v3220[16] }
        ss      = { defs={} expr=v3221[16] }
        ds      = { defs={} expr=v3222[16] }
        fs      = { defs={} expr=v3223[16] }
        gs      = { defs={} expr=v3224[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3226[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3228[1] }
        af      = { defs={0x080483e4} expr=v3293[1] }
        ?5      = { defs={} expr=v3230[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3233[1] }
        if      = { defs={} expr=v3234[1] }
        df      = { defs={} expr=v3235[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3237[1] }
        iopl1   = { defs={} expr=v3238[1] }
        nt      = { defs={} expr=v3239[1] }
        ?15     = { defs={} expr=v3240[1] }
        rf      = { defs={} expr=v3241[1] }
        vm      = { defs={} expr=v3242[1] }
        ac      = { defs={} expr=v3243[1] }
        vif     = { defs={} expr=v3244[1] }
        vip     = { defs={} expr=v3245[1] }
        id      = { defs={} expr=v3246[1] }
        ?22     = { defs={} expr=v3247[1] }
        ?23     = { defs={} expr=v3248[1] }
        ?24     = { defs={} expr=v3249[1] }
        ?25     = { defs={} expr=v3250[1] }
        ?26     = { defs={} expr=v3251[1] }
        ?27     = { defs={} expr=v3252[1] }
        ?28     = { defs={} expr=v3253[1] }
        ?29     = { defs={} expr=v3254[1] }
        ?30     = { defs={} expr=v3255[1] }
        ?31     = { defs={} expr=v3256[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6} expr=0x08048400[32] }
    memory:
    init mem:
0x8048400:mov    esp, ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3212[32] }
        dx      = { defs={} expr=v3213[32] }
        bx      = { defs={} expr=v3214[32] }
        sp      = { defs={0x08048400} expr=v3216[32] }
        bp      = { defs={} expr=v3216[32] }
        si      = { defs={} expr=v3217[32] }
        di      = { defs={} expr=v3218[32] }
        es      = { defs={} expr=v3219[16] }
        cs      = { defs={} expr=v3220[16] }
        ss      = { defs={} expr=v3221[16] }
        ds      = { defs={} expr=v3222[16] }
        fs      = { defs={} expr=v3223[16] }
        gs      = { defs={} expr=v3224[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3226[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3228[1] }
        af      = { defs={0x080483e4} expr=v3293[1] }
        ?5      = { defs={} expr=v3230[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3233[1] }
        if      = { defs={} expr=v3234[1] }
        df      = { defs={} expr=v3235[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3237[1] }
        iopl1   = { defs={} expr=v3238[1] }
        nt      = { defs={} expr=v3239[1] }
        ?15     = { defs={} expr=v3240[1] }
        rf      = { defs={} expr=v3241[1] }
        vm      = { defs={} expr=v3242[1] }
        ac      = { defs={} expr=v3243[1] }
        vif     = { defs={} expr=v3244[1] }
        vip     = { defs={} expr=v3245[1] }
        id      = { defs={} expr=v3246[1] }
        ?22     = { defs={} expr=v3247[1] }
        ?23     = { defs={} expr=v3248[1] }
        ?24     = { defs={} expr=v3249[1] }
        ?25     = { defs={} expr=v3250[1] }
        ?26     = { defs={} expr=v3251[1] }
        ?27     = { defs={} expr=v3252[1] }
        ?28     = { defs={} expr=v3253[1] }
        ?29     = { defs={} expr=v3254[1] }
        ?30     = { defs={} expr=v3255[1] }
        ?31     = { defs={} expr=v3256[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400} expr=0x08048402[32] }
    memory:
    init mem:
0x8048402:pop    ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3212[32] }
        dx      = { defs={} expr=v3213[32] }
        bx      = { defs={} expr=v3214[32] }
        sp      = { defs={0x08048400,0x08048402} expr=(add[32] v3216[32] 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3319[8]))) }
        si      = { defs={} expr=v3217[32] }
        di      = { defs={} expr=v3218[32] }
        es      = { defs={} expr=v3219[16] }
        cs      = { defs={} expr=v3220[16] }
        ss      = { defs={} expr=v3221[16] }
        ds      = { defs={} expr=v3222[16] }
        fs      = { defs={} expr=v3223[16] }
        gs      = { defs={} expr=v3224[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3226[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3228[1] }
        af      = { defs={0x080483e4} expr=v3293[1] }
        ?5      = { defs={} expr=v3230[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3233[1] }
        if      = { defs={} expr=v3234[1] }
        df      = { defs={} expr=v3235[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3237[1] }
        iopl1   = { defs={} expr=v3238[1] }
        nt      = { defs={} expr=v3239[1] }
        ?15     = { defs={} expr=v3240[1] }
        rf      = { defs={} expr=v3241[1] }
        vm      = { defs={} expr=v3242[1] }
        ac      = { defs={} expr=v3243[1] }
        vif     = { defs={} expr=v3244[1] }
        vip     = { defs={} expr=v3245[1] }
        id      = { defs={} expr=v3246[1] }
        ?22     = { defs={} expr=v3247[1] }
        ?23     = { defs={} expr=v3248[1] }
        ?24     = { defs={} expr=v3249[1] }
        ?25     = { defs={} expr=v3250[1] }
        ?26     = { defs={} expr=v3251[1] }
        ?27     = { defs={} expr=v3252[1] }
        ?28     = { defs={} expr=v3253[1] }
        ?29     = { defs={} expr=v3254[1] }
        ?30     = { defs={} expr=v3255[1] }
        ?31     = { defs={} expr=v3256[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400,0x08048402} expr=0x08048403[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3216[32] 3[32]) }
          value = { defs={} expr=v3319[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3216[32] 2[32]) }
          value = { defs={} expr=v3318[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3216[32] 1[32]) }
          value = { defs={} expr=v3317[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402} expr=v3216[32] }
          value = { defs={} expr=v3316[8] }
          flags = { rdonly }
0x8048403:ret    
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3212[32] }
        dx      = { defs={} expr=v3213[32] }
        bx      = { defs={} expr=v3214[32] }
        sp      = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] (add[32] v3216[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3319[8]))) }
        si      = { defs={} expr=v3217[32] }
        di      = { defs={} expr=v3218[32] }
        es      = { defs={} expr=v3219[16] }
        cs      = { defs={} expr=v3220[16] }
        ss      = { defs={} expr=v3221[16] }
        ds      = { defs={} expr=v3222[16] }
        fs      = { defs={} expr=v3223[16] }
        gs      = { defs={} expr=v3224[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3226[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3228[1] }
        af      = { defs={0x080483e4} expr=v3293[1] }
        ?5      = { defs={} expr=v3230[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3233[1] }
        if      = { defs={} expr=v3234[1] }
        df      = { defs={} expr=v3235[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3237[1] }
        iopl1   = { defs={} expr=v3238[1] }
        nt      = { defs={} expr=v3239[1] }
        ?15     = { defs={} expr=v3240[1] }
        rf      = { defs={} expr=v3241[1] }
        vm      = { defs={} expr=v3242[1] }
        ac      = { defs={} expr=v3243[1] }
        vif     = { defs={} expr=v3244[1] }
        vip     = { defs={} expr=v3245[1] }
        id      = { defs={} expr=v3246[1] }
        ?22     = { defs={} expr=v3247[1] }
        ?23     = { defs={} expr=v3248[1] }
        ?24     = { defs={} expr=v3249[1] }
        ?25     = { defs={} expr=v3250[1] }
        ?26     = { defs={} expr=v3251[1] }
        ?27     = { defs={} expr=v3252[1] }
        ?28     = { defs={} expr=v3253[1] }
        ?29     = { defs={} expr=v3254[1] }
        ?30     = { defs={} expr=v3255[1] }
        ?31     = { defs={} expr=v3256[1] }
        ip      = { defs={0x08048403} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3333[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3334[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3335[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3336[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3216[32] 4[32]) 3[32]) }
          value = { defs={} expr=v3336[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3216[32] 4[32]) 2[32]) }
          value = { defs={} expr=v3335[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3216[32] 4[32]) 1[32]) }
          value = { defs={} expr=v3334[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] v3216[32] 4[32]) }
          value = { defs={} expr=v3333[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3216[32] 3[32]) }
          value = { defs={} expr=v3319[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3216[32] 2[32]) }
          value = { defs={} expr=v3318[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3216[32] 1[32]) }
          value = { defs={} expr=v3317[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402} expr=v3216[32] }
          value = { defs={} expr=v3316[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>
    registers:
        ax      = { defs={} expr=v3391[32] }
        cx      = { defs={} expr=v3392[32] }
        dx      = { defs={} expr=v3393[32] }
        bx      = { defs={} expr=v3394[32] }
        sp      = { defs={} expr=v3395[32] }
        bp      = { defs={} expr=v3396[32] }
        si      = { defs={} expr=v3397[32] }
        di      = { defs={} expr=v3398[32] }
        es      = { defs={} expr=v3399[16] }
        cs      = { defs={} expr=v3400[16] }
        ss      = { defs={} expr=v3401[16] }
        ds      = { defs={} expr=v3402[16] }
        fs      = { defs={} expr=v3403[16] }
        gs      = { defs={} expr=v3404[16] }
        cf      = { defs={} expr=v3405[1] }
        ?1      = { defs={} expr=v3406[1] }
        pf      = { defs={} expr=v3407[1] }
        ?3      = { defs={} expr=v3408[1] }
        af      = { defs={} expr=v3409[1] }
        ?5      = { defs={} expr=v3410[1] }
        zf      = { defs={} expr=v3411[1] }
        sf      = { defs={} expr=v3412[1] }
        tf      = { defs={} expr=v3413[1] }
        if      = { defs={} expr=v3414[1] }
        df      = { defs={} expr=v3415[1] }
        of      = { defs={} expr=v3416[1] }
        iopl0   = { defs={} expr=v3417[1] }
        iopl1   = { defs={} expr=v3418[1] }
        nt      = { defs={} expr=v3419[1] }
        ?15     = { defs={} expr=v3420[1] }
        rf      = { defs={} expr=v3421[1] }
        vm      = { defs={} expr=v3422[1] }
        ac      = { defs={} expr=v3423[1] }
        vif     = { defs={} expr=v3424[1] }
        vip     = { defs={} expr=v3425[1] }
        id      = { defs={} expr=v3426[1] }
        ?22     = { defs={} expr=v3427[1] }
        ?23     = { defs={} expr=v3428[1] }
        ?24     = { defs={} expr=v3429[1] }
        ?25     = { defs={} expr=v3430[1] }
        ?26     = { defs={} expr=v3431[1] }
        ?27     = { defs={} expr=v3432[1] }
        ?28     = { defs={} expr=v3433[1] }
        ?29     = { defs={} expr=v3434[1] }
        ?30     = { defs={} expr=v3435[1] }
        ?31     = { defs={} expr=v3436[1] }
        ip      = { defs={0x080483e8} expr=0x080483ef[32] }
    memory:
        address = { defs={} expr=(add[32] v3395[32] 3[32]) }
          value = { defs={0x080483e8} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3395[32] 2[32]) }
          value = { defs={0x080483e8} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3395[32] 1[32]) }
          value = { defs={0x080483e8} expr=-107[8] }
          flags = { }
        address = { defs={0x080483e8} expr=v3395[32] }
          value = { defs={0x080483e8} expr=-8[8] }
          flags = { }
    init mem:
0x80483ef:call   0x00000000
    registers:
        ax      = { defs={} expr=v3391[32] }
        cx      = { defs={} expr=v3392[32] }
        dx      = { defs={} expr=v3393[32] }
        bx      = { defs={} expr=v3394[32] }
        sp      = { defs={0x080483ef} expr=(add[32] v3395[32] -4[32]) }
        bp      = { defs={} expr=v3396[32] }
        si      = { defs={} expr=v3397[32] }
        di      = { defs={} expr=v3398[32] }
        es      = { defs={} expr=v3399[16] }
        cs      = { defs={} expr=v3400[16] }
        ss      = { defs={} expr=v3401[16] }
        ds      = { defs={} expr=v3402[16] }
        fs      = { defs={} expr=v3403[16] }
        gs      = { defs={} expr=v3404[16] }
        cf      = { defs={} expr=v3405[1] }
        ?1      = { defs={} expr=v3406[1] }
        pf      = { defs={} expr=v3407[1] }
        ?3      = { defs={} expr=v3408[1] }
        af      = { defs={} expr=v3409[1] }
        ?5      = { defs={} expr=v3410[1] }
        zf      = { defs={} expr=v3411[1] }
        sf      = { defs={} expr=v3412[1] }
        tf      = { defs={} expr=v3413[1] }
        if      = { defs={} expr=v3414[1] }
        df      = { defs={} expr=v3415[1] }
        of      = { defs={} expr=v3416[1] }
        iopl0   = { defs={} expr=v3417[1] }
        iopl1   = { defs={} expr=v3418[1] }
        nt      = { defs={} expr=v3419[1] }
        ?15     = { defs={} expr=v3420[1] }
        rf      = { defs={} expr=v3421[1] }
        vm      = { defs={} expr=v3422[1] }
        ac      = { defs={} expr=v3423[1] }
        vif     = { defs={} expr=v3424[1] }
        vip     = { defs={} expr=v3425[1] }
        id      = { defs={} expr=v3426[1] }
        ?22     = { defs={} expr=v3427[1] }
        ?23     = { defs={} expr=v3428[1] }
        ?24     = { defs={} expr=v3429[1] }
        ?25     = { defs={} expr=v3430[1] }
        ?26     = { defs={} expr=v3431[1] }
        ?27     = { defs={} expr=v3432[1] }
        ?28     = { defs={} expr=v3433[1] }
        ?29     = { defs={} expr=v3434[1] }
        ?30     = { defs={} expr=v3435[1] }
        ?31     = { defs={} expr=v3436[1] }
        ip      = { defs={0x080483ef} expr=0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3395[32] -4[32]) 3[32]) }
          value = { defs={0x080483e8,0x080483ef} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3395[32] -4[32]) 2[32]) }
          value = { defs={0x080483e8,0x080483ef} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3395[32] -4[32]) 1[32]) }
          value = { defs={0x080483e8,0x080483ef} expr=-125[8] }
          flags = { }
        address = { defs={0x080483ef} expr=(add[32] v3395[32] -4[32]) }
          value = { defs={0x080483e8,0x080483ef} expr=-12[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3395[32] 3[32]) }
          value = { defs={0x080483e8} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3395[32] 2[32]) }
          value = { defs={0x080483e8} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3395[32] 1[32]) }
          value = { defs={0x080483e8} expr=-107[8] }
          flags = { }
        address = { defs={0x080483e8} expr=v3395[32] }
          value = { defs={0x080483e8} expr=-8[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483f4:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3506[32] }
        cx      = { defs={} expr=v3507[32] }
        dx      = { defs={} expr=v3508[32] }
        bx      = { defs={} expr=v3509[32] }
        sp      = { defs={} expr=v3510[32] }
        bp      = { defs={} expr=v3511[32] }
        si      = { defs={0x080483f4} expr=v3512[32] }
        di      = { defs={} expr=v3513[32] }
        es      = { defs={} expr=v3514[16] }
        cs      = { defs={} expr=v3515[16] }
        ss      = { defs={} expr=v3516[16] }
        ds      = { defs={} expr=v3517[16] }
        fs      = { defs={} expr=v3518[16] }
        gs      = { defs={} expr=v3519[16] }
        cf      = { defs={} expr=v3520[1] }
        ?1      = { defs={} expr=v3521[1] }
        pf      = { defs={} expr=v3522[1] }
        ?3      = { defs={} expr=v3523[1] }
        af      = { defs={} expr=v3524[1] }
        ?5      = { defs={} expr=v3525[1] }
        zf      = { defs={} expr=v3526[1] }
        sf      = { defs={} expr=v3527[1] }
        tf      = { defs={} expr=v3528[1] }
        if      = { defs={} expr=v3529[1] }
        df      = { defs={} expr=v3530[1] }
        of      = { defs={} expr=v3531[1] }
        iopl0   = { defs={} expr=v3532[1] }
        iopl1   = { defs={} expr=v3533[1] }
        nt      = { defs={} expr=v3534[1] }
        ?15     = { defs={} expr=v3535[1] }
        rf      = { defs={} expr=v3536[1] }
        vm      = { defs={} expr=v3537[1] }
        ac      = { defs={} expr=v3538[1] }
        vif     = { defs={} expr=v3539[1] }
        vip     = { defs={} expr=v3540[1] }
        id      = { defs={} expr=v3541[1] }
        ?22     = { defs={} expr=v3542[1] }
        ?23     = { defs={} expr=v3543[1] }
        ?24     = { defs={} expr=v3544[1] }
        ?25     = { defs={} expr=v3545[1] }
        ?26     = { defs={} expr=v3546[1] }
        ?27     = { defs={} expr=v3547[1] }
        ?28     = { defs={} expr=v3548[1] }
        ?29     = { defs={} expr=v3549[1] }
        ?30     = { defs={} expr=v3550[1] }
        ?31     = { defs={} expr=v3551[1] }
        ip      = { defs={0x080483f4} expr=0x080483fa[32] }
    memory:
    init mem:
0x80483fa:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3506[32] }
        cx      = { defs={} expr=v3507[32] }
        dx      = { defs={} expr=v3508[32] }
        bx      = { defs={} expr=v3509[32] }
        sp      = { defs={} expr=v3510[32] }
        bp      = { defs={} expr=v3511[32] }
        si      = { defs={0x080483f4} expr=v3512[32] }
        di      = { defs={0x080483fa} expr=v3513[32] }
        es      = { defs={} expr=v3514[16] }
        cs      = { defs={} expr=v3515[16] }
        ss      = { defs={} expr=v3516[16] }
        ds      = { defs={} expr=v3517[16] }
        fs      = { defs={} expr=v3518[16] }
        gs      = { defs={} expr=v3519[16] }
        cf      = { defs={} expr=v3520[1] }
        ?1      = { defs={} expr=v3521[1] }
        pf      = { defs={} expr=v3522[1] }
        ?3      = { defs={} expr=v3523[1] }
        af      = { defs={} expr=v3524[1] }
        ?5      = { defs={} expr=v3525[1] }
        zf      = { defs={} expr=v3526[1] }
        sf      = { defs={} expr=v3527[1] }
        tf      = { defs={} expr=v3528[1] }
        if      = { defs={} expr=v3529[1] }
        df      = { defs={} expr=v3530[1] }
        of      = { defs={} expr=v3531[1] }
        iopl0   = { defs={} expr=v3532[1] }
        iopl1   = { defs={} expr=v3533[1] }
        nt      = { defs={} expr=v3534[1] }
        ?15     = { defs={} expr=v3535[1] }
        rf      = { defs={} expr=v3536[1] }
        vm      = { defs={} expr=v3537[1] }
        ac      = { defs={} expr=v3538[1] }
        vif     = { defs={} expr=v3539[1] }
        vip     = { defs={} expr=v3540[1] }
        id      = { defs={} expr=v3541[1] }
        ?22     = { defs={} expr=v3542[1] }
        ?23     = { defs={} expr=v3543[1] }
        ?24     = { defs={} expr=v3544[1] }
        ?25     = { defs={} expr=v3545[1] }
        ?26     = { defs={} expr=v3546[1] }
        ?27     = { defs={} expr=v3547[1] }
        ?28     = { defs={} expr=v3548[1] }
        ?29     = { defs={} expr=v3549[1] }
        ?30     = { defs={} expr=v3550[1] }
        ?31     = { defs={} expr=v3551[1] }
        ip      = { defs={0x080483f4,0x080483fa} expr=0x08048400[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048410:push   ebp
    registers:
        ax      = { defs={} expr=v3613[32] }
        cx      = { defs={} expr=v3614[32] }
        dx      = { defs={} expr=v3615[32] }
        bx      = { defs={} expr=v3616[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3617[32] -4[32]) }
        bp      = { defs={} expr=v3618[32] }
        si      = { defs={} expr=v3619[32] }
        di      = { defs={} expr=v3620[32] }
        es      = { defs={} expr=v3621[16] }
        cs      = { defs={} expr=v3622[16] }
        ss      = { defs={} expr=v3623[16] }
        ds      = { defs={} expr=v3624[16] }
        fs      = { defs={} expr=v3625[16] }
        gs      = { defs={} expr=v3626[16] }
        cf      = { defs={} expr=v3627[1] }
        ?1      = { defs={} expr=v3628[1] }
        pf      = { defs={} expr=v3629[1] }
        ?3      = { defs={} expr=v3630[1] }
        af      = { defs={} expr=v3631[1] }
        ?5      = { defs={} expr=v3632[1] }
        zf      = { defs={} expr=v3633[1] }
        sf      = { defs={} expr=v3634[1] }
        tf      = { defs={} expr=v3635[1] }
        if      = { defs={} expr=v3636[1] }
        df      = { defs={} expr=v3637[1] }
        of      = { defs={} expr=v3638[1] }
        iopl0   = { defs={} expr=v3639[1] }
        iopl1   = { defs={} expr=v3640[1] }
        nt      = { defs={} expr=v3641[1] }
        ?15     = { defs={} expr=v3642[1] }
        rf      = { defs={} expr=v3643[1] }
        vm      = { defs={} expr=v3644[1] }
        ac      = { defs={} expr=v3645[1] }
        vif     = { defs={} expr=v3646[1] }
        vip     = { defs={} expr=v3647[1] }
        id      = { defs={} expr=v3648[1] }
        ?22     = { defs={} expr=v3649[1] }
        ?23     = { defs={} expr=v3650[1] }
        ?24     = { defs={} expr=v3651[1] }
        ?25     = { defs={} expr=v3652[1] }
        ?26     = { defs={} expr=v3653[1] }
        ?27     = { defs={} expr=v3654[1] }
        ?28     = { defs={} expr=v3655[1] }
        ?29     = { defs={} expr=v3656[1] }
        ?30     = { defs={} expr=v3657[1] }
        ?31     = { defs={} expr=v3658[1] }
        ip      = { defs={0x08048410} expr=0x08048411[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3618[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3617[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3618[32]) }
          flags = { }
    init mem:
0x8048411:mov    edx, 0x08048480<handler>
    registers:
        ax      = { defs={} expr=v3613[32] }
        cx      = { defs={} expr=v3614[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3616[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3617[32] -4[32]) }
        bp      = { defs={} expr=v3618[32] }
        si      = { defs={} expr=v3619[32] }
        di      = { defs={} expr=v3620[32] }
        es      = { defs={} expr=v3621[16] }
        cs      = { defs={} expr=v3622[16] }
        ss      = { defs={} expr=v3623[16] }
        ds      = { defs={} expr=v3624[16] }
        fs      = { defs={} expr=v3625[16] }
        gs      = { defs={} expr=v3626[16] }
        cf      = { defs={} expr=v3627[1] }
        ?1      = { defs={} expr=v3628[1] }
        pf      = { defs={} expr=v3629[1] }
        ?3      = { defs={} expr=v3630[1] }
        af      = { defs={} expr=v3631[1] }
        ?5      = { defs={} expr=v3632[1] }
        zf      = { defs={} expr=v3633[1] }
        sf      = { defs={} expr=v3634[1] }
        tf      = { defs={} expr=v3635[1] }
        if      = { defs={} expr=v3636[1] }
        df      = { defs={} expr=v3637[1] }
        of      = { defs={} expr=v3638[1] }
        iopl0   = { defs={} expr=v3639[1] }
        iopl1   = { defs={} expr=v3640[1] }
        nt      = { defs={} expr=v3641[1] }
        ?15     = { defs={} expr=v3642[1] }
        rf      = { defs={} expr=v3643[1] }
        vm      = { defs={} expr=v3644[1] }
        ac      = { defs={} expr=v3645[1] }
        vif     = { defs={} expr=v3646[1] }
        vip     = { defs={} expr=v3647[1] }
        id      = { defs={} expr=v3648[1] }
        ?22     = { defs={} expr=v3649[1] }
        ?23     = { defs={} expr=v3650[1] }
        ?24     = { defs={} expr=v3651[1] }
        ?25     = { defs={} expr=v3652[1] }
        ?26     = { defs={} expr=v3653[1] }
        ?27     = { defs={} expr=v3654[1] }
        ?28     = { defs={} expr=v3655[1] }
        ?29     = { defs={} expr=v3656[1] }
        ?30     = { defs={} expr=v3657[1] }
        ?31     = { defs={} expr=v3658[1] }
        ip      = { defs={0x08048410,0x08048411} expr=0x08048416[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3618[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3617[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3618[32]) }
          flags = { }
    init mem:
0x8048416:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3613[32] }
        cx      = { defs={} expr=v3614[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3616[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3617[32] -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3617[32] -4[32]) }
        si      = { defs={} expr=v3619[32] }
        di      = { defs={} expr=v3620[32] }
        es      = { defs={} expr=v3621[16] }
        cs      = { defs={} expr=v3622[16] }
        ss      = { defs={} expr=v3623[16] }
        ds      = { defs={} expr=v3624[16] }
        fs      = { defs={} expr=v3625[16] }
        gs      = { defs={} expr=v3626[16] }
        cf      = { defs={} expr=v3627[1] }
        ?1      = { defs={} expr=v3628[1] }
        pf      = { defs={} expr=v3629[1] }
        ?3      = { defs={} expr=v3630[1] }
        af      = { defs={} expr=v3631[1] }
        ?5      = { defs={} expr=v3632[1] }
        zf      = { defs={} expr=v3633[1] }
        sf      = { defs={} expr=v3634[1] }
        tf      = { defs={} expr=v3635[1] }
        if      = { defs={} expr=v3636[1] }
        df      = { defs={} expr=v3637[1] }
        of      = { defs={} expr=v3638[1] }
        iopl0   = { defs={} expr=v3639[1] }
        iopl1   = { defs={} expr=v3640[1] }
        nt      = { defs={} expr=v3641[1] }
        ?15     = { defs={} expr=v3642[1] }
        rf      = { defs={} expr=v3643[1] }
        vm      = { defs={} expr=v3644[1] }
        ac      = { defs={} expr=v3645[1] }
        vif     = { defs={} expr=v3646[1] }
        vip     = { defs={} expr=v3647[1] }
        id      = { defs={} expr=v3648[1] }
        ?22     = { defs={} expr=v3649[1] }
        ?23     = { defs={} expr=v3650[1] }
        ?24     = { defs={} expr=v3651[1] }
        ?25     = { defs={} expr=v3652[1] }
        ?26     = { defs={} expr=v3653[1] }
        ?27     = { defs={} expr=v3654[1] }
        ?28     = { defs={} expr=v3655[1] }
        ?29     = { defs={} expr=v3656[1] }
        ?30     = { defs={} expr=v3657[1] }
        ?31     = { defs={} expr=v3658[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416} expr=0x08048418[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3618[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3617[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3618[32]) }
          flags = { }
    init mem:
0x8048418:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v3613[32] }
        cx      = { defs={} expr=v3614[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3616[32] }
        sp      = { defs={0x08048410,0x08048418} expr=(add[32] (add[32] v3617[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3617[32] -4[32]) }
        si      = { defs={} expr=v3619[32] }
        di      = { defs={} expr=v3620[32] }
        es      = { defs={} expr=v3621[16] }
        cs      = { defs={} expr=v3622[16] }
        ss      = { defs={} expr=v3623[16] }
        ds      = { defs={} expr=v3624[16] }
        fs      = { defs={} expr=v3625[16] }
        gs      = { defs={} expr=v3626[16] }
        cf      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3617[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3617[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3628[1] }
        pf      = { defs={0x08048410,0x08048418} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3617[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3617[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3630[1] }
        af      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3617[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3617[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3632[1] }
        zf      = { defs={0x08048410,0x08048418} expr=(zerop[1] (add[32] (add[32] v3617[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048410,0x08048418} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3617[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3635[1] }
        if      = { defs={} expr=v3636[1] }
        df      = { defs={} expr=v3637[1] }
        of      = { defs={0x08048410,0x08048418} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3617[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3617[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3617[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3617[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3639[1] }
        iopl1   = { defs={} expr=v3640[1] }
        nt      = { defs={} expr=v3641[1] }
        ?15     = { defs={} expr=v3642[1] }
        rf      = { defs={} expr=v3643[1] }
        vm      = { defs={} expr=v3644[1] }
        ac      = { defs={} expr=v3645[1] }
        vif     = { defs={} expr=v3646[1] }
        vip     = { defs={} expr=v3647[1] }
        id      = { defs={} expr=v3648[1] }
        ?22     = { defs={} expr=v3649[1] }
        ?23     = { defs={} expr=v3650[1] }
        ?24     = { defs={} expr=v3651[1] }
        ?25     = { defs={} expr=v3652[1] }
        ?26     = { defs={} expr=v3653[1] }
        ?27     = { defs={} expr=v3654[1] }
        ?28     = { defs={} expr=v3655[1] }
        ?29     = { defs={} expr=v3656[1] }
        ?30     = { defs={} expr=v3657[1] }
        ?31     = { defs={} expr=v3658[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418} expr=0x0804841b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3618[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3617[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3618[32]) }
          flags = { }
    init mem:
0x804841b:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v3613[32] }
        cx      = { defs={} expr=v3614[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3616[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3617[32] -4[32]) }
        si      = { defs={} expr=v3619[32] }
        di      = { defs={} expr=v3620[32] }
        es      = { defs={} expr=v3621[16] }
        cs      = { defs={} expr=v3622[16] }
        ss      = { defs={} expr=v3623[16] }
        ds      = { defs={} expr=v3624[16] }
        fs      = { defs={} expr=v3625[16] }
        gs      = { defs={} expr=v3626[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3628[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3630[1] }
        af      = { defs={0x0804841b} expr=v3763[1] }
        ?5      = { defs={} expr=v3632[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3635[1] }
        if      = { defs={} expr=v3636[1] }
        df      = { defs={} expr=v3637[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3639[1] }
        iopl1   = { defs={} expr=v3640[1] }
        nt      = { defs={} expr=v3641[1] }
        ?15     = { defs={} expr=v3642[1] }
        rf      = { defs={} expr=v3643[1] }
        vm      = { defs={} expr=v3644[1] }
        ac      = { defs={} expr=v3645[1] }
        vif     = { defs={} expr=v3646[1] }
        vip     = { defs={} expr=v3647[1] }
        id      = { defs={} expr=v3648[1] }
        ?22     = { defs={} expr=v3649[1] }
        ?23     = { defs={} expr=v3650[1] }
        ?24     = { defs={} expr=v3651[1] }
        ?25     = { defs={} expr=v3652[1] }
        ?26     = { defs={} expr=v3653[1] }
        ?27     = { defs={} expr=v3654[1] }
        ?28     = { defs={} expr=v3655[1] }
        ?29     = { defs={} expr=v3656[1] }
        ?30     = { defs={} expr=v3657[1] }
        ?31     = { defs={} expr=v3658[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b} expr=0x0804841e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3618[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3617[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3618[32]) }
          flags = { }
    init mem:
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
    registers:
        ax      = { defs={} expr=v3613[32] }
        cx      = { defs={} expr=v3614[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3616[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3617[32] -4[32]) }
        si      = { defs={} expr=v3619[32] }
        di      = { defs={} expr=v3620[32] }
        es      = { defs={} expr=v3621[16] }
        cs      = { defs={} expr=v3622[16] }
        ss      = { defs={} expr=v3623[16] }
        ds      = { defs={} expr=v3624[16] }
        fs      = { defs={} expr=v3625[16] }
        gs      = { defs={} expr=v3626[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3628[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3630[1] }
        af      = { defs={0x0804841b} expr=v3763[1] }
        ?5      = { defs={} expr=v3632[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3635[1] }
        if      = { defs={} expr=v3636[1] }
        df      = { defs={} expr=v3637[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3639[1] }
        iopl1   = { defs={} expr=v3640[1] }
        nt      = { defs={} expr=v3641[1] }
        ?15     = { defs={} expr=v3642[1] }
        rf      = { defs={} expr=v3643[1] }
        vm      = { defs={} expr=v3644[1] }
        ac      = { defs={} expr=v3645[1] }
        vif     = { defs={} expr=v3646[1] }
        vip     = { defs={} expr=v3647[1] }
        id      = { defs={} expr=v3648[1] }
        ?22     = { defs={} expr=v3649[1] }
        ?23     = { defs={} expr=v3650[1] }
        ?24     = { defs={} expr=v3651[1] }
        ?25     = { defs={} expr=v3652[1] }
        ?26     = { defs={} expr=v3653[1] }
        ?27     = { defs={} expr=v3654[1] }
        ?28     = { defs={} expr=v3655[1] }
        ?29     = { defs={} expr=v3656[1] }
        ?30     = { defs={} expr=v3657[1] }
        ?31     = { defs={} expr=v3658[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e} expr=0x08048422[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={0x08048411,0x0804841e} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={0x08048411,0x0804841e} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3618[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3617[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3618[32]) }
          flags = { }
    init mem:
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
    registers:
        ax      = { defs={} expr=v3613[32] }
        cx      = { defs={} expr=v3614[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3616[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3617[32] -4[32]) }
        si      = { defs={} expr=v3619[32] }
        di      = { defs={} expr=v3620[32] }
        es      = { defs={} expr=v3621[16] }
        cs      = { defs={} expr=v3622[16] }
        ss      = { defs={} expr=v3623[16] }
        ds      = { defs={} expr=v3624[16] }
        fs      = { defs={} expr=v3625[16] }
        gs      = { defs={} expr=v3626[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3628[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3630[1] }
        af      = { defs={0x0804841b} expr=v3763[1] }
        ?5      = { defs={} expr=v3632[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3635[1] }
        if      = { defs={} expr=v3636[1] }
        df      = { defs={} expr=v3637[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3639[1] }
        iopl1   = { defs={} expr=v3640[1] }
        nt      = { defs={} expr=v3641[1] }
        ?15     = { defs={} expr=v3642[1] }
        rf      = { defs={} expr=v3643[1] }
        vm      = { defs={} expr=v3644[1] }
        ac      = { defs={} expr=v3645[1] }
        vif     = { defs={} expr=v3646[1] }
        vip     = { defs={} expr=v3647[1] }
        id      = { defs={} expr=v3648[1] }
        ?22     = { defs={} expr=v3649[1] }
        ?23     = { defs={} expr=v3650[1] }
        ?24     = { defs={} expr=v3651[1] }
        ?25     = { defs={} expr=v3652[1] }
        ?26     = { defs={} expr=v3653[1] }
        ?27     = { defs={} expr=v3654[1] }
        ?28     = { defs={} expr=v3655[1] }
        ?29     = { defs={} expr=v3656[1] }
        ?30     = { defs={} expr=v3657[1] }
        ?31     = { defs={} expr=v3658[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422} expr=0x08048429[32] }
    memory:
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048422} expr=(bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={0x08048422} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={0x08048411,0x0804841e} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={0x08048411,0x0804841e} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3618[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3617[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3618[32]) }
          flags = { }
    init mem:
0x8048429:call   0x080482f0<signal@plt>
    registers:
        ax      = { defs={} expr=v3613[32] }
        cx      = { defs={} expr=v3614[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3616[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3617[32] -4[32]) }
        si      = { defs={} expr=v3619[32] }
        di      = { defs={} expr=v3620[32] }
        es      = { defs={} expr=v3621[16] }
        cs      = { defs={} expr=v3622[16] }
        ss      = { defs={} expr=v3623[16] }
        ds      = { defs={} expr=v3624[16] }
        fs      = { defs={} expr=v3625[16] }
        gs      = { defs={} expr=v3626[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3628[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3630[1] }
        af      = { defs={0x0804841b} expr=v3763[1] }
        ?5      = { defs={} expr=v3632[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3635[1] }
        if      = { defs={} expr=v3636[1] }
        df      = { defs={} expr=v3637[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3639[1] }
        iopl1   = { defs={} expr=v3640[1] }
        nt      = { defs={} expr=v3641[1] }
        ?15     = { defs={} expr=v3642[1] }
        rf      = { defs={} expr=v3643[1] }
        vm      = { defs={} expr=v3644[1] }
        ac      = { defs={} expr=v3645[1] }
        vif     = { defs={} expr=v3646[1] }
        vip     = { defs={} expr=v3647[1] }
        id      = { defs={} expr=v3648[1] }
        ?22     = { defs={} expr=v3649[1] }
        ?23     = { defs={} expr=v3650[1] }
        ?24     = { defs={} expr=v3651[1] }
        ?25     = { defs={} expr=v3652[1] }
        ?26     = { defs={} expr=v3653[1] }
        ?27     = { defs={} expr=v3654[1] }
        ?28     = { defs={} expr=v3655[1] }
        ?29     = { defs={} expr=v3656[1] }
        ?30     = { defs={} expr=v3657[1] }
        ?31     = { defs={} expr=v3658[1] }
        ip      = { defs={0x08048429} expr=0x080482f0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422,0x08048429} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422,0x08048429} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422,0x08048429} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) -4[32]) }
          value = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422,0x08048429} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={0x08048422} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048422} expr=(bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={0x08048422} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={0x08048411,0x0804841e} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={0x08048411,0x0804841e} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3617[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={0x08048411,0x0804841e} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 3[32]) }
          value = { defs={0x08048410} expr=(extract[8] 24[32] 32[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 2[32]) }
          value = { defs={0x08048410} expr=(extract[8] 16[32] 24[32] v3618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3617[32] -4[32]) 1[32]) }
          value = { defs={0x08048410} expr=(extract[8] 8[32] 16[32] v3618[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3617[32] -4[32]) }
          value = { defs={0x08048410} expr=(extract[8] 0[32] 8[32] v3618[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804842e:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v3844[32] }
        cx      = { defs={} expr=v3845[32] }
        dx      = { defs={} expr=v3846[32] }
        bx      = { defs={} expr=v3847[32] }
        sp      = { defs={0x0804842e} expr=v3849[32] }
        bp      = { defs={} expr=v3849[32] }
        si      = { defs={} expr=v3850[32] }
        di      = { defs={} expr=v3851[32] }
        es      = { defs={} expr=v3852[16] }
        cs      = { defs={} expr=v3853[16] }
        ss      = { defs={} expr=v3854[16] }
        ds      = { defs={} expr=v3855[16] }
        fs      = { defs={} expr=v3856[16] }
        gs      = { defs={} expr=v3857[16] }
        cf      = { defs={} expr=v3858[1] }
        ?1      = { defs={} expr=v3859[1] }
        pf      = { defs={} expr=v3860[1] }
        ?3      = { defs={} expr=v3861[1] }
        af      = { defs={} expr=v3862[1] }
        ?5      = { defs={} expr=v3863[1] }
        zf      = { defs={} expr=v3864[1] }
        sf      = { defs={} expr=v3865[1] }
        tf      = { defs={} expr=v3866[1] }
        if      = { defs={} expr=v3867[1] }
        df      = { defs={} expr=v3868[1] }
        of      = { defs={} expr=v3869[1] }
        iopl0   = { defs={} expr=v3870[1] }
        iopl1   = { defs={} expr=v3871[1] }
        nt      = { defs={} expr=v3872[1] }
        ?15     = { defs={} expr=v3873[1] }
        rf      = { defs={} expr=v3874[1] }
        vm      = { defs={} expr=v3875[1] }
        ac      = { defs={} expr=v3876[1] }
        vif     = { defs={} expr=v3877[1] }
        vip     = { defs={} expr=v3878[1] }
        id      = { defs={} expr=v3879[1] }
        ?22     = { defs={} expr=v3880[1] }
        ?23     = { defs={} expr=v3881[1] }
        ?24     = { defs={} expr=v3882[1] }
        ?25     = { defs={} expr=v3883[1] }
        ?26     = { defs={} expr=v3884[1] }
        ?27     = { defs={} expr=v3885[1] }
        ?28     = { defs={} expr=v3886[1] }
        ?29     = { defs={} expr=v3887[1] }
        ?30     = { defs={} expr=v3888[1] }
        ?31     = { defs={} expr=v3889[1] }
        ip      = { defs={0x0804842e} expr=0x08048430[32] }
    memory:
    init mem:
0x8048430:xor    eax, eax
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3845[32] }
        dx      = { defs={} expr=v3846[32] }
        bx      = { defs={} expr=v3847[32] }
        sp      = { defs={0x0804842e} expr=v3849[32] }
        bp      = { defs={} expr=v3849[32] }
        si      = { defs={} expr=v3850[32] }
        di      = { defs={} expr=v3851[32] }
        es      = { defs={} expr=v3852[16] }
        cs      = { defs={} expr=v3853[16] }
        ss      = { defs={} expr=v3854[16] }
        ds      = { defs={} expr=v3855[16] }
        fs      = { defs={} expr=v3856[16] }
        gs      = { defs={} expr=v3857[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3859[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3861[1] }
        af      = { defs={0x08048430} expr=v3928[1] }
        ?5      = { defs={} expr=v3863[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3866[1] }
        if      = { defs={} expr=v3867[1] }
        df      = { defs={} expr=v3868[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3870[1] }
        iopl1   = { defs={} expr=v3871[1] }
        nt      = { defs={} expr=v3872[1] }
        ?15     = { defs={} expr=v3873[1] }
        rf      = { defs={} expr=v3874[1] }
        vm      = { defs={} expr=v3875[1] }
        ac      = { defs={} expr=v3876[1] }
        vif     = { defs={} expr=v3877[1] }
        vip     = { defs={} expr=v3878[1] }
        id      = { defs={} expr=v3879[1] }
        ?22     = { defs={} expr=v3880[1] }
        ?23     = { defs={} expr=v3881[1] }
        ?24     = { defs={} expr=v3882[1] }
        ?25     = { defs={} expr=v3883[1] }
        ?26     = { defs={} expr=v3884[1] }
        ?27     = { defs={} expr=v3885[1] }
        ?28     = { defs={} expr=v3886[1] }
        ?29     = { defs={} expr=v3887[1] }
        ?30     = { defs={} expr=v3888[1] }
        ?31     = { defs={} expr=v3889[1] }
        ip      = { defs={0x0804842e,0x08048430} expr=0x08048432[32] }
    memory:
    init mem:
0x8048432:pop    ebp
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3845[32] }
        dx      = { defs={} expr=v3846[32] }
        bx      = { defs={} expr=v3847[32] }
        sp      = { defs={0x0804842e,0x08048432} expr=(add[32] v3849[32] 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3939[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3940[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3941[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3942[8]))) }
        si      = { defs={} expr=v3850[32] }
        di      = { defs={} expr=v3851[32] }
        es      = { defs={} expr=v3852[16] }
        cs      = { defs={} expr=v3853[16] }
        ss      = { defs={} expr=v3854[16] }
        ds      = { defs={} expr=v3855[16] }
        fs      = { defs={} expr=v3856[16] }
        gs      = { defs={} expr=v3857[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3859[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3861[1] }
        af      = { defs={0x08048430} expr=v3928[1] }
        ?5      = { defs={} expr=v3863[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3866[1] }
        if      = { defs={} expr=v3867[1] }
        df      = { defs={} expr=v3868[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3870[1] }
        iopl1   = { defs={} expr=v3871[1] }
        nt      = { defs={} expr=v3872[1] }
        ?15     = { defs={} expr=v3873[1] }
        rf      = { defs={} expr=v3874[1] }
        vm      = { defs={} expr=v3875[1] }
        ac      = { defs={} expr=v3876[1] }
        vif     = { defs={} expr=v3877[1] }
        vip     = { defs={} expr=v3878[1] }
        id      = { defs={} expr=v3879[1] }
        ?22     = { defs={} expr=v3880[1] }
        ?23     = { defs={} expr=v3881[1] }
        ?24     = { defs={} expr=v3882[1] }
        ?25     = { defs={} expr=v3883[1] }
        ?26     = { defs={} expr=v3884[1] }
        ?27     = { defs={} expr=v3885[1] }
        ?28     = { defs={} expr=v3886[1] }
        ?29     = { defs={} expr=v3887[1] }
        ?30     = { defs={} expr=v3888[1] }
        ?31     = { defs={} expr=v3889[1] }
        ip      = { defs={0x0804842e,0x08048430,0x08048432} expr=0x08048433[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3849[32] 3[32]) }
          value = { defs={} expr=v3942[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3849[32] 2[32]) }
          value = { defs={} expr=v3941[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3849[32] 1[32]) }
          value = { defs={} expr=v3940[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432} expr=v3849[32] }
          value = { defs={} expr=v3939[8] }
          flags = { rdonly }
0x8048433:ret    
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3845[32] }
        dx      = { defs={} expr=v3846[32] }
        bx      = { defs={} expr=v3847[32] }
        sp      = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] (add[32] v3849[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3939[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3940[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3941[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3942[8]))) }
        si      = { defs={} expr=v3850[32] }
        di      = { defs={} expr=v3851[32] }
        es      = { defs={} expr=v3852[16] }
        cs      = { defs={} expr=v3853[16] }
        ss      = { defs={} expr=v3854[16] }
        ds      = { defs={} expr=v3855[16] }
        fs      = { defs={} expr=v3856[16] }
        gs      = { defs={} expr=v3857[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3859[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3861[1] }
        af      = { defs={0x08048430} expr=v3928[1] }
        ?5      = { defs={} expr=v3863[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3866[1] }
        if      = { defs={} expr=v3867[1] }
        df      = { defs={} expr=v3868[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3870[1] }
        iopl1   = { defs={} expr=v3871[1] }
        nt      = { defs={} expr=v3872[1] }
        ?15     = { defs={} expr=v3873[1] }
        rf      = { defs={} expr=v3874[1] }
        vm      = { defs={} expr=v3875[1] }
        ac      = { defs={} expr=v3876[1] }
        vif     = { defs={} expr=v3877[1] }
        vip     = { defs={} expr=v3878[1] }
        id      = { defs={} expr=v3879[1] }
        ?22     = { defs={} expr=v3880[1] }
        ?23     = { defs={} expr=v3881[1] }
        ?24     = { defs={} expr=v3882[1] }
        ?25     = { defs={} expr=v3883[1] }
        ?26     = { defs={} expr=v3884[1] }
        ?27     = { defs={} expr=v3885[1] }
        ?28     = { defs={} expr=v3886[1] }
        ?29     = { defs={} expr=v3887[1] }
        ?30     = { defs={} expr=v3888[1] }
        ?31     = { defs={} expr=v3889[1] }
        ip      = { defs={0x08048433} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3959[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3849[32] 4[32]) 3[32]) }
          value = { defs={} expr=v3959[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3849[32] 4[32]) 2[32]) }
          value = { defs={} expr=v3958[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3849[32] 4[32]) 1[32]) }
          value = { defs={} expr=v3957[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] v3849[32] 4[32]) }
          value = { defs={} expr=v3956[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3849[32] 3[32]) }
          value = { defs={} expr=v3942[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3849[32] 2[32]) }
          value = { defs={} expr=v3941[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3849[32] 1[32]) }
          value = { defs={} expr=v3940[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432} expr=v3849[32] }
          value = { defs={} expr=v3939[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048440:push   ebp
    registers:
        ax      = { defs={} expr=v4014[32] }
        cx      = { defs={} expr=v4015[32] }
        dx      = { defs={} expr=v4016[32] }
        bx      = { defs={} expr=v4017[32] }
        sp      = { defs={0x08048440} expr=(add[32] v4018[32] -4[32]) }
        bp      = { defs={} expr=v4019[32] }
        si      = { defs={} expr=v4020[32] }
        di      = { defs={} expr=v4021[32] }
        es      = { defs={} expr=v4022[16] }
        cs      = { defs={} expr=v4023[16] }
        ss      = { defs={} expr=v4024[16] }
        ds      = { defs={} expr=v4025[16] }
        fs      = { defs={} expr=v4026[16] }
        gs      = { defs={} expr=v4027[16] }
        cf      = { defs={} expr=v4028[1] }
        ?1      = { defs={} expr=v4029[1] }
        pf      = { defs={} expr=v4030[1] }
        ?3      = { defs={} expr=v4031[1] }
        af      = { defs={} expr=v4032[1] }
        ?5      = { defs={} expr=v4033[1] }
        zf      = { defs={} expr=v4034[1] }
        sf      = { defs={} expr=v4035[1] }
        tf      = { defs={} expr=v4036[1] }
        if      = { defs={} expr=v4037[1] }
        df      = { defs={} expr=v4038[1] }
        of      = { defs={} expr=v4039[1] }
        iopl0   = { defs={} expr=v4040[1] }
        iopl1   = { defs={} expr=v4041[1] }
        nt      = { defs={} expr=v4042[1] }
        ?15     = { defs={} expr=v4043[1] }
        rf      = { defs={} expr=v4044[1] }
        vm      = { defs={} expr=v4045[1] }
        ac      = { defs={} expr=v4046[1] }
        vif     = { defs={} expr=v4047[1] }
        vip     = { defs={} expr=v4048[1] }
        id      = { defs={} expr=v4049[1] }
        ?22     = { defs={} expr=v4050[1] }
        ?23     = { defs={} expr=v4051[1] }
        ?24     = { defs={} expr=v4052[1] }
        ?25     = { defs={} expr=v4053[1] }
        ?26     = { defs={} expr=v4054[1] }
        ?27     = { defs={} expr=v4055[1] }
        ?28     = { defs={} expr=v4056[1] }
        ?29     = { defs={} expr=v4057[1] }
        ?30     = { defs={} expr=v4058[1] }
        ?31     = { defs={} expr=v4059[1] }
        ip      = { defs={0x08048440} expr=0x08048441[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 3[32]) }
          value = { defs={0x08048440} expr=(extract[8] 24[32] 32[32] v4019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 2[32]) }
          value = { defs={0x08048440} expr=(extract[8] 16[32] 24[32] v4019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 1[32]) }
          value = { defs={0x08048440} expr=(extract[8] 8[32] 16[32] v4019[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v4018[32] -4[32]) }
          value = { defs={0x08048440} expr=(extract[8] 0[32] 8[32] v4019[32]) }
          flags = { }
    init mem:
0x8048441:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4014[32] }
        cx      = { defs={} expr=v4015[32] }
        dx      = { defs={} expr=v4016[32] }
        bx      = { defs={} expr=v4017[32] }
        sp      = { defs={0x08048440} expr=(add[32] v4018[32] -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v4018[32] -4[32]) }
        si      = { defs={} expr=v4020[32] }
        di      = { defs={} expr=v4021[32] }
        es      = { defs={} expr=v4022[16] }
        cs      = { defs={} expr=v4023[16] }
        ss      = { defs={} expr=v4024[16] }
        ds      = { defs={} expr=v4025[16] }
        fs      = { defs={} expr=v4026[16] }
        gs      = { defs={} expr=v4027[16] }
        cf      = { defs={} expr=v4028[1] }
        ?1      = { defs={} expr=v4029[1] }
        pf      = { defs={} expr=v4030[1] }
        ?3      = { defs={} expr=v4031[1] }
        af      = { defs={} expr=v4032[1] }
        ?5      = { defs={} expr=v4033[1] }
        zf      = { defs={} expr=v4034[1] }
        sf      = { defs={} expr=v4035[1] }
        tf      = { defs={} expr=v4036[1] }
        if      = { defs={} expr=v4037[1] }
        df      = { defs={} expr=v4038[1] }
        of      = { defs={} expr=v4039[1] }
        iopl0   = { defs={} expr=v4040[1] }
        iopl1   = { defs={} expr=v4041[1] }
        nt      = { defs={} expr=v4042[1] }
        ?15     = { defs={} expr=v4043[1] }
        rf      = { defs={} expr=v4044[1] }
        vm      = { defs={} expr=v4045[1] }
        ac      = { defs={} expr=v4046[1] }
        vif     = { defs={} expr=v4047[1] }
        vip     = { defs={} expr=v4048[1] }
        id      = { defs={} expr=v4049[1] }
        ?22     = { defs={} expr=v4050[1] }
        ?23     = { defs={} expr=v4051[1] }
        ?24     = { defs={} expr=v4052[1] }
        ?25     = { defs={} expr=v4053[1] }
        ?26     = { defs={} expr=v4054[1] }
        ?27     = { defs={} expr=v4055[1] }
        ?28     = { defs={} expr=v4056[1] }
        ?29     = { defs={} expr=v4057[1] }
        ?30     = { defs={} expr=v4058[1] }
        ?31     = { defs={} expr=v4059[1] }
        ip      = { defs={0x08048440,0x08048441} expr=0x08048443[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 3[32]) }
          value = { defs={0x08048440} expr=(extract[8] 24[32] 32[32] v4019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 2[32]) }
          value = { defs={0x08048440} expr=(extract[8] 16[32] 24[32] v4019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 1[32]) }
          value = { defs={0x08048440} expr=(extract[8] 8[32] 16[32] v4019[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v4018[32] -4[32]) }
          value = { defs={0x08048440} expr=(extract[8] 0[32] 8[32] v4019[32]) }
          flags = { }
    init mem:
0x8048443:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v4014[32] }
        cx      = { defs={} expr=v4015[32] }
        dx      = { defs={} expr=v4016[32] }
        bx      = { defs={} expr=v4017[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v4018[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v4018[32] -4[32]) }
        si      = { defs={} expr=v4020[32] }
        di      = { defs={} expr=v4021[32] }
        es      = { defs={} expr=v4022[16] }
        cs      = { defs={} expr=v4023[16] }
        ss      = { defs={} expr=v4024[16] }
        ds      = { defs={} expr=v4025[16] }
        fs      = { defs={} expr=v4026[16] }
        gs      = { defs={} expr=v4027[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4029[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4031[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4033[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v4018[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4018[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4036[1] }
        if      = { defs={} expr=v4037[1] }
        df      = { defs={} expr=v4038[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4040[1] }
        iopl1   = { defs={} expr=v4041[1] }
        nt      = { defs={} expr=v4042[1] }
        ?15     = { defs={} expr=v4043[1] }
        rf      = { defs={} expr=v4044[1] }
        vm      = { defs={} expr=v4045[1] }
        ac      = { defs={} expr=v4046[1] }
        vif     = { defs={} expr=v4047[1] }
        vip     = { defs={} expr=v4048[1] }
        id      = { defs={} expr=v4049[1] }
        ?22     = { defs={} expr=v4050[1] }
        ?23     = { defs={} expr=v4051[1] }
        ?24     = { defs={} expr=v4052[1] }
        ?25     = { defs={} expr=v4053[1] }
        ?26     = { defs={} expr=v4054[1] }
        ?27     = { defs={} expr=v4055[1] }
        ?28     = { defs={} expr=v4056[1] }
        ?29     = { defs={} expr=v4057[1] }
        ?30     = { defs={} expr=v4058[1] }
        ?31     = { defs={} expr=v4059[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443} expr=0x08048446[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 3[32]) }
          value = { defs={0x08048440} expr=(extract[8] 24[32] 32[32] v4019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 2[32]) }
          value = { defs={0x08048440} expr=(extract[8] 16[32] 24[32] v4019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 1[32]) }
          value = { defs={0x08048440} expr=(extract[8] 8[32] 16[32] v4019[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v4018[32] -4[32]) }
          value = { defs={0x08048440} expr=(extract[8] 0[32] 8[32] v4019[32]) }
          flags = { }
    init mem:
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v4014[32] }
        cx      = { defs={} expr=v4015[32] }
        dx      = { defs={} expr=v4016[32] }
        bx      = { defs={} expr=v4017[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v4018[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v4018[32] -4[32]) }
        si      = { defs={} expr=v4020[32] }
        di      = { defs={} expr=v4021[32] }
        es      = { defs={} expr=v4022[16] }
        cs      = { defs={} expr=v4023[16] }
        ss      = { defs={} expr=v4024[16] }
        ds      = { defs={} expr=v4025[16] }
        fs      = { defs={} expr=v4026[16] }
        gs      = { defs={} expr=v4027[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4029[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4031[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4033[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v4018[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4018[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4036[1] }
        if      = { defs={} expr=v4037[1] }
        df      = { defs={} expr=v4038[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4040[1] }
        iopl1   = { defs={} expr=v4041[1] }
        nt      = { defs={} expr=v4042[1] }
        ?15     = { defs={} expr=v4043[1] }
        rf      = { defs={} expr=v4044[1] }
        vm      = { defs={} expr=v4045[1] }
        ac      = { defs={} expr=v4046[1] }
        vif     = { defs={} expr=v4047[1] }
        vip     = { defs={} expr=v4048[1] }
        id      = { defs={} expr=v4049[1] }
        ?22     = { defs={} expr=v4050[1] }
        ?23     = { defs={} expr=v4051[1] }
        ?24     = { defs={} expr=v4052[1] }
        ?25     = { defs={} expr=v4053[1] }
        ?26     = { defs={} expr=v4054[1] }
        ?27     = { defs={} expr=v4055[1] }
        ?28     = { defs={} expr=v4056[1] }
        ?29     = { defs={} expr=v4057[1] }
        ?30     = { defs={} expr=v4058[1] }
        ?31     = { defs={} expr=v4059[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443,0x08048446} expr=0x0804844d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x08048446} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x08048446} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x08048446} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x08048446} expr=(add[32] (add[32] v4018[32] -4[32]) -8[32]) }
          value = { defs={0x08048446} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 3[32]) }
          value = { defs={0x08048440} expr=(extract[8] 24[32] 32[32] v4019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 2[32]) }
          value = { defs={0x08048440} expr=(extract[8] 16[32] 24[32] v4019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 1[32]) }
          value = { defs={0x08048440} expr=(extract[8] 8[32] 16[32] v4019[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v4018[32] -4[32]) }
          value = { defs={0x08048440} expr=(extract[8] 0[32] 8[32] v4019[32]) }
          flags = { }
    init mem:
0x804844d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v4014[32] }
        cx      = { defs={} expr=v4015[32] }
        dx      = { defs={} expr=v4016[32] }
        bx      = { defs={} expr=v4017[32] }
        sp      = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v4018[32] -4[32]) }
        si      = { defs={} expr=v4020[32] }
        di      = { defs={} expr=v4021[32] }
        es      = { defs={} expr=v4022[16] }
        cs      = { defs={} expr=v4023[16] }
        ss      = { defs={} expr=v4024[16] }
        ds      = { defs={} expr=v4025[16] }
        fs      = { defs={} expr=v4026[16] }
        gs      = { defs={} expr=v4027[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4029[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4031[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4033[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v4018[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4018[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4036[1] }
        if      = { defs={} expr=v4037[1] }
        df      = { defs={} expr=v4038[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4018[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4040[1] }
        iopl1   = { defs={} expr=v4041[1] }
        nt      = { defs={} expr=v4042[1] }
        ?15     = { defs={} expr=v4043[1] }
        rf      = { defs={} expr=v4044[1] }
        vm      = { defs={} expr=v4045[1] }
        ac      = { defs={} expr=v4046[1] }
        vif     = { defs={} expr=v4047[1] }
        vip     = { defs={} expr=v4048[1] }
        id      = { defs={} expr=v4049[1] }
        ?22     = { defs={} expr=v4050[1] }
        ?23     = { defs={} expr=v4051[1] }
        ?24     = { defs={} expr=v4052[1] }
        ?25     = { defs={} expr=v4053[1] }
        ?26     = { defs={} expr=v4054[1] }
        ?27     = { defs={} expr=v4055[1] }
        ?28     = { defs={} expr=v4056[1] }
        ?29     = { defs={} expr=v4057[1] }
        ?30     = { defs={} expr=v4058[1] }
        ?31     = { defs={} expr=v4059[1] }
        ip      = { defs={0x0804844d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={0x08048440,0x08048441,0x08048443,0x08048446,0x0804844d} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={0x08048440,0x08048441,0x08048443,0x08048446,0x0804844d} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={0x08048440,0x08048441,0x08048443,0x08048446,0x0804844d} expr=-124[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={0x08048440,0x08048441,0x08048443,0x08048446,0x0804844d} expr=82[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x08048446} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x08048446} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4018[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x08048446} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x08048446} expr=(add[32] (add[32] v4018[32] -4[32]) -8[32]) }
          value = { defs={0x08048446} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 3[32]) }
          value = { defs={0x08048440} expr=(extract[8] 24[32] 32[32] v4019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 2[32]) }
          value = { defs={0x08048440} expr=(extract[8] 16[32] 24[32] v4019[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4018[32] -4[32]) 1[32]) }
          value = { defs={0x08048440} expr=(extract[8] 8[32] 16[32] v4019[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v4018[32] -4[32]) }
          value = { defs={0x08048440} expr=(extract[8] 0[32] 8[32] v4019[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048452:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v4197[32] }
        cx      = { defs={} expr=v4198[32] }
        dx      = { defs={} expr=v4199[32] }
        bx      = { defs={} expr=v4200[32] }
        sp      = { defs={0x08048452} expr=v4202[32] }
        bp      = { defs={} expr=v4202[32] }
        si      = { defs={} expr=v4203[32] }
        di      = { defs={} expr=v4204[32] }
        es      = { defs={} expr=v4205[16] }
        cs      = { defs={} expr=v4206[16] }
        ss      = { defs={} expr=v4207[16] }
        ds      = { defs={} expr=v4208[16] }
        fs      = { defs={} expr=v4209[16] }
        gs      = { defs={} expr=v4210[16] }
        cf      = { defs={} expr=v4211[1] }
        ?1      = { defs={} expr=v4212[1] }
        pf      = { defs={} expr=v4213[1] }
        ?3      = { defs={} expr=v4214[1] }
        af      = { defs={} expr=v4215[1] }
        ?5      = { defs={} expr=v4216[1] }
        zf      = { defs={} expr=v4217[1] }
        sf      = { defs={} expr=v4218[1] }
        tf      = { defs={} expr=v4219[1] }
        if      = { defs={} expr=v4220[1] }
        df      = { defs={} expr=v4221[1] }
        of      = { defs={} expr=v4222[1] }
        iopl0   = { defs={} expr=v4223[1] }
        iopl1   = { defs={} expr=v4224[1] }
        nt      = { defs={} expr=v4225[1] }
        ?15     = { defs={} expr=v4226[1] }
        rf      = { defs={} expr=v4227[1] }
        vm      = { defs={} expr=v4228[1] }
        ac      = { defs={} expr=v4229[1] }
        vif     = { defs={} expr=v4230[1] }
        vip     = { defs={} expr=v4231[1] }
        id      = { defs={} expr=v4232[1] }
        ?22     = { defs={} expr=v4233[1] }
        ?23     = { defs={} expr=v4234[1] }
        ?24     = { defs={} expr=v4235[1] }
        ?25     = { defs={} expr=v4236[1] }
        ?26     = { defs={} expr=v4237[1] }
        ?27     = { defs={} expr=v4238[1] }
        ?28     = { defs={} expr=v4239[1] }
        ?29     = { defs={} expr=v4240[1] }
        ?30     = { defs={} expr=v4241[1] }
        ?31     = { defs={} expr=v4242[1] }
        ip      = { defs={0x08048452} expr=0x08048454[32] }
    memory:
    init mem:
0x8048454:pop    ebp
    registers:
        ax      = { defs={} expr=v4197[32] }
        cx      = { defs={} expr=v4198[32] }
        dx      = { defs={} expr=v4199[32] }
        bx      = { defs={} expr=v4200[32] }
        sp      = { defs={0x08048452,0x08048454} expr=(add[32] v4202[32] 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4257[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4258[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4259[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4260[8]))) }
        si      = { defs={} expr=v4203[32] }
        di      = { defs={} expr=v4204[32] }
        es      = { defs={} expr=v4205[16] }
        cs      = { defs={} expr=v4206[16] }
        ss      = { defs={} expr=v4207[16] }
        ds      = { defs={} expr=v4208[16] }
        fs      = { defs={} expr=v4209[16] }
        gs      = { defs={} expr=v4210[16] }
        cf      = { defs={} expr=v4211[1] }
        ?1      = { defs={} expr=v4212[1] }
        pf      = { defs={} expr=v4213[1] }
        ?3      = { defs={} expr=v4214[1] }
        af      = { defs={} expr=v4215[1] }
        ?5      = { defs={} expr=v4216[1] }
        zf      = { defs={} expr=v4217[1] }
        sf      = { defs={} expr=v4218[1] }
        tf      = { defs={} expr=v4219[1] }
        if      = { defs={} expr=v4220[1] }
        df      = { defs={} expr=v4221[1] }
        of      = { defs={} expr=v4222[1] }
        iopl0   = { defs={} expr=v4223[1] }
        iopl1   = { defs={} expr=v4224[1] }
        nt      = { defs={} expr=v4225[1] }
        ?15     = { defs={} expr=v4226[1] }
        rf      = { defs={} expr=v4227[1] }
        vm      = { defs={} expr=v4228[1] }
        ac      = { defs={} expr=v4229[1] }
        vif     = { defs={} expr=v4230[1] }
        vip     = { defs={} expr=v4231[1] }
        id      = { defs={} expr=v4232[1] }
        ?22     = { defs={} expr=v4233[1] }
        ?23     = { defs={} expr=v4234[1] }
        ?24     = { defs={} expr=v4235[1] }
        ?25     = { defs={} expr=v4236[1] }
        ?26     = { defs={} expr=v4237[1] }
        ?27     = { defs={} expr=v4238[1] }
        ?28     = { defs={} expr=v4239[1] }
        ?29     = { defs={} expr=v4240[1] }
        ?30     = { defs={} expr=v4241[1] }
        ?31     = { defs={} expr=v4242[1] }
        ip      = { defs={0x08048452,0x08048454} expr=0x08048455[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4202[32] 3[32]) }
          value = { defs={} expr=v4260[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4202[32] 2[32]) }
          value = { defs={} expr=v4259[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4202[32] 1[32]) }
          value = { defs={} expr=v4258[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454} expr=v4202[32] }
          value = { defs={} expr=v4257[8] }
          flags = { rdonly }
0x8048455:ret    
    registers:
        ax      = { defs={} expr=v4197[32] }
        cx      = { defs={} expr=v4198[32] }
        dx      = { defs={} expr=v4199[32] }
        bx      = { defs={} expr=v4200[32] }
        sp      = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] (add[32] v4202[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4257[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4258[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4259[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4260[8]))) }
        si      = { defs={} expr=v4203[32] }
        di      = { defs={} expr=v4204[32] }
        es      = { defs={} expr=v4205[16] }
        cs      = { defs={} expr=v4206[16] }
        ss      = { defs={} expr=v4207[16] }
        ds      = { defs={} expr=v4208[16] }
        fs      = { defs={} expr=v4209[16] }
        gs      = { defs={} expr=v4210[16] }
        cf      = { defs={} expr=v4211[1] }
        ?1      = { defs={} expr=v4212[1] }
        pf      = { defs={} expr=v4213[1] }
        ?3      = { defs={} expr=v4214[1] }
        af      = { defs={} expr=v4215[1] }
        ?5      = { defs={} expr=v4216[1] }
        zf      = { defs={} expr=v4217[1] }
        sf      = { defs={} expr=v4218[1] }
        tf      = { defs={} expr=v4219[1] }
        if      = { defs={} expr=v4220[1] }
        df      = { defs={} expr=v4221[1] }
        of      = { defs={} expr=v4222[1] }
        iopl0   = { defs={} expr=v4223[1] }
        iopl1   = { defs={} expr=v4224[1] }
        nt      = { defs={} expr=v4225[1] }
        ?15     = { defs={} expr=v4226[1] }
        rf      = { defs={} expr=v4227[1] }
        vm      = { defs={} expr=v4228[1] }
        ac      = { defs={} expr=v4229[1] }
        vif     = { defs={} expr=v4230[1] }
        vip     = { defs={} expr=v4231[1] }
        id      = { defs={} expr=v4232[1] }
        ?22     = { defs={} expr=v4233[1] }
        ?23     = { defs={} expr=v4234[1] }
        ?24     = { defs={} expr=v4235[1] }
        ?25     = { defs={} expr=v4236[1] }
        ?26     = { defs={} expr=v4237[1] }
        ?27     = { defs={} expr=v4238[1] }
        ?28     = { defs={} expr=v4239[1] }
        ?29     = { defs={} expr=v4240[1] }
        ?30     = { defs={} expr=v4241[1] }
        ?31     = { defs={} expr=v4242[1] }
        ip      = { defs={0x08048455} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4274[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4275[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4276[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4277[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4202[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4277[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4202[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4276[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4202[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4275[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] v4202[32] 4[32]) }
          value = { defs={} expr=v4274[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4202[32] 3[32]) }
          value = { defs={} expr=v4260[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4202[32] 2[32]) }
          value = { defs={} expr=v4259[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4202[32] 1[32]) }
          value = { defs={} expr=v4258[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454} expr=v4202[32] }
          value = { defs={} expr=v4257[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048460:push   ebp
    registers:
        ax      = { defs={} expr=v4332[32] }
        cx      = { defs={} expr=v4333[32] }
        dx      = { defs={} expr=v4334[32] }
        bx      = { defs={} expr=v4335[32] }
        sp      = { defs={0x08048460} expr=(add[32] v4336[32] -4[32]) }
        bp      = { defs={} expr=v4337[32] }
        si      = { defs={} expr=v4338[32] }
        di      = { defs={} expr=v4339[32] }
        es      = { defs={} expr=v4340[16] }
        cs      = { defs={} expr=v4341[16] }
        ss      = { defs={} expr=v4342[16] }
        ds      = { defs={} expr=v4343[16] }
        fs      = { defs={} expr=v4344[16] }
        gs      = { defs={} expr=v4345[16] }
        cf      = { defs={} expr=v4346[1] }
        ?1      = { defs={} expr=v4347[1] }
        pf      = { defs={} expr=v4348[1] }
        ?3      = { defs={} expr=v4349[1] }
        af      = { defs={} expr=v4350[1] }
        ?5      = { defs={} expr=v4351[1] }
        zf      = { defs={} expr=v4352[1] }
        sf      = { defs={} expr=v4353[1] }
        tf      = { defs={} expr=v4354[1] }
        if      = { defs={} expr=v4355[1] }
        df      = { defs={} expr=v4356[1] }
        of      = { defs={} expr=v4357[1] }
        iopl0   = { defs={} expr=v4358[1] }
        iopl1   = { defs={} expr=v4359[1] }
        nt      = { defs={} expr=v4360[1] }
        ?15     = { defs={} expr=v4361[1] }
        rf      = { defs={} expr=v4362[1] }
        vm      = { defs={} expr=v4363[1] }
        ac      = { defs={} expr=v4364[1] }
        vif     = { defs={} expr=v4365[1] }
        vip     = { defs={} expr=v4366[1] }
        id      = { defs={} expr=v4367[1] }
        ?22     = { defs={} expr=v4368[1] }
        ?23     = { defs={} expr=v4369[1] }
        ?24     = { defs={} expr=v4370[1] }
        ?25     = { defs={} expr=v4371[1] }
        ?26     = { defs={} expr=v4372[1] }
        ?27     = { defs={} expr=v4373[1] }
        ?28     = { defs={} expr=v4374[1] }
        ?29     = { defs={} expr=v4375[1] }
        ?30     = { defs={} expr=v4376[1] }
        ?31     = { defs={} expr=v4377[1] }
        ip      = { defs={0x08048460} expr=0x08048461[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 3[32]) }
          value = { defs={0x08048460} expr=(extract[8] 24[32] 32[32] v4337[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 2[32]) }
          value = { defs={0x08048460} expr=(extract[8] 16[32] 24[32] v4337[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 1[32]) }
          value = { defs={0x08048460} expr=(extract[8] 8[32] 16[32] v4337[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4336[32] -4[32]) }
          value = { defs={0x08048460} expr=(extract[8] 0[32] 8[32] v4337[32]) }
          flags = { }
    init mem:
0x8048461:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4332[32] }
        cx      = { defs={} expr=v4333[32] }
        dx      = { defs={} expr=v4334[32] }
        bx      = { defs={} expr=v4335[32] }
        sp      = { defs={0x08048460} expr=(add[32] v4336[32] -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4336[32] -4[32]) }
        si      = { defs={} expr=v4338[32] }
        di      = { defs={} expr=v4339[32] }
        es      = { defs={} expr=v4340[16] }
        cs      = { defs={} expr=v4341[16] }
        ss      = { defs={} expr=v4342[16] }
        ds      = { defs={} expr=v4343[16] }
        fs      = { defs={} expr=v4344[16] }
        gs      = { defs={} expr=v4345[16] }
        cf      = { defs={} expr=v4346[1] }
        ?1      = { defs={} expr=v4347[1] }
        pf      = { defs={} expr=v4348[1] }
        ?3      = { defs={} expr=v4349[1] }
        af      = { defs={} expr=v4350[1] }
        ?5      = { defs={} expr=v4351[1] }
        zf      = { defs={} expr=v4352[1] }
        sf      = { defs={} expr=v4353[1] }
        tf      = { defs={} expr=v4354[1] }
        if      = { defs={} expr=v4355[1] }
        df      = { defs={} expr=v4356[1] }
        of      = { defs={} expr=v4357[1] }
        iopl0   = { defs={} expr=v4358[1] }
        iopl1   = { defs={} expr=v4359[1] }
        nt      = { defs={} expr=v4360[1] }
        ?15     = { defs={} expr=v4361[1] }
        rf      = { defs={} expr=v4362[1] }
        vm      = { defs={} expr=v4363[1] }
        ac      = { defs={} expr=v4364[1] }
        vif     = { defs={} expr=v4365[1] }
        vip     = { defs={} expr=v4366[1] }
        id      = { defs={} expr=v4367[1] }
        ?22     = { defs={} expr=v4368[1] }
        ?23     = { defs={} expr=v4369[1] }
        ?24     = { defs={} expr=v4370[1] }
        ?25     = { defs={} expr=v4371[1] }
        ?26     = { defs={} expr=v4372[1] }
        ?27     = { defs={} expr=v4373[1] }
        ?28     = { defs={} expr=v4374[1] }
        ?29     = { defs={} expr=v4375[1] }
        ?30     = { defs={} expr=v4376[1] }
        ?31     = { defs={} expr=v4377[1] }
        ip      = { defs={0x08048460,0x08048461} expr=0x08048463[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 3[32]) }
          value = { defs={0x08048460} expr=(extract[8] 24[32] 32[32] v4337[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 2[32]) }
          value = { defs={0x08048460} expr=(extract[8] 16[32] 24[32] v4337[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 1[32]) }
          value = { defs={0x08048460} expr=(extract[8] 8[32] 16[32] v4337[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4336[32] -4[32]) }
          value = { defs={0x08048460} expr=(extract[8] 0[32] 8[32] v4337[32]) }
          flags = { }
    init mem:
0x8048463:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v4332[32] }
        cx      = { defs={} expr=v4333[32] }
        dx      = { defs={} expr=v4334[32] }
        bx      = { defs={} expr=v4335[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4336[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4336[32] -4[32]) }
        si      = { defs={} expr=v4338[32] }
        di      = { defs={} expr=v4339[32] }
        es      = { defs={} expr=v4340[16] }
        cs      = { defs={} expr=v4341[16] }
        ss      = { defs={} expr=v4342[16] }
        ds      = { defs={} expr=v4343[16] }
        fs      = { defs={} expr=v4344[16] }
        gs      = { defs={} expr=v4345[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4347[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4349[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4351[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4336[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4336[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4354[1] }
        if      = { defs={} expr=v4355[1] }
        df      = { defs={} expr=v4356[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4358[1] }
        iopl1   = { defs={} expr=v4359[1] }
        nt      = { defs={} expr=v4360[1] }
        ?15     = { defs={} expr=v4361[1] }
        rf      = { defs={} expr=v4362[1] }
        vm      = { defs={} expr=v4363[1] }
        ac      = { defs={} expr=v4364[1] }
        vif     = { defs={} expr=v4365[1] }
        vip     = { defs={} expr=v4366[1] }
        id      = { defs={} expr=v4367[1] }
        ?22     = { defs={} expr=v4368[1] }
        ?23     = { defs={} expr=v4369[1] }
        ?24     = { defs={} expr=v4370[1] }
        ?25     = { defs={} expr=v4371[1] }
        ?26     = { defs={} expr=v4372[1] }
        ?27     = { defs={} expr=v4373[1] }
        ?28     = { defs={} expr=v4374[1] }
        ?29     = { defs={} expr=v4375[1] }
        ?30     = { defs={} expr=v4376[1] }
        ?31     = { defs={} expr=v4377[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463} expr=0x08048466[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 3[32]) }
          value = { defs={0x08048460} expr=(extract[8] 24[32] 32[32] v4337[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 2[32]) }
          value = { defs={0x08048460} expr=(extract[8] 16[32] 24[32] v4337[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 1[32]) }
          value = { defs={0x08048460} expr=(extract[8] 8[32] 16[32] v4337[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4336[32] -4[32]) }
          value = { defs={0x08048460} expr=(extract[8] 0[32] 8[32] v4337[32]) }
          flags = { }
    init mem:
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v4332[32] }
        cx      = { defs={} expr=v4333[32] }
        dx      = { defs={} expr=v4334[32] }
        bx      = { defs={} expr=v4335[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4336[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4336[32] -4[32]) }
        si      = { defs={} expr=v4338[32] }
        di      = { defs={} expr=v4339[32] }
        es      = { defs={} expr=v4340[16] }
        cs      = { defs={} expr=v4341[16] }
        ss      = { defs={} expr=v4342[16] }
        ds      = { defs={} expr=v4343[16] }
        fs      = { defs={} expr=v4344[16] }
        gs      = { defs={} expr=v4345[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4347[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4349[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4351[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4336[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4336[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4354[1] }
        if      = { defs={} expr=v4355[1] }
        df      = { defs={} expr=v4356[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4358[1] }
        iopl1   = { defs={} expr=v4359[1] }
        nt      = { defs={} expr=v4360[1] }
        ?15     = { defs={} expr=v4361[1] }
        rf      = { defs={} expr=v4362[1] }
        vm      = { defs={} expr=v4363[1] }
        ac      = { defs={} expr=v4364[1] }
        vif     = { defs={} expr=v4365[1] }
        vip     = { defs={} expr=v4366[1] }
        id      = { defs={} expr=v4367[1] }
        ?22     = { defs={} expr=v4368[1] }
        ?23     = { defs={} expr=v4369[1] }
        ?24     = { defs={} expr=v4370[1] }
        ?25     = { defs={} expr=v4371[1] }
        ?26     = { defs={} expr=v4372[1] }
        ?27     = { defs={} expr=v4373[1] }
        ?28     = { defs={} expr=v4374[1] }
        ?29     = { defs={} expr=v4375[1] }
        ?30     = { defs={} expr=v4376[1] }
        ?31     = { defs={} expr=v4377[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463,0x08048466} expr=0x0804846d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x08048466} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x08048466} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x08048466} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x08048466} expr=(add[32] (add[32] v4336[32] -4[32]) -8[32]) }
          value = { defs={0x08048466} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 3[32]) }
          value = { defs={0x08048460} expr=(extract[8] 24[32] 32[32] v4337[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 2[32]) }
          value = { defs={0x08048460} expr=(extract[8] 16[32] 24[32] v4337[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 1[32]) }
          value = { defs={0x08048460} expr=(extract[8] 8[32] 16[32] v4337[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4336[32] -4[32]) }
          value = { defs={0x08048460} expr=(extract[8] 0[32] 8[32] v4337[32]) }
          flags = { }
    init mem:
0x804846d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v4332[32] }
        cx      = { defs={} expr=v4333[32] }
        dx      = { defs={} expr=v4334[32] }
        bx      = { defs={} expr=v4335[32] }
        sp      = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4336[32] -4[32]) }
        si      = { defs={} expr=v4338[32] }
        di      = { defs={} expr=v4339[32] }
        es      = { defs={} expr=v4340[16] }
        cs      = { defs={} expr=v4341[16] }
        ss      = { defs={} expr=v4342[16] }
        ds      = { defs={} expr=v4343[16] }
        fs      = { defs={} expr=v4344[16] }
        gs      = { defs={} expr=v4345[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4347[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4349[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4351[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4336[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4336[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4354[1] }
        if      = { defs={} expr=v4355[1] }
        df      = { defs={} expr=v4356[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4336[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4358[1] }
        iopl1   = { defs={} expr=v4359[1] }
        nt      = { defs={} expr=v4360[1] }
        ?15     = { defs={} expr=v4361[1] }
        rf      = { defs={} expr=v4362[1] }
        vm      = { defs={} expr=v4363[1] }
        ac      = { defs={} expr=v4364[1] }
        vif     = { defs={} expr=v4365[1] }
        vip     = { defs={} expr=v4366[1] }
        id      = { defs={} expr=v4367[1] }
        ?22     = { defs={} expr=v4368[1] }
        ?23     = { defs={} expr=v4369[1] }
        ?24     = { defs={} expr=v4370[1] }
        ?25     = { defs={} expr=v4371[1] }
        ?26     = { defs={} expr=v4372[1] }
        ?27     = { defs={} expr=v4373[1] }
        ?28     = { defs={} expr=v4374[1] }
        ?29     = { defs={} expr=v4375[1] }
        ?30     = { defs={} expr=v4376[1] }
        ?31     = { defs={} expr=v4377[1] }
        ip      = { defs={0x0804846d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={0x08048460,0x08048461,0x08048463,0x08048466,0x0804846d} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={0x08048460,0x08048461,0x08048463,0x08048466,0x0804846d} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={0x08048460,0x08048461,0x08048463,0x08048466,0x0804846d} expr=-124[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={0x08048460,0x08048461,0x08048463,0x08048466,0x0804846d} expr=114[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x08048466} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x08048466} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4336[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x08048466} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x08048466} expr=(add[32] (add[32] v4336[32] -4[32]) -8[32]) }
          value = { defs={0x08048466} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 3[32]) }
          value = { defs={0x08048460} expr=(extract[8] 24[32] 32[32] v4337[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 2[32]) }
          value = { defs={0x08048460} expr=(extract[8] 16[32] 24[32] v4337[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4336[32] -4[32]) 1[32]) }
          value = { defs={0x08048460} expr=(extract[8] 8[32] 16[32] v4337[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4336[32] -4[32]) }
          value = { defs={0x08048460} expr=(extract[8] 0[32] 8[32] v4337[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v4515[32] }
        cx      = { defs={} expr=v4516[32] }
        dx      = { defs={} expr=v4517[32] }
        bx      = { defs={} expr=v4518[32] }
        sp      = { defs={} expr=v4519[32] }
        bp      = { defs={} expr=v4520[32] }
        si      = { defs={} expr=v4521[32] }
        di      = { defs={} expr=v4522[32] }
        es      = { defs={} expr=v4523[16] }
        cs      = { defs={} expr=v4524[16] }
        ss      = { defs={} expr=v4525[16] }
        ds      = { defs={} expr=v4526[16] }
        fs      = { defs={} expr=v4527[16] }
        gs      = { defs={} expr=v4528[16] }
        cf      = { defs={} expr=v4529[1] }
        ?1      = { defs={} expr=v4530[1] }
        pf      = { defs={} expr=v4531[1] }
        ?3      = { defs={} expr=v4532[1] }
        af      = { defs={} expr=v4533[1] }
        ?5      = { defs={} expr=v4534[1] }
        zf      = { defs={} expr=v4535[1] }
        sf      = { defs={} expr=v4536[1] }
        tf      = { defs={} expr=v4537[1] }
        if      = { defs={} expr=v4538[1] }
        df      = { defs={} expr=v4539[1] }
        of      = { defs={} expr=v4540[1] }
        iopl0   = { defs={} expr=v4541[1] }
        iopl1   = { defs={} expr=v4542[1] }
        nt      = { defs={} expr=v4543[1] }
        ?15     = { defs={} expr=v4544[1] }
        rf      = { defs={} expr=v4545[1] }
        vm      = { defs={} expr=v4546[1] }
        ac      = { defs={} expr=v4547[1] }
        vif     = { defs={} expr=v4548[1] }
        vip     = { defs={} expr=v4549[1] }
        id      = { defs={} expr=v4550[1] }
        ?22     = { defs={} expr=v4551[1] }
        ?23     = { defs={} expr=v4552[1] }
        ?24     = { defs={} expr=v4553[1] }
        ?25     = { defs={} expr=v4554[1] }
        ?26     = { defs={} expr=v4555[1] }
        ?27     = { defs={} expr=v4556[1] }
        ?28     = { defs={} expr=v4557[1] }
        ?29     = { defs={} expr=v4558[1] }
        ?30     = { defs={} expr=v4559[1] }
        ?31     = { defs={} expr=v4560[1] }
        ip      = { defs={0x08048472} expr=0x08048479[32] }
    memory:
        address = { defs={} expr=(add[32] v4519[32] 3[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4519[32] 2[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4519[32] 1[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={0x08048472} expr=v4519[32] }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
    init mem:
0x8048479:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v4515[32] }
        cx      = { defs={} expr=v4516[32] }
        dx      = { defs={} expr=v4517[32] }
        bx      = { defs={} expr=v4518[32] }
        sp      = { defs={0x08048479} expr=(add[32] v4519[32] -4[32]) }
        bp      = { defs={} expr=v4520[32] }
        si      = { defs={} expr=v4521[32] }
        di      = { defs={} expr=v4522[32] }
        es      = { defs={} expr=v4523[16] }
        cs      = { defs={} expr=v4524[16] }
        ss      = { defs={} expr=v4525[16] }
        ds      = { defs={} expr=v4526[16] }
        fs      = { defs={} expr=v4527[16] }
        gs      = { defs={} expr=v4528[16] }
        cf      = { defs={} expr=v4529[1] }
        ?1      = { defs={} expr=v4530[1] }
        pf      = { defs={} expr=v4531[1] }
        ?3      = { defs={} expr=v4532[1] }
        af      = { defs={} expr=v4533[1] }
        ?5      = { defs={} expr=v4534[1] }
        zf      = { defs={} expr=v4535[1] }
        sf      = { defs={} expr=v4536[1] }
        tf      = { defs={} expr=v4537[1] }
        if      = { defs={} expr=v4538[1] }
        df      = { defs={} expr=v4539[1] }
        of      = { defs={} expr=v4540[1] }
        iopl0   = { defs={} expr=v4541[1] }
        iopl1   = { defs={} expr=v4542[1] }
        nt      = { defs={} expr=v4543[1] }
        ?15     = { defs={} expr=v4544[1] }
        rf      = { defs={} expr=v4545[1] }
        vm      = { defs={} expr=v4546[1] }
        ac      = { defs={} expr=v4547[1] }
        vif     = { defs={} expr=v4548[1] }
        vip     = { defs={} expr=v4549[1] }
        id      = { defs={} expr=v4550[1] }
        ?22     = { defs={} expr=v4551[1] }
        ?23     = { defs={} expr=v4552[1] }
        ?24     = { defs={} expr=v4553[1] }
        ?25     = { defs={} expr=v4554[1] }
        ?26     = { defs={} expr=v4555[1] }
        ?27     = { defs={} expr=v4556[1] }
        ?28     = { defs={} expr=v4557[1] }
        ?29     = { defs={} expr=v4558[1] }
        ?30     = { defs={} expr=v4559[1] }
        ?31     = { defs={} expr=v4560[1] }
        ip      = { defs={0x08048479} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4519[32] -4[32]) 3[32]) }
          value = { defs={0x08048472,0x08048479} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4519[32] -4[32]) 2[32]) }
          value = { defs={0x08048472,0x08048479} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4519[32] -4[32]) 1[32]) }
          value = { defs={0x08048472,0x08048479} expr=-124[8] }
          flags = { }
        address = { defs={0x08048479} expr=(add[32] v4519[32] -4[32]) }
          value = { defs={0x08048472,0x08048479} expr=126[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4519[32] 3[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4519[32] 2[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4519[32] 1[32]) }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
        address = { defs={0x08048472} expr=v4519[32] }
          value = { defs={0x08048472} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048480:push   ebp
    registers:
        ax      = { defs={} expr=v4630[32] }
        cx      = { defs={} expr=v4631[32] }
        dx      = { defs={} expr=v4632[32] }
        bx      = { defs={} expr=v4633[32] }
        sp      = { defs={0x08048480} expr=(add[32] v4634[32] -4[32]) }
        bp      = { defs={} expr=v4635[32] }
        si      = { defs={} expr=v4636[32] }
        di      = { defs={} expr=v4637[32] }
        es      = { defs={} expr=v4638[16] }
        cs      = { defs={} expr=v4639[16] }
        ss      = { defs={} expr=v4640[16] }
        ds      = { defs={} expr=v4641[16] }
        fs      = { defs={} expr=v4642[16] }
        gs      = { defs={} expr=v4643[16] }
        cf      = { defs={} expr=v4644[1] }
        ?1      = { defs={} expr=v4645[1] }
        pf      = { defs={} expr=v4646[1] }
        ?3      = { defs={} expr=v4647[1] }
        af      = { defs={} expr=v4648[1] }
        ?5      = { defs={} expr=v4649[1] }
        zf      = { defs={} expr=v4650[1] }
        sf      = { defs={} expr=v4651[1] }
        tf      = { defs={} expr=v4652[1] }
        if      = { defs={} expr=v4653[1] }
        df      = { defs={} expr=v4654[1] }
        of      = { defs={} expr=v4655[1] }
        iopl0   = { defs={} expr=v4656[1] }
        iopl1   = { defs={} expr=v4657[1] }
        nt      = { defs={} expr=v4658[1] }
        ?15     = { defs={} expr=v4659[1] }
        rf      = { defs={} expr=v4660[1] }
        vm      = { defs={} expr=v4661[1] }
        ac      = { defs={} expr=v4662[1] }
        vif     = { defs={} expr=v4663[1] }
        vip     = { defs={} expr=v4664[1] }
        id      = { defs={} expr=v4665[1] }
        ?22     = { defs={} expr=v4666[1] }
        ?23     = { defs={} expr=v4667[1] }
        ?24     = { defs={} expr=v4668[1] }
        ?25     = { defs={} expr=v4669[1] }
        ?26     = { defs={} expr=v4670[1] }
        ?27     = { defs={} expr=v4671[1] }
        ?28     = { defs={} expr=v4672[1] }
        ?29     = { defs={} expr=v4673[1] }
        ?30     = { defs={} expr=v4674[1] }
        ?31     = { defs={} expr=v4675[1] }
        ip      = { defs={0x08048480} expr=0x08048481[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4635[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4634[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4635[32]) }
          flags = { }
    init mem:
0x8048481:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4630[32] }
        cx      = { defs={} expr=v4631[32] }
        dx      = { defs={} expr=v4632[32] }
        bx      = { defs={} expr=v4633[32] }
        sp      = { defs={0x08048480} expr=(add[32] v4634[32] -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4634[32] -4[32]) }
        si      = { defs={} expr=v4636[32] }
        di      = { defs={} expr=v4637[32] }
        es      = { defs={} expr=v4638[16] }
        cs      = { defs={} expr=v4639[16] }
        ss      = { defs={} expr=v4640[16] }
        ds      = { defs={} expr=v4641[16] }
        fs      = { defs={} expr=v4642[16] }
        gs      = { defs={} expr=v4643[16] }
        cf      = { defs={} expr=v4644[1] }
        ?1      = { defs={} expr=v4645[1] }
        pf      = { defs={} expr=v4646[1] }
        ?3      = { defs={} expr=v4647[1] }
        af      = { defs={} expr=v4648[1] }
        ?5      = { defs={} expr=v4649[1] }
        zf      = { defs={} expr=v4650[1] }
        sf      = { defs={} expr=v4651[1] }
        tf      = { defs={} expr=v4652[1] }
        if      = { defs={} expr=v4653[1] }
        df      = { defs={} expr=v4654[1] }
        of      = { defs={} expr=v4655[1] }
        iopl0   = { defs={} expr=v4656[1] }
        iopl1   = { defs={} expr=v4657[1] }
        nt      = { defs={} expr=v4658[1] }
        ?15     = { defs={} expr=v4659[1] }
        rf      = { defs={} expr=v4660[1] }
        vm      = { defs={} expr=v4661[1] }
        ac      = { defs={} expr=v4662[1] }
        vif     = { defs={} expr=v4663[1] }
        vip     = { defs={} expr=v4664[1] }
        id      = { defs={} expr=v4665[1] }
        ?22     = { defs={} expr=v4666[1] }
        ?23     = { defs={} expr=v4667[1] }
        ?24     = { defs={} expr=v4668[1] }
        ?25     = { defs={} expr=v4669[1] }
        ?26     = { defs={} expr=v4670[1] }
        ?27     = { defs={} expr=v4671[1] }
        ?28     = { defs={} expr=v4672[1] }
        ?29     = { defs={} expr=v4673[1] }
        ?30     = { defs={} expr=v4674[1] }
        ?31     = { defs={} expr=v4675[1] }
        ip      = { defs={0x08048480,0x08048481} expr=0x08048483[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4635[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4634[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4635[32]) }
          flags = { }
    init mem:
0x8048483:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v4630[32] }
        cx      = { defs={} expr=v4631[32] }
        dx      = { defs={} expr=v4632[32] }
        bx      = { defs={} expr=v4633[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4634[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4634[32] -4[32]) }
        si      = { defs={} expr=v4636[32] }
        di      = { defs={} expr=v4637[32] }
        es      = { defs={} expr=v4638[16] }
        cs      = { defs={} expr=v4639[16] }
        ss      = { defs={} expr=v4640[16] }
        ds      = { defs={} expr=v4641[16] }
        fs      = { defs={} expr=v4642[16] }
        gs      = { defs={} expr=v4643[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4645[1] }
        pf      = { defs={0x08048480,0x08048483} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4634[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4634[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4647[1] }
        af      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4649[1] }
        zf      = { defs={0x08048480,0x08048483} expr=(zerop[1] (add[32] (add[32] v4634[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048480,0x08048483} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4634[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4652[1] }
        if      = { defs={} expr=v4653[1] }
        df      = { defs={} expr=v4654[1] }
        of      = { defs={0x08048480,0x08048483} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4656[1] }
        iopl1   = { defs={} expr=v4657[1] }
        nt      = { defs={} expr=v4658[1] }
        ?15     = { defs={} expr=v4659[1] }
        rf      = { defs={} expr=v4660[1] }
        vm      = { defs={} expr=v4661[1] }
        ac      = { defs={} expr=v4662[1] }
        vif     = { defs={} expr=v4663[1] }
        vip     = { defs={} expr=v4664[1] }
        id      = { defs={} expr=v4665[1] }
        ?22     = { defs={} expr=v4666[1] }
        ?23     = { defs={} expr=v4667[1] }
        ?24     = { defs={} expr=v4668[1] }
        ?25     = { defs={} expr=v4669[1] }
        ?26     = { defs={} expr=v4670[1] }
        ?27     = { defs={} expr=v4671[1] }
        ?28     = { defs={} expr=v4672[1] }
        ?29     = { defs={} expr=v4673[1] }
        ?30     = { defs={} expr=v4674[1] }
        ?31     = { defs={} expr=v4675[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483} expr=0x08048486[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4635[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4634[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4635[32]) }
          flags = { }
    init mem:
0x8048486:inc    DWORD PTR ds:[0x080496f8<.bss+4>]
    registers:
        ax      = { defs={} expr=v4630[32] }
        cx      = { defs={} expr=v4631[32] }
        dx      = { defs={} expr=v4632[32] }
        bx      = { defs={} expr=v4633[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4634[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4634[32] -4[32]) }
        si      = { defs={} expr=v4636[32] }
        di      = { defs={} expr=v4637[32] }
        es      = { defs={} expr=v4638[16] }
        cs      = { defs={} expr=v4639[16] }
        ss      = { defs={} expr=v4640[16] }
        ds      = { defs={} expr=v4641[16] }
        fs      = { defs={} expr=v4642[16] }
        gs      = { defs={} expr=v4643[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4645[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4647[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) 1[33]))))) }
        ?5      = { defs={} expr=v4649[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
        tf      = { defs={} expr=v4652[1] }
        if      = { defs={} expr=v4653[1] }
        df      = { defs={} expr=v4654[1] }
        of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v4656[1] }
        iopl1   = { defs={} expr=v4657[1] }
        nt      = { defs={} expr=v4658[1] }
        ?15     = { defs={} expr=v4659[1] }
        rf      = { defs={} expr=v4660[1] }
        vm      = { defs={} expr=v4661[1] }
        ac      = { defs={} expr=v4662[1] }
        vif     = { defs={} expr=v4663[1] }
        vip     = { defs={} expr=v4664[1] }
        id      = { defs={} expr=v4665[1] }
        ?22     = { defs={} expr=v4666[1] }
        ?23     = { defs={} expr=v4667[1] }
        ?24     = { defs={} expr=v4668[1] }
        ?25     = { defs={} expr=v4669[1] }
        ?26     = { defs={} expr=v4670[1] }
        ?27     = { defs={} expr=v4671[1] }
        ?28     = { defs={} expr=v4672[1] }
        ?29     = { defs={} expr=v4673[1] }
        ?30     = { defs={} expr=v4674[1] }
        ?31     = { defs={} expr=v4675[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486} expr=0x0804848c[32] }
    memory:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={0x08048486} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={0x08048486} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={0x08048486} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={0x08048486} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4635[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4634[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4635[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4753[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4752[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4751[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4750[8] }
          flags = { rdonly }
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v4630[32] }
        cx      = { defs={} expr=v4631[32] }
        dx      = { defs={} expr=v4632[32] }
        bx      = { defs={} expr=v4633[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4634[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4634[32] -4[32]) }
        si      = { defs={} expr=v4636[32] }
        di      = { defs={} expr=v4637[32] }
        es      = { defs={} expr=v4638[16] }
        cs      = { defs={} expr=v4639[16] }
        ss      = { defs={} expr=v4640[16] }
        ds      = { defs={} expr=v4641[16] }
        fs      = { defs={} expr=v4642[16] }
        gs      = { defs={} expr=v4643[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4645[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4647[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) 1[33]))))) }
        ?5      = { defs={} expr=v4649[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
        tf      = { defs={} expr=v4652[1] }
        if      = { defs={} expr=v4653[1] }
        df      = { defs={} expr=v4654[1] }
        of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v4656[1] }
        iopl1   = { defs={} expr=v4657[1] }
        nt      = { defs={} expr=v4658[1] }
        ?15     = { defs={} expr=v4659[1] }
        rf      = { defs={} expr=v4660[1] }
        vm      = { defs={} expr=v4661[1] }
        ac      = { defs={} expr=v4662[1] }
        vif     = { defs={} expr=v4663[1] }
        vip     = { defs={} expr=v4664[1] }
        id      = { defs={} expr=v4665[1] }
        ?22     = { defs={} expr=v4666[1] }
        ?23     = { defs={} expr=v4667[1] }
        ?24     = { defs={} expr=v4668[1] }
        ?25     = { defs={} expr=v4669[1] }
        ?26     = { defs={} expr=v4670[1] }
        ?27     = { defs={} expr=v4671[1] }
        ?28     = { defs={} expr=v4672[1] }
        ?29     = { defs={} expr=v4673[1] }
        ?30     = { defs={} expr=v4674[1] }
        ?31     = { defs={} expr=v4675[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c} expr=0x08048493[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x0804848c} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x0804848c} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x0804848c} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x0804848c} expr=(add[32] (add[32] v4634[32] -4[32]) -8[32]) }
          value = { defs={0x0804848c} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={0x08048486} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={0x08048486} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={0x08048486} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={0x08048486} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4635[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4634[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4635[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4753[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4752[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4751[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4750[8] }
          flags = { rdonly }
0x8048493:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v4630[32] }
        cx      = { defs={} expr=v4631[32] }
        dx      = { defs={} expr=v4632[32] }
        bx      = { defs={} expr=v4633[32] }
        sp      = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4634[32] -4[32]) }
        si      = { defs={} expr=v4636[32] }
        di      = { defs={} expr=v4637[32] }
        es      = { defs={} expr=v4638[16] }
        cs      = { defs={} expr=v4639[16] }
        ss      = { defs={} expr=v4640[16] }
        ds      = { defs={} expr=v4641[16] }
        fs      = { defs={} expr=v4642[16] }
        gs      = { defs={} expr=v4643[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4634[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4645[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4647[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) 1[33]))))) }
        ?5      = { defs={} expr=v4649[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
        tf      = { defs={} expr=v4652[1] }
        if      = { defs={} expr=v4653[1] }
        df      = { defs={} expr=v4654[1] }
        of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v4656[1] }
        iopl1   = { defs={} expr=v4657[1] }
        nt      = { defs={} expr=v4658[1] }
        ?15     = { defs={} expr=v4659[1] }
        rf      = { defs={} expr=v4660[1] }
        vm      = { defs={} expr=v4661[1] }
        ac      = { defs={} expr=v4662[1] }
        vif     = { defs={} expr=v4663[1] }
        vip     = { defs={} expr=v4664[1] }
        id      = { defs={} expr=v4665[1] }
        ?22     = { defs={} expr=v4666[1] }
        ?23     = { defs={} expr=v4667[1] }
        ?24     = { defs={} expr=v4668[1] }
        ?25     = { defs={} expr=v4669[1] }
        ?26     = { defs={} expr=v4670[1] }
        ?27     = { defs={} expr=v4671[1] }
        ?28     = { defs={} expr=v4672[1] }
        ?29     = { defs={} expr=v4673[1] }
        ?30     = { defs={} expr=v4674[1] }
        ?31     = { defs={} expr=v4675[1] }
        ip      = { defs={0x08048493} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c,0x08048493} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c,0x08048493} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c,0x08048493} expr=-124[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c,0x08048493} expr=-104[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={0x0804848c} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={0x0804848c} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4634[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={0x0804848c} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x0804848c} expr=(add[32] (add[32] v4634[32] -4[32]) -8[32]) }
          value = { defs={0x0804848c} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={0x08048486} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={0x08048486} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={0x08048486} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={0x08048486} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4750[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4751[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4752[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4753[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 3[32]) }
          value = { defs={0x08048480} expr=(extract[8] 24[32] 32[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 2[32]) }
          value = { defs={0x08048480} expr=(extract[8] 16[32] 24[32] v4635[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4634[32] -4[32]) 1[32]) }
          value = { defs={0x08048480} expr=(extract[8] 8[32] 16[32] v4635[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4634[32] -4[32]) }
          value = { defs={0x08048480} expr=(extract[8] 0[32] 8[32] v4635[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4753[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4752[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4751[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4750[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v4871[32] }
        cx      = { defs={} expr=v4872[32] }
        dx      = { defs={} expr=v4873[32] }
        bx      = { defs={} expr=v4874[32] }
        sp      = { defs={} expr=v4875[32] }
        bp      = { defs={} expr=v4876[32] }
        si      = { defs={} expr=v4877[32] }
        di      = { defs={} expr=v4878[32] }
        es      = { defs={} expr=v4879[16] }
        cs      = { defs={} expr=v4880[16] }
        ss      = { defs={} expr=v4881[16] }
        ds      = { defs={} expr=v4882[16] }
        fs      = { defs={} expr=v4883[16] }
        gs      = { defs={} expr=v4884[16] }
        cf      = { defs={} expr=v4885[1] }
        ?1      = { defs={} expr=v4886[1] }
        pf      = { defs={} expr=v4887[1] }
        ?3      = { defs={} expr=v4888[1] }
        af      = { defs={} expr=v4889[1] }
        ?5      = { defs={} expr=v4890[1] }
        zf      = { defs={} expr=v4891[1] }
        sf      = { defs={} expr=v4892[1] }
        tf      = { defs={} expr=v4893[1] }
        if      = { defs={} expr=v4894[1] }
        df      = { defs={} expr=v4895[1] }
        of      = { defs={} expr=v4896[1] }
        iopl0   = { defs={} expr=v4897[1] }
        iopl1   = { defs={} expr=v4898[1] }
        nt      = { defs={} expr=v4899[1] }
        ?15     = { defs={} expr=v4900[1] }
        rf      = { defs={} expr=v4901[1] }
        vm      = { defs={} expr=v4902[1] }
        ac      = { defs={} expr=v4903[1] }
        vif     = { defs={} expr=v4904[1] }
        vip     = { defs={} expr=v4905[1] }
        id      = { defs={} expr=v4906[1] }
        ?22     = { defs={} expr=v4907[1] }
        ?23     = { defs={} expr=v4908[1] }
        ?24     = { defs={} expr=v4909[1] }
        ?25     = { defs={} expr=v4910[1] }
        ?26     = { defs={} expr=v4911[1] }
        ?27     = { defs={} expr=v4912[1] }
        ?28     = { defs={} expr=v4913[1] }
        ?29     = { defs={} expr=v4914[1] }
        ?30     = { defs={} expr=v4915[1] }
        ?31     = { defs={} expr=v4916[1] }
        ip      = { defs={0x08048498} expr=0x0804849f[32] }
    memory:
        address = { defs={} expr=(add[32] v4875[32] 3[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4875[32] 2[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4875[32] 1[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={0x08048498} expr=v4875[32] }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
    init mem:
0x804849f:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v4871[32] }
        cx      = { defs={} expr=v4872[32] }
        dx      = { defs={} expr=v4873[32] }
        bx      = { defs={} expr=v4874[32] }
        sp      = { defs={0x0804849f} expr=(add[32] v4875[32] -4[32]) }
        bp      = { defs={} expr=v4876[32] }
        si      = { defs={} expr=v4877[32] }
        di      = { defs={} expr=v4878[32] }
        es      = { defs={} expr=v4879[16] }
        cs      = { defs={} expr=v4880[16] }
        ss      = { defs={} expr=v4881[16] }
        ds      = { defs={} expr=v4882[16] }
        fs      = { defs={} expr=v4883[16] }
        gs      = { defs={} expr=v4884[16] }
        cf      = { defs={} expr=v4885[1] }
        ?1      = { defs={} expr=v4886[1] }
        pf      = { defs={} expr=v4887[1] }
        ?3      = { defs={} expr=v4888[1] }
        af      = { defs={} expr=v4889[1] }
        ?5      = { defs={} expr=v4890[1] }
        zf      = { defs={} expr=v4891[1] }
        sf      = { defs={} expr=v4892[1] }
        tf      = { defs={} expr=v4893[1] }
        if      = { defs={} expr=v4894[1] }
        df      = { defs={} expr=v4895[1] }
        of      = { defs={} expr=v4896[1] }
        iopl0   = { defs={} expr=v4897[1] }
        iopl1   = { defs={} expr=v4898[1] }
        nt      = { defs={} expr=v4899[1] }
        ?15     = { defs={} expr=v4900[1] }
        rf      = { defs={} expr=v4901[1] }
        vm      = { defs={} expr=v4902[1] }
        ac      = { defs={} expr=v4903[1] }
        vif     = { defs={} expr=v4904[1] }
        vip     = { defs={} expr=v4905[1] }
        id      = { defs={} expr=v4906[1] }
        ?22     = { defs={} expr=v4907[1] }
        ?23     = { defs={} expr=v4908[1] }
        ?24     = { defs={} expr=v4909[1] }
        ?25     = { defs={} expr=v4910[1] }
        ?26     = { defs={} expr=v4911[1] }
        ?27     = { defs={} expr=v4912[1] }
        ?28     = { defs={} expr=v4913[1] }
        ?29     = { defs={} expr=v4914[1] }
        ?30     = { defs={} expr=v4915[1] }
        ?31     = { defs={} expr=v4916[1] }
        ip      = { defs={0x0804849f} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4875[32] -4[32]) 3[32]) }
          value = { defs={0x08048498,0x0804849f} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4875[32] -4[32]) 2[32]) }
          value = { defs={0x08048498,0x0804849f} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4875[32] -4[32]) 1[32]) }
          value = { defs={0x08048498,0x0804849f} expr=-124[8] }
          flags = { }
        address = { defs={0x0804849f} expr=(add[32] v4875[32] -4[32]) }
          value = { defs={0x08048498,0x0804849f} expr=-92[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4875[32] 3[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4875[32] 2[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4875[32] 1[32]) }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
        address = { defs={0x08048498} expr=v4875[32] }
          value = { defs={0x08048498} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484b0:push   ebp
    registers:
        ax      = { defs={} expr=v4986[32] }
        cx      = { defs={} expr=v4987[32] }
        dx      = { defs={} expr=v4988[32] }
        bx      = { defs={} expr=v4989[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v4990[32] -4[32]) }
        bp      = { defs={} expr=v4991[32] }
        si      = { defs={} expr=v4992[32] }
        di      = { defs={} expr=v4993[32] }
        es      = { defs={} expr=v4994[16] }
        cs      = { defs={} expr=v4995[16] }
        ss      = { defs={} expr=v4996[16] }
        ds      = { defs={} expr=v4997[16] }
        fs      = { defs={} expr=v4998[16] }
        gs      = { defs={} expr=v4999[16] }
        cf      = { defs={} expr=v5000[1] }
        ?1      = { defs={} expr=v5001[1] }
        pf      = { defs={} expr=v5002[1] }
        ?3      = { defs={} expr=v5003[1] }
        af      = { defs={} expr=v5004[1] }
        ?5      = { defs={} expr=v5005[1] }
        zf      = { defs={} expr=v5006[1] }
        sf      = { defs={} expr=v5007[1] }
        tf      = { defs={} expr=v5008[1] }
        if      = { defs={} expr=v5009[1] }
        df      = { defs={} expr=v5010[1] }
        of      = { defs={} expr=v5011[1] }
        iopl0   = { defs={} expr=v5012[1] }
        iopl1   = { defs={} expr=v5013[1] }
        nt      = { defs={} expr=v5014[1] }
        ?15     = { defs={} expr=v5015[1] }
        rf      = { defs={} expr=v5016[1] }
        vm      = { defs={} expr=v5017[1] }
        ac      = { defs={} expr=v5018[1] }
        vif     = { defs={} expr=v5019[1] }
        vip     = { defs={} expr=v5020[1] }
        id      = { defs={} expr=v5021[1] }
        ?22     = { defs={} expr=v5022[1] }
        ?23     = { defs={} expr=v5023[1] }
        ?24     = { defs={} expr=v5024[1] }
        ?25     = { defs={} expr=v5025[1] }
        ?26     = { defs={} expr=v5026[1] }
        ?27     = { defs={} expr=v5027[1] }
        ?28     = { defs={} expr=v5028[1] }
        ?29     = { defs={} expr=v5029[1] }
        ?30     = { defs={} expr=v5030[1] }
        ?31     = { defs={} expr=v5031[1] }
        ip      = { defs={0x080484b0} expr=0x080484b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v4991[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4990[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v4991[32]) }
          flags = { }
    init mem:
0x80484b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4986[32] }
        cx      = { defs={} expr=v4987[32] }
        dx      = { defs={} expr=v4988[32] }
        bx      = { defs={} expr=v4989[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v4990[32] -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4990[32] -4[32]) }
        si      = { defs={} expr=v4992[32] }
        di      = { defs={} expr=v4993[32] }
        es      = { defs={} expr=v4994[16] }
        cs      = { defs={} expr=v4995[16] }
        ss      = { defs={} expr=v4996[16] }
        ds      = { defs={} expr=v4997[16] }
        fs      = { defs={} expr=v4998[16] }
        gs      = { defs={} expr=v4999[16] }
        cf      = { defs={} expr=v5000[1] }
        ?1      = { defs={} expr=v5001[1] }
        pf      = { defs={} expr=v5002[1] }
        ?3      = { defs={} expr=v5003[1] }
        af      = { defs={} expr=v5004[1] }
        ?5      = { defs={} expr=v5005[1] }
        zf      = { defs={} expr=v5006[1] }
        sf      = { defs={} expr=v5007[1] }
        tf      = { defs={} expr=v5008[1] }
        if      = { defs={} expr=v5009[1] }
        df      = { defs={} expr=v5010[1] }
        of      = { defs={} expr=v5011[1] }
        iopl0   = { defs={} expr=v5012[1] }
        iopl1   = { defs={} expr=v5013[1] }
        nt      = { defs={} expr=v5014[1] }
        ?15     = { defs={} expr=v5015[1] }
        rf      = { defs={} expr=v5016[1] }
        vm      = { defs={} expr=v5017[1] }
        ac      = { defs={} expr=v5018[1] }
        vif     = { defs={} expr=v5019[1] }
        vip     = { defs={} expr=v5020[1] }
        id      = { defs={} expr=v5021[1] }
        ?22     = { defs={} expr=v5022[1] }
        ?23     = { defs={} expr=v5023[1] }
        ?24     = { defs={} expr=v5024[1] }
        ?25     = { defs={} expr=v5025[1] }
        ?26     = { defs={} expr=v5026[1] }
        ?27     = { defs={} expr=v5027[1] }
        ?28     = { defs={} expr=v5028[1] }
        ?29     = { defs={} expr=v5029[1] }
        ?30     = { defs={} expr=v5030[1] }
        ?31     = { defs={} expr=v5031[1] }
        ip      = { defs={0x080484b0,0x080484b1} expr=0x080484b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v4991[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4990[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v4991[32]) }
          flags = { }
    init mem:
0x80484b3:push   edi
    registers:
        ax      = { defs={} expr=v4986[32] }
        cx      = { defs={} expr=v4987[32] }
        dx      = { defs={} expr=v4988[32] }
        bx      = { defs={} expr=v4989[32] }
        sp      = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4990[32] -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4990[32] -4[32]) }
        si      = { defs={} expr=v4992[32] }
        di      = { defs={} expr=v4993[32] }
        es      = { defs={} expr=v4994[16] }
        cs      = { defs={} expr=v4995[16] }
        ss      = { defs={} expr=v4996[16] }
        ds      = { defs={} expr=v4997[16] }
        fs      = { defs={} expr=v4998[16] }
        gs      = { defs={} expr=v4999[16] }
        cf      = { defs={} expr=v5000[1] }
        ?1      = { defs={} expr=v5001[1] }
        pf      = { defs={} expr=v5002[1] }
        ?3      = { defs={} expr=v5003[1] }
        af      = { defs={} expr=v5004[1] }
        ?5      = { defs={} expr=v5005[1] }
        zf      = { defs={} expr=v5006[1] }
        sf      = { defs={} expr=v5007[1] }
        tf      = { defs={} expr=v5008[1] }
        if      = { defs={} expr=v5009[1] }
        df      = { defs={} expr=v5010[1] }
        of      = { defs={} expr=v5011[1] }
        iopl0   = { defs={} expr=v5012[1] }
        iopl1   = { defs={} expr=v5013[1] }
        nt      = { defs={} expr=v5014[1] }
        ?15     = { defs={} expr=v5015[1] }
        rf      = { defs={} expr=v5016[1] }
        vm      = { defs={} expr=v5017[1] }
        ac      = { defs={} expr=v5018[1] }
        vif     = { defs={} expr=v5019[1] }
        vip     = { defs={} expr=v5020[1] }
        id      = { defs={} expr=v5021[1] }
        ?22     = { defs={} expr=v5022[1] }
        ?23     = { defs={} expr=v5023[1] }
        ?24     = { defs={} expr=v5024[1] }
        ?25     = { defs={} expr=v5025[1] }
        ?26     = { defs={} expr=v5026[1] }
        ?27     = { defs={} expr=v5027[1] }
        ?28     = { defs={} expr=v5028[1] }
        ?29     = { defs={} expr=v5029[1] }
        ?30     = { defs={} expr=v5030[1] }
        ?31     = { defs={} expr=v5031[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3} expr=0x080484b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 24[32] 32[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 16[32] 24[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 8[32] 16[32] v4993[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4990[32] -4[32]) -4[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 0[32] 8[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v4991[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4990[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v4991[32]) }
          flags = { }
    init mem:
0x80484b4:push   esi
    registers:
        ax      = { defs={} expr=v4986[32] }
        cx      = { defs={} expr=v4987[32] }
        dx      = { defs={} expr=v4988[32] }
        bx      = { defs={} expr=v4989[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4990[32] -4[32]) }
        si      = { defs={} expr=v4992[32] }
        di      = { defs={} expr=v4993[32] }
        es      = { defs={} expr=v4994[16] }
        cs      = { defs={} expr=v4995[16] }
        ss      = { defs={} expr=v4996[16] }
        ds      = { defs={} expr=v4997[16] }
        fs      = { defs={} expr=v4998[16] }
        gs      = { defs={} expr=v4999[16] }
        cf      = { defs={} expr=v5000[1] }
        ?1      = { defs={} expr=v5001[1] }
        pf      = { defs={} expr=v5002[1] }
        ?3      = { defs={} expr=v5003[1] }
        af      = { defs={} expr=v5004[1] }
        ?5      = { defs={} expr=v5005[1] }
        zf      = { defs={} expr=v5006[1] }
        sf      = { defs={} expr=v5007[1] }
        tf      = { defs={} expr=v5008[1] }
        if      = { defs={} expr=v5009[1] }
        df      = { defs={} expr=v5010[1] }
        of      = { defs={} expr=v5011[1] }
        iopl0   = { defs={} expr=v5012[1] }
        iopl1   = { defs={} expr=v5013[1] }
        nt      = { defs={} expr=v5014[1] }
        ?15     = { defs={} expr=v5015[1] }
        rf      = { defs={} expr=v5016[1] }
        vm      = { defs={} expr=v5017[1] }
        ac      = { defs={} expr=v5018[1] }
        vif     = { defs={} expr=v5019[1] }
        vip     = { defs={} expr=v5020[1] }
        id      = { defs={} expr=v5021[1] }
        ?22     = { defs={} expr=v5022[1] }
        ?23     = { defs={} expr=v5023[1] }
        ?24     = { defs={} expr=v5024[1] }
        ?25     = { defs={} expr=v5025[1] }
        ?26     = { defs={} expr=v5026[1] }
        ?27     = { defs={} expr=v5027[1] }
        ?28     = { defs={} expr=v5028[1] }
        ?29     = { defs={} expr=v5029[1] }
        ?30     = { defs={} expr=v5030[1] }
        ?31     = { defs={} expr=v5031[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4} expr=0x080484b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 24[32] 32[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 16[32] 24[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 8[32] 16[32] v4992[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 0[32] 8[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 24[32] 32[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 16[32] 24[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 8[32] 16[32] v4993[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4990[32] -4[32]) -4[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 0[32] 8[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v4991[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4990[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v4991[32]) }
          flags = { }
    init mem:
0x80484b5:push   ebx
    registers:
        ax      = { defs={} expr=v4986[32] }
        cx      = { defs={} expr=v4987[32] }
        dx      = { defs={} expr=v4988[32] }
        bx      = { defs={} expr=v4989[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4990[32] -4[32]) }
        si      = { defs={} expr=v4992[32] }
        di      = { defs={} expr=v4993[32] }
        es      = { defs={} expr=v4994[16] }
        cs      = { defs={} expr=v4995[16] }
        ss      = { defs={} expr=v4996[16] }
        ds      = { defs={} expr=v4997[16] }
        fs      = { defs={} expr=v4998[16] }
        gs      = { defs={} expr=v4999[16] }
        cf      = { defs={} expr=v5000[1] }
        ?1      = { defs={} expr=v5001[1] }
        pf      = { defs={} expr=v5002[1] }
        ?3      = { defs={} expr=v5003[1] }
        af      = { defs={} expr=v5004[1] }
        ?5      = { defs={} expr=v5005[1] }
        zf      = { defs={} expr=v5006[1] }
        sf      = { defs={} expr=v5007[1] }
        tf      = { defs={} expr=v5008[1] }
        if      = { defs={} expr=v5009[1] }
        df      = { defs={} expr=v5010[1] }
        of      = { defs={} expr=v5011[1] }
        iopl0   = { defs={} expr=v5012[1] }
        iopl1   = { defs={} expr=v5013[1] }
        nt      = { defs={} expr=v5014[1] }
        ?15     = { defs={} expr=v5015[1] }
        rf      = { defs={} expr=v5016[1] }
        vm      = { defs={} expr=v5017[1] }
        ac      = { defs={} expr=v5018[1] }
        vif     = { defs={} expr=v5019[1] }
        vip     = { defs={} expr=v5020[1] }
        id      = { defs={} expr=v5021[1] }
        ?22     = { defs={} expr=v5022[1] }
        ?23     = { defs={} expr=v5023[1] }
        ?24     = { defs={} expr=v5024[1] }
        ?25     = { defs={} expr=v5025[1] }
        ?26     = { defs={} expr=v5026[1] }
        ?27     = { defs={} expr=v5027[1] }
        ?28     = { defs={} expr=v5028[1] }
        ?29     = { defs={} expr=v5029[1] }
        ?30     = { defs={} expr=v5030[1] }
        ?31     = { defs={} expr=v5031[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5} expr=0x080484b6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 24[32] 32[32] v4989[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 16[32] 24[32] v4989[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 8[32] 16[32] v4989[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 0[32] 8[32] v4989[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 24[32] 32[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 16[32] 24[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 8[32] 16[32] v4992[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 0[32] 8[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 24[32] 32[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 16[32] 24[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 8[32] 16[32] v4993[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4990[32] -4[32]) -4[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 0[32] 8[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v4991[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4990[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v4991[32]) }
          flags = { }
    init mem:
0x80484b6:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v4986[32] }
        cx      = { defs={} expr=v4987[32] }
        dx      = { defs={} expr=v4988[32] }
        bx      = { defs={} expr=v4989[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4990[32] -4[32]) }
        si      = { defs={} expr=v4992[32] }
        di      = { defs={} expr=v4993[32] }
        es      = { defs={} expr=v4994[16] }
        cs      = { defs={} expr=v4995[16] }
        ss      = { defs={} expr=v4996[16] }
        ds      = { defs={} expr=v4997[16] }
        fs      = { defs={} expr=v4998[16] }
        gs      = { defs={} expr=v4999[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5001[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5003[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5005[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5008[1] }
        if      = { defs={} expr=v5009[1] }
        df      = { defs={} expr=v5010[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5012[1] }
        iopl1   = { defs={} expr=v5013[1] }
        nt      = { defs={} expr=v5014[1] }
        ?15     = { defs={} expr=v5015[1] }
        rf      = { defs={} expr=v5016[1] }
        vm      = { defs={} expr=v5017[1] }
        ac      = { defs={} expr=v5018[1] }
        vif     = { defs={} expr=v5019[1] }
        vip     = { defs={} expr=v5020[1] }
        id      = { defs={} expr=v5021[1] }
        ?22     = { defs={} expr=v5022[1] }
        ?23     = { defs={} expr=v5023[1] }
        ?24     = { defs={} expr=v5024[1] }
        ?25     = { defs={} expr=v5025[1] }
        ?26     = { defs={} expr=v5026[1] }
        ?27     = { defs={} expr=v5027[1] }
        ?28     = { defs={} expr=v5028[1] }
        ?29     = { defs={} expr=v5029[1] }
        ?30     = { defs={} expr=v5030[1] }
        ?31     = { defs={} expr=v5031[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=0x080484b9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 24[32] 32[32] v4989[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 16[32] 24[32] v4989[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 8[32] 16[32] v4989[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 0[32] 8[32] v4989[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 24[32] 32[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 16[32] 24[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 8[32] 16[32] v4992[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 0[32] 8[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 24[32] 32[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 16[32] 24[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 8[32] 16[32] v4993[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4990[32] -4[32]) -4[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 0[32] 8[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v4991[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4990[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v4991[32]) }
          flags = { }
    init mem:
0x80484b9:call   0x080484be<<Insn>>
    registers:
        ax      = { defs={} expr=v4986[32] }
        cx      = { defs={} expr=v4987[32] }
        dx      = { defs={} expr=v4988[32] }
        bx      = { defs={} expr=v4989[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4990[32] -4[32]) }
        si      = { defs={} expr=v4992[32] }
        di      = { defs={} expr=v4993[32] }
        es      = { defs={} expr=v4994[16] }
        cs      = { defs={} expr=v4995[16] }
        ss      = { defs={} expr=v4996[16] }
        ds      = { defs={} expr=v4997[16] }
        fs      = { defs={} expr=v4998[16] }
        gs      = { defs={} expr=v4999[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5001[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5003[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5005[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5008[1] }
        if      = { defs={} expr=v5009[1] }
        df      = { defs={} expr=v5010[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5012[1] }
        iopl1   = { defs={} expr=v5013[1] }
        nt      = { defs={} expr=v5014[1] }
        ?15     = { defs={} expr=v5015[1] }
        rf      = { defs={} expr=v5016[1] }
        vm      = { defs={} expr=v5017[1] }
        ac      = { defs={} expr=v5018[1] }
        vif     = { defs={} expr=v5019[1] }
        vip     = { defs={} expr=v5020[1] }
        id      = { defs={} expr=v5021[1] }
        ?22     = { defs={} expr=v5022[1] }
        ?23     = { defs={} expr=v5023[1] }
        ?24     = { defs={} expr=v5024[1] }
        ?25     = { defs={} expr=v5025[1] }
        ?26     = { defs={} expr=v5026[1] }
        ?27     = { defs={} expr=v5027[1] }
        ?28     = { defs={} expr=v5028[1] }
        ?29     = { defs={} expr=v5029[1] }
        ?30     = { defs={} expr=v5030[1] }
        ?31     = { defs={} expr=v5031[1] }
        ip      = { defs={0x080484b9} expr=0x080484be[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=-124[8] }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=-66[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 24[32] 32[32] v4989[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 16[32] 24[32] v4989[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 8[32] 16[32] v4989[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b5} expr=(extract[8] 0[32] 8[32] v4989[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 24[32] 32[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 16[32] 24[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 8[32] 16[32] v4992[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080484b4} expr=(extract[8] 0[32] 8[32] v4992[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 24[32] 32[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 16[32] 24[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4990[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 8[32] 16[32] v4993[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4990[32] -4[32]) -4[32]) }
          value = { defs={0x080484b3} expr=(extract[8] 0[32] 8[32] v4993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 3[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 24[32] 32[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 2[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 16[32] 24[32] v4991[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4990[32] -4[32]) 1[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 8[32] 16[32] v4991[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4990[32] -4[32]) }
          value = { defs={0x080484b0} expr=(extract[8] 0[32] 8[32] v4991[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484be:pop    ebx
    registers:
        ax      = { defs={} expr=v5194[32] }
        cx      = { defs={} expr=v5195[32] }
        dx      = { defs={} expr=v5196[32] }
        bx      = { defs={0x080484be} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) }
        sp      = { defs={0x080484be} expr=(add[32] v5198[32] 4[32]) }
        bp      = { defs={} expr=v5199[32] }
        si      = { defs={} expr=v5200[32] }
        di      = { defs={} expr=v5201[32] }
        es      = { defs={} expr=v5202[16] }
        cs      = { defs={} expr=v5203[16] }
        ss      = { defs={} expr=v5204[16] }
        ds      = { defs={} expr=v5205[16] }
        fs      = { defs={} expr=v5206[16] }
        gs      = { defs={} expr=v5207[16] }
        cf      = { defs={} expr=v5208[1] }
        ?1      = { defs={} expr=v5209[1] }
        pf      = { defs={} expr=v5210[1] }
        ?3      = { defs={} expr=v5211[1] }
        af      = { defs={} expr=v5212[1] }
        ?5      = { defs={} expr=v5213[1] }
        zf      = { defs={} expr=v5214[1] }
        sf      = { defs={} expr=v5215[1] }
        tf      = { defs={} expr=v5216[1] }
        if      = { defs={} expr=v5217[1] }
        df      = { defs={} expr=v5218[1] }
        of      = { defs={} expr=v5219[1] }
        iopl0   = { defs={} expr=v5220[1] }
        iopl1   = { defs={} expr=v5221[1] }
        nt      = { defs={} expr=v5222[1] }
        ?15     = { defs={} expr=v5223[1] }
        rf      = { defs={} expr=v5224[1] }
        vm      = { defs={} expr=v5225[1] }
        ac      = { defs={} expr=v5226[1] }
        vif     = { defs={} expr=v5227[1] }
        vip     = { defs={} expr=v5228[1] }
        id      = { defs={} expr=v5229[1] }
        ?22     = { defs={} expr=v5230[1] }
        ?23     = { defs={} expr=v5231[1] }
        ?24     = { defs={} expr=v5232[1] }
        ?25     = { defs={} expr=v5233[1] }
        ?26     = { defs={} expr=v5234[1] }
        ?27     = { defs={} expr=v5235[1] }
        ?28     = { defs={} expr=v5236[1] }
        ?29     = { defs={} expr=v5237[1] }
        ?30     = { defs={} expr=v5238[1] }
        ?31     = { defs={} expr=v5239[1] }
        ip      = { defs={0x080484be} expr=0x080484bf[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5198[32] 3[32]) }
          value = { defs={} expr=v5252[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5198[32] 2[32]) }
          value = { defs={} expr=v5251[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5198[32] 1[32]) }
          value = { defs={} expr=v5250[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5198[32] }
          value = { defs={} expr=v5249[8] }
          flags = { rdonly }
0x80484bf:add    ebx, 0x0000120a
    registers:
        ax      = { defs={} expr=v5194[32] }
        cx      = { defs={} expr=v5195[32] }
        dx      = { defs={} expr=v5196[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]) }
        sp      = { defs={0x080484be} expr=(add[32] v5198[32] 4[32]) }
        bp      = { defs={} expr=v5199[32] }
        si      = { defs={} expr=v5200[32] }
        di      = { defs={} expr=v5201[32] }
        es      = { defs={} expr=v5202[16] }
        cs      = { defs={} expr=v5203[16] }
        ss      = { defs={} expr=v5204[16] }
        ds      = { defs={} expr=v5205[16] }
        fs      = { defs={} expr=v5206[16] }
        gs      = { defs={} expr=v5207[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v5209[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v5211[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v5213[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32])) }
        tf      = { defs={} expr=v5216[1] }
        if      = { defs={} expr=v5217[1] }
        df      = { defs={} expr=v5218[1] }
        of      = { defs={0x080484be,0x080484bf} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) 4618[33])))))) }
        iopl0   = { defs={} expr=v5220[1] }
        iopl1   = { defs={} expr=v5221[1] }
        nt      = { defs={} expr=v5222[1] }
        ?15     = { defs={} expr=v5223[1] }
        rf      = { defs={} expr=v5224[1] }
        vm      = { defs={} expr=v5225[1] }
        ac      = { defs={} expr=v5226[1] }
        vif     = { defs={} expr=v5227[1] }
        vip     = { defs={} expr=v5228[1] }
        id      = { defs={} expr=v5229[1] }
        ?22     = { defs={} expr=v5230[1] }
        ?23     = { defs={} expr=v5231[1] }
        ?24     = { defs={} expr=v5232[1] }
        ?25     = { defs={} expr=v5233[1] }
        ?26     = { defs={} expr=v5234[1] }
        ?27     = { defs={} expr=v5235[1] }
        ?28     = { defs={} expr=v5236[1] }
        ?29     = { defs={} expr=v5237[1] }
        ?30     = { defs={} expr=v5238[1] }
        ?31     = { defs={} expr=v5239[1] }
        ip      = { defs={0x080484be,0x080484bf} expr=0x080484c5[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5198[32] 3[32]) }
          value = { defs={} expr=v5252[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5198[32] 2[32]) }
          value = { defs={} expr=v5251[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5198[32] 1[32]) }
          value = { defs={} expr=v5250[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5198[32] }
          value = { defs={} expr=v5249[8] }
          flags = { rdonly }
0x80484c5:call   0x080482c8<_init>
    registers:
        ax      = { defs={} expr=v5194[32] }
        cx      = { defs={} expr=v5195[32] }
        dx      = { defs={} expr=v5196[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]) }
        sp      = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v5198[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v5199[32] }
        si      = { defs={} expr=v5200[32] }
        di      = { defs={} expr=v5201[32] }
        es      = { defs={} expr=v5202[16] }
        cs      = { defs={} expr=v5203[16] }
        ss      = { defs={} expr=v5204[16] }
        ds      = { defs={} expr=v5205[16] }
        fs      = { defs={} expr=v5206[16] }
        gs      = { defs={} expr=v5207[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v5209[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v5211[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v5213[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8]))) 4618[32])) }
        tf      = { defs={} expr=v5216[1] }
        if      = { defs={} expr=v5217[1] }
        df      = { defs={} expr=v5218[1] }
        of      = { defs={0x080484be,0x080484bf} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5249[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5250[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5251[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5252[8])))) 4618[33])))))) }
        iopl0   = { defs={} expr=v5220[1] }
        iopl1   = { defs={} expr=v5221[1] }
        nt      = { defs={} expr=v5222[1] }
        ?15     = { defs={} expr=v5223[1] }
        rf      = { defs={} expr=v5224[1] }
        vm      = { defs={} expr=v5225[1] }
        ac      = { defs={} expr=v5226[1] }
        vif     = { defs={} expr=v5227[1] }
        vip     = { defs={} expr=v5228[1] }
        id      = { defs={} expr=v5229[1] }
        ?22     = { defs={} expr=v5230[1] }
        ?23     = { defs={} expr=v5231[1] }
        ?24     = { defs={} expr=v5232[1] }
        ?25     = { defs={} expr=v5233[1] }
        ?26     = { defs={} expr=v5234[1] }
        ?27     = { defs={} expr=v5235[1] }
        ?28     = { defs={} expr=v5236[1] }
        ?29     = { defs={} expr=v5237[1] }
        ?30     = { defs={} expr=v5238[1] }
        ?31     = { defs={} expr=v5239[1] }
        ip      = { defs={0x080484c5} expr=0x080482c8[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5198[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={0x080484be,0x080484bf,0x080484c5} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5198[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={0x080484be,0x080484bf,0x080484c5} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5198[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={0x080484be,0x080484bf,0x080484c5} expr=-124[8] }
          flags = { }
        address = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v5198[32] 4[32]) -4[32]) }
          value = { defs={0x080484be,0x080484bf,0x080484c5} expr=-54[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5198[32] 3[32]) }
          value = { defs={} expr=v5252[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5198[32] 2[32]) }
          value = { defs={} expr=v5251[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5198[32] 1[32]) }
          value = { defs={} expr=v5250[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5198[32] }
          value = { defs={} expr=v5249[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v5369[32] -224[32]) }
        cx      = { defs={} expr=v5367[32] }
        dx      = { defs={} expr=v5368[32] }
        bx      = { defs={} expr=v5369[32] }
        sp      = { defs={} expr=v5370[32] }
        bp      = { defs={} expr=v5371[32] }
        si      = { defs={} expr=v5372[32] }
        di      = { defs={} expr=v5373[32] }
        es      = { defs={} expr=v5374[16] }
        cs      = { defs={} expr=v5375[16] }
        ss      = { defs={} expr=v5376[16] }
        ds      = { defs={} expr=v5377[16] }
        fs      = { defs={} expr=v5378[16] }
        gs      = { defs={} expr=v5379[16] }
        cf      = { defs={} expr=v5380[1] }
        ?1      = { defs={} expr=v5381[1] }
        pf      = { defs={} expr=v5382[1] }
        ?3      = { defs={} expr=v5383[1] }
        af      = { defs={} expr=v5384[1] }
        ?5      = { defs={} expr=v5385[1] }
        zf      = { defs={} expr=v5386[1] }
        sf      = { defs={} expr=v5387[1] }
        tf      = { defs={} expr=v5388[1] }
        if      = { defs={} expr=v5389[1] }
        df      = { defs={} expr=v5390[1] }
        of      = { defs={} expr=v5391[1] }
        iopl0   = { defs={} expr=v5392[1] }
        iopl1   = { defs={} expr=v5393[1] }
        nt      = { defs={} expr=v5394[1] }
        ?15     = { defs={} expr=v5395[1] }
        rf      = { defs={} expr=v5396[1] }
        vm      = { defs={} expr=v5397[1] }
        ac      = { defs={} expr=v5398[1] }
        vif     = { defs={} expr=v5399[1] }
        vip     = { defs={} expr=v5400[1] }
        id      = { defs={} expr=v5401[1] }
        ?22     = { defs={} expr=v5402[1] }
        ?23     = { defs={} expr=v5403[1] }
        ?24     = { defs={} expr=v5404[1] }
        ?25     = { defs={} expr=v5405[1] }
        ?26     = { defs={} expr=v5406[1] }
        ?27     = { defs={} expr=v5407[1] }
        ?28     = { defs={} expr=v5408[1] }
        ?29     = { defs={} expr=v5409[1] }
        ?30     = { defs={} expr=v5410[1] }
        ?31     = { defs={} expr=v5411[1] }
        ip      = { defs={0x080484ca} expr=0x080484d0[32] }
    memory:
    init mem:
0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v5369[32] -224[32]) }
        cx      = { defs={} expr=v5367[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5369[32] -224[32]) }
        bx      = { defs={} expr=v5369[32] }
        sp      = { defs={} expr=v5370[32] }
        bp      = { defs={} expr=v5371[32] }
        si      = { defs={} expr=v5372[32] }
        di      = { defs={} expr=v5373[32] }
        es      = { defs={} expr=v5374[16] }
        cs      = { defs={} expr=v5375[16] }
        ss      = { defs={} expr=v5376[16] }
        ds      = { defs={} expr=v5377[16] }
        fs      = { defs={} expr=v5378[16] }
        gs      = { defs={} expr=v5379[16] }
        cf      = { defs={} expr=v5380[1] }
        ?1      = { defs={} expr=v5381[1] }
        pf      = { defs={} expr=v5382[1] }
        ?3      = { defs={} expr=v5383[1] }
        af      = { defs={} expr=v5384[1] }
        ?5      = { defs={} expr=v5385[1] }
        zf      = { defs={} expr=v5386[1] }
        sf      = { defs={} expr=v5387[1] }
        tf      = { defs={} expr=v5388[1] }
        if      = { defs={} expr=v5389[1] }
        df      = { defs={} expr=v5390[1] }
        of      = { defs={} expr=v5391[1] }
        iopl0   = { defs={} expr=v5392[1] }
        iopl1   = { defs={} expr=v5393[1] }
        nt      = { defs={} expr=v5394[1] }
        ?15     = { defs={} expr=v5395[1] }
        rf      = { defs={} expr=v5396[1] }
        vm      = { defs={} expr=v5397[1] }
        ac      = { defs={} expr=v5398[1] }
        vif     = { defs={} expr=v5399[1] }
        vip     = { defs={} expr=v5400[1] }
        id      = { defs={} expr=v5401[1] }
        ?22     = { defs={} expr=v5402[1] }
        ?23     = { defs={} expr=v5403[1] }
        ?24     = { defs={} expr=v5404[1] }
        ?25     = { defs={} expr=v5405[1] }
        ?26     = { defs={} expr=v5406[1] }
        ?27     = { defs={} expr=v5407[1] }
        ?28     = { defs={} expr=v5408[1] }
        ?29     = { defs={} expr=v5409[1] }
        ?30     = { defs={} expr=v5410[1] }
        ?31     = { defs={} expr=v5411[1] }
        ip      = { defs={0x080484ca,0x080484d0} expr=0x080484d6[32] }
    memory:
    init mem:
0x80484d6:sub    eax, edx
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])) }
        cx      = { defs={} expr=v5367[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5369[32] -224[32]) }
        bx      = { defs={} expr=v5369[32] }
        sp      = { defs={} expr=v5370[32] }
        bp      = { defs={} expr=v5371[32] }
        si      = { defs={} expr=v5372[32] }
        di      = { defs={} expr=v5373[32] }
        es      = { defs={} expr=v5374[16] }
        cs      = { defs={} expr=v5375[16] }
        ss      = { defs={} expr=v5376[16] }
        ds      = { defs={} expr=v5377[16] }
        fs      = { defs={} expr=v5378[16] }
        gs      = { defs={} expr=v5379[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5369[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5369[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5369[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5369[32] -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v5381[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v5383[1] }
        af      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5369[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5369[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5369[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5369[32] -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v5385[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(zerop[1] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))) }
        tf      = { defs={} expr=v5388[1] }
        if      = { defs={} expr=v5389[1] }
        df      = { defs={} expr=v5390[1] }
        of      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5369[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5369[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5369[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5369[32] -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5369[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5369[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5369[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5369[32] -224[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v5392[1] }
        iopl1   = { defs={} expr=v5393[1] }
        nt      = { defs={} expr=v5394[1] }
        ?15     = { defs={} expr=v5395[1] }
        rf      = { defs={} expr=v5396[1] }
        vm      = { defs={} expr=v5397[1] }
        ac      = { defs={} expr=v5398[1] }
        vif     = { defs={} expr=v5399[1] }
        vip     = { defs={} expr=v5400[1] }
        id      = { defs={} expr=v5401[1] }
        ?22     = { defs={} expr=v5402[1] }
        ?23     = { defs={} expr=v5403[1] }
        ?24     = { defs={} expr=v5404[1] }
        ?25     = { defs={} expr=v5405[1] }
        ?26     = { defs={} expr=v5406[1] }
        ?27     = { defs={} expr=v5407[1] }
        ?28     = { defs={} expr=v5408[1] }
        ?29     = { defs={} expr=v5409[1] }
        ?30     = { defs={} expr=v5410[1] }
        ?31     = { defs={} expr=v5411[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=0x080484d8[32] }
    memory:
    init mem:
0x80484d8:sar    eax, 0x02
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5367[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5369[32] -224[32]) }
        bx      = { defs={} expr=v5369[32] }
        sp      = { defs={} expr=v5370[32] }
        bp      = { defs={} expr=v5371[32] }
        si      = { defs={} expr=v5372[32] }
        di      = { defs={} expr=v5373[32] }
        es      = { defs={} expr=v5374[16] }
        cs      = { defs={} expr=v5375[16] }
        ss      = { defs={} expr=v5376[16] }
        ds      = { defs={} expr=v5377[16] }
        fs      = { defs={} expr=v5378[16] }
        gs      = { defs={} expr=v5379[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5381[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v5383[1] }
        af      = { defs={0x080484d8} expr=v5493[1] }
        ?5      = { defs={} expr=v5385[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5388[1] }
        if      = { defs={} expr=v5389[1] }
        df      = { defs={} expr=v5390[1] }
        of      = { defs={0x080484d8} expr=v5508[1] }
        iopl0   = { defs={} expr=v5392[1] }
        iopl1   = { defs={} expr=v5393[1] }
        nt      = { defs={} expr=v5394[1] }
        ?15     = { defs={} expr=v5395[1] }
        rf      = { defs={} expr=v5396[1] }
        vm      = { defs={} expr=v5397[1] }
        ac      = { defs={} expr=v5398[1] }
        vif     = { defs={} expr=v5399[1] }
        vip     = { defs={} expr=v5400[1] }
        id      = { defs={} expr=v5401[1] }
        ?22     = { defs={} expr=v5402[1] }
        ?23     = { defs={} expr=v5403[1] }
        ?24     = { defs={} expr=v5404[1] }
        ?25     = { defs={} expr=v5405[1] }
        ?26     = { defs={} expr=v5406[1] }
        ?27     = { defs={} expr=v5407[1] }
        ?28     = { defs={} expr=v5408[1] }
        ?29     = { defs={} expr=v5409[1] }
        ?30     = { defs={} expr=v5410[1] }
        ?31     = { defs={} expr=v5411[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=0x080484db[32] }
    memory:
    init mem:
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5367[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5369[32] -224[32]) }
        bx      = { defs={} expr=v5369[32] }
        sp      = { defs={} expr=v5370[32] }
        bp      = { defs={} expr=v5371[32] }
        si      = { defs={} expr=v5372[32] }
        di      = { defs={} expr=v5373[32] }
        es      = { defs={} expr=v5374[16] }
        cs      = { defs={} expr=v5375[16] }
        ss      = { defs={} expr=v5376[16] }
        ds      = { defs={} expr=v5377[16] }
        fs      = { defs={} expr=v5378[16] }
        gs      = { defs={} expr=v5379[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5381[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v5383[1] }
        af      = { defs={0x080484d8} expr=v5493[1] }
        ?5      = { defs={} expr=v5385[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5388[1] }
        if      = { defs={} expr=v5389[1] }
        df      = { defs={} expr=v5390[1] }
        of      = { defs={0x080484d8} expr=v5508[1] }
        iopl0   = { defs={} expr=v5392[1] }
        iopl1   = { defs={} expr=v5393[1] }
        nt      = { defs={} expr=v5394[1] }
        ?15     = { defs={} expr=v5395[1] }
        rf      = { defs={} expr=v5396[1] }
        vm      = { defs={} expr=v5397[1] }
        ac      = { defs={} expr=v5398[1] }
        vif     = { defs={} expr=v5399[1] }
        vip     = { defs={} expr=v5400[1] }
        id      = { defs={} expr=v5401[1] }
        ?22     = { defs={} expr=v5402[1] }
        ?23     = { defs={} expr=v5403[1] }
        ?24     = { defs={} expr=v5404[1] }
        ?25     = { defs={} expr=v5405[1] }
        ?26     = { defs={} expr=v5406[1] }
        ?27     = { defs={} expr=v5407[1] }
        ?28     = { defs={} expr=v5408[1] }
        ?29     = { defs={} expr=v5409[1] }
        ?30     = { defs={} expr=v5410[1] }
        ?31     = { defs={} expr=v5411[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=0x080484de[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5371[32] -16[32]) 3[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5371[32] -16[32]) 2[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5371[32] -16[32]) 1[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5371[32] -16[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484de:jne    0x080484f0<<StaticData@0x080484e8>+8>
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5367[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5369[32] -224[32]) }
        bx      = { defs={} expr=v5369[32] }
        sp      = { defs={} expr=v5370[32] }
        bp      = { defs={} expr=v5371[32] }
        si      = { defs={} expr=v5372[32] }
        di      = { defs={} expr=v5373[32] }
        es      = { defs={} expr=v5374[16] }
        cs      = { defs={} expr=v5375[16] }
        ss      = { defs={} expr=v5376[16] }
        ds      = { defs={} expr=v5377[16] }
        fs      = { defs={} expr=v5378[16] }
        gs      = { defs={} expr=v5379[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5381[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v5383[1] }
        af      = { defs={0x080484d8} expr=v5493[1] }
        ?5      = { defs={} expr=v5385[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5388[1] }
        if      = { defs={} expr=v5389[1] }
        df      = { defs={} expr=v5390[1] }
        of      = { defs={0x080484d8} expr=v5508[1] }
        iopl0   = { defs={} expr=v5392[1] }
        iopl1   = { defs={} expr=v5393[1] }
        nt      = { defs={} expr=v5394[1] }
        ?15     = { defs={} expr=v5395[1] }
        rf      = { defs={} expr=v5396[1] }
        vm      = { defs={} expr=v5397[1] }
        ac      = { defs={} expr=v5398[1] }
        vif     = { defs={} expr=v5399[1] }
        vip     = { defs={} expr=v5400[1] }
        id      = { defs={} expr=v5401[1] }
        ?22     = { defs={} expr=v5402[1] }
        ?23     = { defs={} expr=v5403[1] }
        ?24     = { defs={} expr=v5404[1] }
        ?25     = { defs={} expr=v5405[1] }
        ?26     = { defs={} expr=v5406[1] }
        ?27     = { defs={} expr=v5407[1] }
        ?28     = { defs={} expr=v5408[1] }
        ?29     = { defs={} expr=v5409[1] }
        ?30     = { defs={} expr=v5410[1] }
        ?31     = { defs={} expr=v5411[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de} expr=(ite[32] (invert[1] (zerop[1] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32]))))) 0x080484f0[32] 0x080484e0[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5371[32] -16[32]) 3[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5371[32] -16[32]) 2[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5371[32] -16[32]) 1[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5371[32] -16[32]) }
          value = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5369[32] -224[32]) (add[32] (invert[32] (add[32] v5369[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484e0:add    esp, 0x0c
    registers:
        ax      = { defs={} expr=v5611[32] }
        cx      = { defs={} expr=v5612[32] }
        dx      = { defs={} expr=v5613[32] }
        bx      = { defs={} expr=v5614[32] }
        sp      = { defs={0x080484e0} expr=(add[32] v5615[32] 12[32]) }
        bp      = { defs={} expr=v5616[32] }
        si      = { defs={} expr=v5617[32] }
        di      = { defs={} expr=v5618[32] }
        es      = { defs={} expr=v5619[16] }
        cs      = { defs={} expr=v5620[16] }
        ss      = { defs={} expr=v5621[16] }
        ds      = { defs={} expr=v5622[16] }
        fs      = { defs={} expr=v5623[16] }
        gs      = { defs={} expr=v5624[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5626[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5628[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5630[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5615[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5615[32] 12[32])) }
        tf      = { defs={} expr=v5633[1] }
        if      = { defs={} expr=v5634[1] }
        df      = { defs={} expr=v5635[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5637[1] }
        iopl1   = { defs={} expr=v5638[1] }
        nt      = { defs={} expr=v5639[1] }
        ?15     = { defs={} expr=v5640[1] }
        rf      = { defs={} expr=v5641[1] }
        vm      = { defs={} expr=v5642[1] }
        ac      = { defs={} expr=v5643[1] }
        vif     = { defs={} expr=v5644[1] }
        vip     = { defs={} expr=v5645[1] }
        id      = { defs={} expr=v5646[1] }
        ?22     = { defs={} expr=v5647[1] }
        ?23     = { defs={} expr=v5648[1] }
        ?24     = { defs={} expr=v5649[1] }
        ?25     = { defs={} expr=v5650[1] }
        ?26     = { defs={} expr=v5651[1] }
        ?27     = { defs={} expr=v5652[1] }
        ?28     = { defs={} expr=v5653[1] }
        ?29     = { defs={} expr=v5654[1] }
        ?30     = { defs={} expr=v5655[1] }
        ?31     = { defs={} expr=v5656[1] }
        ip      = { defs={0x080484e0} expr=0x080484e3[32] }
    memory:
    init mem:
0x80484e3:pop    ebx
    registers:
        ax      = { defs={} expr=v5611[32] }
        cx      = { defs={} expr=v5612[32] }
        dx      = { defs={} expr=v5613[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5717[8]))) }
        sp      = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v5615[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v5616[32] }
        si      = { defs={} expr=v5617[32] }
        di      = { defs={} expr=v5618[32] }
        es      = { defs={} expr=v5619[16] }
        cs      = { defs={} expr=v5620[16] }
        ss      = { defs={} expr=v5621[16] }
        ds      = { defs={} expr=v5622[16] }
        fs      = { defs={} expr=v5623[16] }
        gs      = { defs={} expr=v5624[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5626[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5628[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5630[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5615[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5615[32] 12[32])) }
        tf      = { defs={} expr=v5633[1] }
        if      = { defs={} expr=v5634[1] }
        df      = { defs={} expr=v5635[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5637[1] }
        iopl1   = { defs={} expr=v5638[1] }
        nt      = { defs={} expr=v5639[1] }
        ?15     = { defs={} expr=v5640[1] }
        rf      = { defs={} expr=v5641[1] }
        vm      = { defs={} expr=v5642[1] }
        ac      = { defs={} expr=v5643[1] }
        vif     = { defs={} expr=v5644[1] }
        vip     = { defs={} expr=v5645[1] }
        id      = { defs={} expr=v5646[1] }
        ?22     = { defs={} expr=v5647[1] }
        ?23     = { defs={} expr=v5648[1] }
        ?24     = { defs={} expr=v5649[1] }
        ?25     = { defs={} expr=v5650[1] }
        ?26     = { defs={} expr=v5651[1] }
        ?27     = { defs={} expr=v5652[1] }
        ?28     = { defs={} expr=v5653[1] }
        ?29     = { defs={} expr=v5654[1] }
        ?30     = { defs={} expr=v5655[1] }
        ?31     = { defs={} expr=v5656[1] }
        ip      = { defs={0x080484e0,0x080484e3} expr=0x080484e4[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5716[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5715[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5615[32] 12[32]) }
          value = { defs={} expr=v5714[8] }
          flags = { rdonly }
0x80484e4:pop    esi
    registers:
        ax      = { defs={} expr=v5611[32] }
        cx      = { defs={} expr=v5612[32] }
        dx      = { defs={} expr=v5613[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5717[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v5616[32] }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5731[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5732[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5733[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5734[8]))) }
        di      = { defs={} expr=v5618[32] }
        es      = { defs={} expr=v5619[16] }
        cs      = { defs={} expr=v5620[16] }
        ss      = { defs={} expr=v5621[16] }
        ds      = { defs={} expr=v5622[16] }
        fs      = { defs={} expr=v5623[16] }
        gs      = { defs={} expr=v5624[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5626[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5628[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5630[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5615[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5615[32] 12[32])) }
        tf      = { defs={} expr=v5633[1] }
        if      = { defs={} expr=v5634[1] }
        df      = { defs={} expr=v5635[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5637[1] }
        iopl1   = { defs={} expr=v5638[1] }
        nt      = { defs={} expr=v5639[1] }
        ?15     = { defs={} expr=v5640[1] }
        rf      = { defs={} expr=v5641[1] }
        vm      = { defs={} expr=v5642[1] }
        ac      = { defs={} expr=v5643[1] }
        vif     = { defs={} expr=v5644[1] }
        vip     = { defs={} expr=v5645[1] }
        id      = { defs={} expr=v5646[1] }
        ?22     = { defs={} expr=v5647[1] }
        ?23     = { defs={} expr=v5648[1] }
        ?24     = { defs={} expr=v5649[1] }
        ?25     = { defs={} expr=v5650[1] }
        ?26     = { defs={} expr=v5651[1] }
        ?27     = { defs={} expr=v5652[1] }
        ?28     = { defs={} expr=v5653[1] }
        ?29     = { defs={} expr=v5654[1] }
        ?30     = { defs={} expr=v5655[1] }
        ?31     = { defs={} expr=v5656[1] }
        ip      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=0x080484e5[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5734[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5733[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5732[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5615[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5731[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5716[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5715[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5615[32] 12[32]) }
          value = { defs={} expr=v5714[8] }
          flags = { rdonly }
0x80484e5:pop    edi
    registers:
        ax      = { defs={} expr=v5611[32] }
        cx      = { defs={} expr=v5612[32] }
        dx      = { defs={} expr=v5613[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5717[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v5616[32] }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5731[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5732[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5733[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5734[8]))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5748[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5749[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5750[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5751[8]))) }
        es      = { defs={} expr=v5619[16] }
        cs      = { defs={} expr=v5620[16] }
        ss      = { defs={} expr=v5621[16] }
        ds      = { defs={} expr=v5622[16] }
        fs      = { defs={} expr=v5623[16] }
        gs      = { defs={} expr=v5624[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5626[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5628[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5630[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5615[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5615[32] 12[32])) }
        tf      = { defs={} expr=v5633[1] }
        if      = { defs={} expr=v5634[1] }
        df      = { defs={} expr=v5635[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5637[1] }
        iopl1   = { defs={} expr=v5638[1] }
        nt      = { defs={} expr=v5639[1] }
        ?15     = { defs={} expr=v5640[1] }
        rf      = { defs={} expr=v5641[1] }
        vm      = { defs={} expr=v5642[1] }
        ac      = { defs={} expr=v5643[1] }
        vif     = { defs={} expr=v5644[1] }
        vip     = { defs={} expr=v5645[1] }
        id      = { defs={} expr=v5646[1] }
        ?22     = { defs={} expr=v5647[1] }
        ?23     = { defs={} expr=v5648[1] }
        ?24     = { defs={} expr=v5649[1] }
        ?25     = { defs={} expr=v5650[1] }
        ?26     = { defs={} expr=v5651[1] }
        ?27     = { defs={} expr=v5652[1] }
        ?28     = { defs={} expr=v5653[1] }
        ?29     = { defs={} expr=v5654[1] }
        ?30     = { defs={} expr=v5655[1] }
        ?31     = { defs={} expr=v5656[1] }
        ip      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=0x080484e6[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5751[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5750[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5749[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5748[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5734[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5733[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5732[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5615[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5731[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5716[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5715[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5615[32] 12[32]) }
          value = { defs={} expr=v5714[8] }
          flags = { rdonly }
0x80484e6:pop    ebp
    registers:
        ax      = { defs={} expr=v5611[32] }
        cx      = { defs={} expr=v5612[32] }
        dx      = { defs={} expr=v5613[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5717[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5765[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5766[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5767[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5768[8]))) }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5731[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5732[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5733[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5734[8]))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5748[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5749[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5750[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5751[8]))) }
        es      = { defs={} expr=v5619[16] }
        cs      = { defs={} expr=v5620[16] }
        ss      = { defs={} expr=v5621[16] }
        ds      = { defs={} expr=v5622[16] }
        fs      = { defs={} expr=v5623[16] }
        gs      = { defs={} expr=v5624[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5626[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5628[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5630[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5615[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5615[32] 12[32])) }
        tf      = { defs={} expr=v5633[1] }
        if      = { defs={} expr=v5634[1] }
        df      = { defs={} expr=v5635[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5637[1] }
        iopl1   = { defs={} expr=v5638[1] }
        nt      = { defs={} expr=v5639[1] }
        ?15     = { defs={} expr=v5640[1] }
        rf      = { defs={} expr=v5641[1] }
        vm      = { defs={} expr=v5642[1] }
        ac      = { defs={} expr=v5643[1] }
        vif     = { defs={} expr=v5644[1] }
        vip     = { defs={} expr=v5645[1] }
        id      = { defs={} expr=v5646[1] }
        ?22     = { defs={} expr=v5647[1] }
        ?23     = { defs={} expr=v5648[1] }
        ?24     = { defs={} expr=v5649[1] }
        ?25     = { defs={} expr=v5650[1] }
        ?26     = { defs={} expr=v5651[1] }
        ?27     = { defs={} expr=v5652[1] }
        ?28     = { defs={} expr=v5653[1] }
        ?29     = { defs={} expr=v5654[1] }
        ?30     = { defs={} expr=v5655[1] }
        ?31     = { defs={} expr=v5656[1] }
        ip      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=0x080484e7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5768[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5767[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5766[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5765[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5751[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5750[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5749[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5748[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5734[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5733[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5732[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5615[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5731[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5716[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5715[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5615[32] 12[32]) }
          value = { defs={} expr=v5714[8] }
          flags = { rdonly }
0x80484e7:ret    
    registers:
        ax      = { defs={} expr=v5611[32] }
        cx      = { defs={} expr=v5612[32] }
        dx      = { defs={} expr=v5613[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5717[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5765[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5766[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5767[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5768[8]))) }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5731[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5732[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5733[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5734[8]))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5748[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5749[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5750[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5751[8]))) }
        es      = { defs={} expr=v5619[16] }
        cs      = { defs={} expr=v5620[16] }
        ss      = { defs={} expr=v5621[16] }
        ds      = { defs={} expr=v5622[16] }
        fs      = { defs={} expr=v5623[16] }
        gs      = { defs={} expr=v5624[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5626[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5615[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5628[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5630[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5615[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5615[32] 12[32])) }
        tf      = { defs={} expr=v5633[1] }
        if      = { defs={} expr=v5634[1] }
        df      = { defs={} expr=v5635[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5615[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5615[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5637[1] }
        iopl1   = { defs={} expr=v5638[1] }
        nt      = { defs={} expr=v5639[1] }
        ?15     = { defs={} expr=v5640[1] }
        rf      = { defs={} expr=v5641[1] }
        vm      = { defs={} expr=v5642[1] }
        ac      = { defs={} expr=v5643[1] }
        vif     = { defs={} expr=v5644[1] }
        vip     = { defs={} expr=v5645[1] }
        id      = { defs={} expr=v5646[1] }
        ?22     = { defs={} expr=v5647[1] }
        ?23     = { defs={} expr=v5648[1] }
        ?24     = { defs={} expr=v5649[1] }
        ?25     = { defs={} expr=v5650[1] }
        ?26     = { defs={} expr=v5651[1] }
        ?27     = { defs={} expr=v5652[1] }
        ?28     = { defs={} expr=v5653[1] }
        ?29     = { defs={} expr=v5654[1] }
        ?30     = { defs={} expr=v5655[1] }
        ?31     = { defs={} expr=v5656[1] }
        ip      = { defs={0x080484e7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5782[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5783[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5784[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5785[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5785[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5784[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5783[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5782[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5768[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5767[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5766[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5765[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5751[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5750[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5749[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5748[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5734[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5733[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5615[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5732[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5615[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5731[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5716[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5615[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5715[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5615[32] 12[32]) }
          value = { defs={} expr=v5714[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048520:push   ebp
    registers:
        ax      = { defs={} expr=v5840[32] }
        cx      = { defs={} expr=v5841[32] }
        dx      = { defs={} expr=v5842[32] }
        bx      = { defs={} expr=v5843[32] }
        sp      = { defs={0x08048520} expr=(add[32] v5844[32] -4[32]) }
        bp      = { defs={} expr=v5845[32] }
        si      = { defs={} expr=v5846[32] }
        di      = { defs={} expr=v5847[32] }
        es      = { defs={} expr=v5848[16] }
        cs      = { defs={} expr=v5849[16] }
        ss      = { defs={} expr=v5850[16] }
        ds      = { defs={} expr=v5851[16] }
        fs      = { defs={} expr=v5852[16] }
        gs      = { defs={} expr=v5853[16] }
        cf      = { defs={} expr=v5854[1] }
        ?1      = { defs={} expr=v5855[1] }
        pf      = { defs={} expr=v5856[1] }
        ?3      = { defs={} expr=v5857[1] }
        af      = { defs={} expr=v5858[1] }
        ?5      = { defs={} expr=v5859[1] }
        zf      = { defs={} expr=v5860[1] }
        sf      = { defs={} expr=v5861[1] }
        tf      = { defs={} expr=v5862[1] }
        if      = { defs={} expr=v5863[1] }
        df      = { defs={} expr=v5864[1] }
        of      = { defs={} expr=v5865[1] }
        iopl0   = { defs={} expr=v5866[1] }
        iopl1   = { defs={} expr=v5867[1] }
        nt      = { defs={} expr=v5868[1] }
        ?15     = { defs={} expr=v5869[1] }
        rf      = { defs={} expr=v5870[1] }
        vm      = { defs={} expr=v5871[1] }
        ac      = { defs={} expr=v5872[1] }
        vif     = { defs={} expr=v5873[1] }
        vip     = { defs={} expr=v5874[1] }
        id      = { defs={} expr=v5875[1] }
        ?22     = { defs={} expr=v5876[1] }
        ?23     = { defs={} expr=v5877[1] }
        ?24     = { defs={} expr=v5878[1] }
        ?25     = { defs={} expr=v5879[1] }
        ?26     = { defs={} expr=v5880[1] }
        ?27     = { defs={} expr=v5881[1] }
        ?28     = { defs={} expr=v5882[1] }
        ?29     = { defs={} expr=v5883[1] }
        ?30     = { defs={} expr=v5884[1] }
        ?31     = { defs={} expr=v5885[1] }
        ip      = { defs={0x08048520} expr=0x08048521[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5845[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5844[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5845[32]) }
          flags = { }
    init mem:
0x8048521:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v5840[32] }
        cx      = { defs={} expr=v5841[32] }
        dx      = { defs={} expr=v5842[32] }
        bx      = { defs={} expr=v5843[32] }
        sp      = { defs={0x08048520} expr=(add[32] v5844[32] -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5844[32] -4[32]) }
        si      = { defs={} expr=v5846[32] }
        di      = { defs={} expr=v5847[32] }
        es      = { defs={} expr=v5848[16] }
        cs      = { defs={} expr=v5849[16] }
        ss      = { defs={} expr=v5850[16] }
        ds      = { defs={} expr=v5851[16] }
        fs      = { defs={} expr=v5852[16] }
        gs      = { defs={} expr=v5853[16] }
        cf      = { defs={} expr=v5854[1] }
        ?1      = { defs={} expr=v5855[1] }
        pf      = { defs={} expr=v5856[1] }
        ?3      = { defs={} expr=v5857[1] }
        af      = { defs={} expr=v5858[1] }
        ?5      = { defs={} expr=v5859[1] }
        zf      = { defs={} expr=v5860[1] }
        sf      = { defs={} expr=v5861[1] }
        tf      = { defs={} expr=v5862[1] }
        if      = { defs={} expr=v5863[1] }
        df      = { defs={} expr=v5864[1] }
        of      = { defs={} expr=v5865[1] }
        iopl0   = { defs={} expr=v5866[1] }
        iopl1   = { defs={} expr=v5867[1] }
        nt      = { defs={} expr=v5868[1] }
        ?15     = { defs={} expr=v5869[1] }
        rf      = { defs={} expr=v5870[1] }
        vm      = { defs={} expr=v5871[1] }
        ac      = { defs={} expr=v5872[1] }
        vif     = { defs={} expr=v5873[1] }
        vip     = { defs={} expr=v5874[1] }
        id      = { defs={} expr=v5875[1] }
        ?22     = { defs={} expr=v5876[1] }
        ?23     = { defs={} expr=v5877[1] }
        ?24     = { defs={} expr=v5878[1] }
        ?25     = { defs={} expr=v5879[1] }
        ?26     = { defs={} expr=v5880[1] }
        ?27     = { defs={} expr=v5881[1] }
        ?28     = { defs={} expr=v5882[1] }
        ?29     = { defs={} expr=v5883[1] }
        ?30     = { defs={} expr=v5884[1] }
        ?31     = { defs={} expr=v5885[1] }
        ip      = { defs={0x08048520,0x08048521} expr=0x08048523[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5845[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5844[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5845[32]) }
          flags = { }
    init mem:
0x8048523:push   edi
    registers:
        ax      = { defs={} expr=v5840[32] }
        cx      = { defs={} expr=v5841[32] }
        dx      = { defs={} expr=v5842[32] }
        bx      = { defs={} expr=v5843[32] }
        sp      = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5844[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5844[32] -4[32]) }
        si      = { defs={} expr=v5846[32] }
        di      = { defs={} expr=v5847[32] }
        es      = { defs={} expr=v5848[16] }
        cs      = { defs={} expr=v5849[16] }
        ss      = { defs={} expr=v5850[16] }
        ds      = { defs={} expr=v5851[16] }
        fs      = { defs={} expr=v5852[16] }
        gs      = { defs={} expr=v5853[16] }
        cf      = { defs={} expr=v5854[1] }
        ?1      = { defs={} expr=v5855[1] }
        pf      = { defs={} expr=v5856[1] }
        ?3      = { defs={} expr=v5857[1] }
        af      = { defs={} expr=v5858[1] }
        ?5      = { defs={} expr=v5859[1] }
        zf      = { defs={} expr=v5860[1] }
        sf      = { defs={} expr=v5861[1] }
        tf      = { defs={} expr=v5862[1] }
        if      = { defs={} expr=v5863[1] }
        df      = { defs={} expr=v5864[1] }
        of      = { defs={} expr=v5865[1] }
        iopl0   = { defs={} expr=v5866[1] }
        iopl1   = { defs={} expr=v5867[1] }
        nt      = { defs={} expr=v5868[1] }
        ?15     = { defs={} expr=v5869[1] }
        rf      = { defs={} expr=v5870[1] }
        vm      = { defs={} expr=v5871[1] }
        ac      = { defs={} expr=v5872[1] }
        vif     = { defs={} expr=v5873[1] }
        vip     = { defs={} expr=v5874[1] }
        id      = { defs={} expr=v5875[1] }
        ?22     = { defs={} expr=v5876[1] }
        ?23     = { defs={} expr=v5877[1] }
        ?24     = { defs={} expr=v5878[1] }
        ?25     = { defs={} expr=v5879[1] }
        ?26     = { defs={} expr=v5880[1] }
        ?27     = { defs={} expr=v5881[1] }
        ?28     = { defs={} expr=v5882[1] }
        ?29     = { defs={} expr=v5883[1] }
        ?30     = { defs={} expr=v5884[1] }
        ?31     = { defs={} expr=v5885[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523} expr=0x08048524[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048523} expr=(extract[8] 24[32] 32[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048523} expr=(extract[8] 16[32] 24[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048523} expr=(extract[8] 8[32] 16[32] v5847[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5844[32] -4[32]) -4[32]) }
          value = { defs={0x08048523} expr=(extract[8] 0[32] 8[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5845[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5844[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5845[32]) }
          flags = { }
    init mem:
0x8048524:push   esi
    registers:
        ax      = { defs={} expr=v5840[32] }
        cx      = { defs={} expr=v5841[32] }
        dx      = { defs={} expr=v5842[32] }
        bx      = { defs={} expr=v5843[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5844[32] -4[32]) }
        si      = { defs={} expr=v5846[32] }
        di      = { defs={} expr=v5847[32] }
        es      = { defs={} expr=v5848[16] }
        cs      = { defs={} expr=v5849[16] }
        ss      = { defs={} expr=v5850[16] }
        ds      = { defs={} expr=v5851[16] }
        fs      = { defs={} expr=v5852[16] }
        gs      = { defs={} expr=v5853[16] }
        cf      = { defs={} expr=v5854[1] }
        ?1      = { defs={} expr=v5855[1] }
        pf      = { defs={} expr=v5856[1] }
        ?3      = { defs={} expr=v5857[1] }
        af      = { defs={} expr=v5858[1] }
        ?5      = { defs={} expr=v5859[1] }
        zf      = { defs={} expr=v5860[1] }
        sf      = { defs={} expr=v5861[1] }
        tf      = { defs={} expr=v5862[1] }
        if      = { defs={} expr=v5863[1] }
        df      = { defs={} expr=v5864[1] }
        of      = { defs={} expr=v5865[1] }
        iopl0   = { defs={} expr=v5866[1] }
        iopl1   = { defs={} expr=v5867[1] }
        nt      = { defs={} expr=v5868[1] }
        ?15     = { defs={} expr=v5869[1] }
        rf      = { defs={} expr=v5870[1] }
        vm      = { defs={} expr=v5871[1] }
        ac      = { defs={} expr=v5872[1] }
        vif     = { defs={} expr=v5873[1] }
        vip     = { defs={} expr=v5874[1] }
        id      = { defs={} expr=v5875[1] }
        ?22     = { defs={} expr=v5876[1] }
        ?23     = { defs={} expr=v5877[1] }
        ?24     = { defs={} expr=v5878[1] }
        ?25     = { defs={} expr=v5879[1] }
        ?26     = { defs={} expr=v5880[1] }
        ?27     = { defs={} expr=v5881[1] }
        ?28     = { defs={} expr=v5882[1] }
        ?29     = { defs={} expr=v5883[1] }
        ?30     = { defs={} expr=v5884[1] }
        ?31     = { defs={} expr=v5885[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524} expr=0x08048525[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048524} expr=(extract[8] 24[32] 32[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048524} expr=(extract[8] 16[32] 24[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048524} expr=(extract[8] 8[32] 16[32] v5846[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048524} expr=(extract[8] 0[32] 8[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048523} expr=(extract[8] 24[32] 32[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048523} expr=(extract[8] 16[32] 24[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048523} expr=(extract[8] 8[32] 16[32] v5847[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5844[32] -4[32]) -4[32]) }
          value = { defs={0x08048523} expr=(extract[8] 0[32] 8[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5845[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5844[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5845[32]) }
          flags = { }
    init mem:
0x8048525:push   ebx
    registers:
        ax      = { defs={} expr=v5840[32] }
        cx      = { defs={} expr=v5841[32] }
        dx      = { defs={} expr=v5842[32] }
        bx      = { defs={} expr=v5843[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5844[32] -4[32]) }
        si      = { defs={} expr=v5846[32] }
        di      = { defs={} expr=v5847[32] }
        es      = { defs={} expr=v5848[16] }
        cs      = { defs={} expr=v5849[16] }
        ss      = { defs={} expr=v5850[16] }
        ds      = { defs={} expr=v5851[16] }
        fs      = { defs={} expr=v5852[16] }
        gs      = { defs={} expr=v5853[16] }
        cf      = { defs={} expr=v5854[1] }
        ?1      = { defs={} expr=v5855[1] }
        pf      = { defs={} expr=v5856[1] }
        ?3      = { defs={} expr=v5857[1] }
        af      = { defs={} expr=v5858[1] }
        ?5      = { defs={} expr=v5859[1] }
        zf      = { defs={} expr=v5860[1] }
        sf      = { defs={} expr=v5861[1] }
        tf      = { defs={} expr=v5862[1] }
        if      = { defs={} expr=v5863[1] }
        df      = { defs={} expr=v5864[1] }
        of      = { defs={} expr=v5865[1] }
        iopl0   = { defs={} expr=v5866[1] }
        iopl1   = { defs={} expr=v5867[1] }
        nt      = { defs={} expr=v5868[1] }
        ?15     = { defs={} expr=v5869[1] }
        rf      = { defs={} expr=v5870[1] }
        vm      = { defs={} expr=v5871[1] }
        ac      = { defs={} expr=v5872[1] }
        vif     = { defs={} expr=v5873[1] }
        vip     = { defs={} expr=v5874[1] }
        id      = { defs={} expr=v5875[1] }
        ?22     = { defs={} expr=v5876[1] }
        ?23     = { defs={} expr=v5877[1] }
        ?24     = { defs={} expr=v5878[1] }
        ?25     = { defs={} expr=v5879[1] }
        ?26     = { defs={} expr=v5880[1] }
        ?27     = { defs={} expr=v5881[1] }
        ?28     = { defs={} expr=v5882[1] }
        ?29     = { defs={} expr=v5883[1] }
        ?30     = { defs={} expr=v5884[1] }
        ?31     = { defs={} expr=v5885[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525} expr=0x08048526[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048525} expr=(extract[8] 24[32] 32[32] v5843[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048525} expr=(extract[8] 16[32] 24[32] v5843[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048525} expr=(extract[8] 8[32] 16[32] v5843[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048525} expr=(extract[8] 0[32] 8[32] v5843[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048524} expr=(extract[8] 24[32] 32[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048524} expr=(extract[8] 16[32] 24[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048524} expr=(extract[8] 8[32] 16[32] v5846[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048524} expr=(extract[8] 0[32] 8[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048523} expr=(extract[8] 24[32] 32[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048523} expr=(extract[8] 16[32] 24[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048523} expr=(extract[8] 8[32] 16[32] v5847[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5844[32] -4[32]) -4[32]) }
          value = { defs={0x08048523} expr=(extract[8] 0[32] 8[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5845[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5844[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5845[32]) }
          flags = { }
    init mem:
0x8048526:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v5840[32] }
        cx      = { defs={} expr=v5841[32] }
        dx      = { defs={} expr=v5842[32] }
        bx      = { defs={} expr=v5843[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5844[32] -4[32]) }
        si      = { defs={} expr=v5846[32] }
        di      = { defs={} expr=v5847[32] }
        es      = { defs={} expr=v5848[16] }
        cs      = { defs={} expr=v5849[16] }
        ss      = { defs={} expr=v5850[16] }
        ds      = { defs={} expr=v5851[16] }
        fs      = { defs={} expr=v5852[16] }
        gs      = { defs={} expr=v5853[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5855[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5857[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5859[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5862[1] }
        if      = { defs={} expr=v5863[1] }
        df      = { defs={} expr=v5864[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5866[1] }
        iopl1   = { defs={} expr=v5867[1] }
        nt      = { defs={} expr=v5868[1] }
        ?15     = { defs={} expr=v5869[1] }
        rf      = { defs={} expr=v5870[1] }
        vm      = { defs={} expr=v5871[1] }
        ac      = { defs={} expr=v5872[1] }
        vif     = { defs={} expr=v5873[1] }
        vip     = { defs={} expr=v5874[1] }
        id      = { defs={} expr=v5875[1] }
        ?22     = { defs={} expr=v5876[1] }
        ?23     = { defs={} expr=v5877[1] }
        ?24     = { defs={} expr=v5878[1] }
        ?25     = { defs={} expr=v5879[1] }
        ?26     = { defs={} expr=v5880[1] }
        ?27     = { defs={} expr=v5881[1] }
        ?28     = { defs={} expr=v5882[1] }
        ?29     = { defs={} expr=v5883[1] }
        ?30     = { defs={} expr=v5884[1] }
        ?31     = { defs={} expr=v5885[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526} expr=0x08048529[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048525} expr=(extract[8] 24[32] 32[32] v5843[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048525} expr=(extract[8] 16[32] 24[32] v5843[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048525} expr=(extract[8] 8[32] 16[32] v5843[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048525} expr=(extract[8] 0[32] 8[32] v5843[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048524} expr=(extract[8] 24[32] 32[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048524} expr=(extract[8] 16[32] 24[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048524} expr=(extract[8] 8[32] 16[32] v5846[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048524} expr=(extract[8] 0[32] 8[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048523} expr=(extract[8] 24[32] 32[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048523} expr=(extract[8] 16[32] 24[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048523} expr=(extract[8] 8[32] 16[32] v5847[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5844[32] -4[32]) -4[32]) }
          value = { defs={0x08048523} expr=(extract[8] 0[32] 8[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5845[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5844[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5845[32]) }
          flags = { }
    init mem:
0x8048529:call   0x0804852e<<Insn>>
    registers:
        ax      = { defs={} expr=v5840[32] }
        cx      = { defs={} expr=v5841[32] }
        dx      = { defs={} expr=v5842[32] }
        bx      = { defs={} expr=v5843[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5844[32] -4[32]) }
        si      = { defs={} expr=v5846[32] }
        di      = { defs={} expr=v5847[32] }
        es      = { defs={} expr=v5848[16] }
        cs      = { defs={} expr=v5849[16] }
        ss      = { defs={} expr=v5850[16] }
        ds      = { defs={} expr=v5851[16] }
        fs      = { defs={} expr=v5852[16] }
        gs      = { defs={} expr=v5853[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5855[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5857[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5859[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5862[1] }
        if      = { defs={} expr=v5863[1] }
        df      = { defs={} expr=v5864[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5866[1] }
        iopl1   = { defs={} expr=v5867[1] }
        nt      = { defs={} expr=v5868[1] }
        ?15     = { defs={} expr=v5869[1] }
        rf      = { defs={} expr=v5870[1] }
        vm      = { defs={} expr=v5871[1] }
        ac      = { defs={} expr=v5872[1] }
        vif     = { defs={} expr=v5873[1] }
        vip     = { defs={} expr=v5874[1] }
        id      = { defs={} expr=v5875[1] }
        ?22     = { defs={} expr=v5876[1] }
        ?23     = { defs={} expr=v5877[1] }
        ?24     = { defs={} expr=v5878[1] }
        ?25     = { defs={} expr=v5879[1] }
        ?26     = { defs={} expr=v5880[1] }
        ?27     = { defs={} expr=v5881[1] }
        ?28     = { defs={} expr=v5882[1] }
        ?29     = { defs={} expr=v5883[1] }
        ?30     = { defs={} expr=v5884[1] }
        ?31     = { defs={} expr=v5885[1] }
        ip      = { defs={0x08048529} expr=0x0804852e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=-123[8] }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048525} expr=(extract[8] 24[32] 32[32] v5843[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048525} expr=(extract[8] 16[32] 24[32] v5843[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048525} expr=(extract[8] 8[32] 16[32] v5843[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048525} expr=(extract[8] 0[32] 8[32] v5843[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048524} expr=(extract[8] 24[32] 32[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048524} expr=(extract[8] 16[32] 24[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048524} expr=(extract[8] 8[32] 16[32] v5846[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x08048524} expr=(extract[8] 0[32] 8[32] v5846[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048523} expr=(extract[8] 24[32] 32[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048523} expr=(extract[8] 16[32] 24[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5844[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048523} expr=(extract[8] 8[32] 16[32] v5847[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5844[32] -4[32]) -4[32]) }
          value = { defs={0x08048523} expr=(extract[8] 0[32] 8[32] v5847[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 3[32]) }
          value = { defs={0x08048520} expr=(extract[8] 24[32] 32[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 2[32]) }
          value = { defs={0x08048520} expr=(extract[8] 16[32] 24[32] v5845[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5844[32] -4[32]) 1[32]) }
          value = { defs={0x08048520} expr=(extract[8] 8[32] 16[32] v5845[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5844[32] -4[32]) }
          value = { defs={0x08048520} expr=(extract[8] 0[32] 8[32] v5845[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804852e:pop    ebx
    registers:
        ax      = { defs={} expr=v6048[32] }
        cx      = { defs={} expr=v6049[32] }
        dx      = { defs={} expr=v6050[32] }
        bx      = { defs={0x0804852e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) }
        sp      = { defs={0x0804852e} expr=(add[32] v6052[32] 4[32]) }
        bp      = { defs={} expr=v6053[32] }
        si      = { defs={} expr=v6054[32] }
        di      = { defs={} expr=v6055[32] }
        es      = { defs={} expr=v6056[16] }
        cs      = { defs={} expr=v6057[16] }
        ss      = { defs={} expr=v6058[16] }
        ds      = { defs={} expr=v6059[16] }
        fs      = { defs={} expr=v6060[16] }
        gs      = { defs={} expr=v6061[16] }
        cf      = { defs={} expr=v6062[1] }
        ?1      = { defs={} expr=v6063[1] }
        pf      = { defs={} expr=v6064[1] }
        ?3      = { defs={} expr=v6065[1] }
        af      = { defs={} expr=v6066[1] }
        ?5      = { defs={} expr=v6067[1] }
        zf      = { defs={} expr=v6068[1] }
        sf      = { defs={} expr=v6069[1] }
        tf      = { defs={} expr=v6070[1] }
        if      = { defs={} expr=v6071[1] }
        df      = { defs={} expr=v6072[1] }
        of      = { defs={} expr=v6073[1] }
        iopl0   = { defs={} expr=v6074[1] }
        iopl1   = { defs={} expr=v6075[1] }
        nt      = { defs={} expr=v6076[1] }
        ?15     = { defs={} expr=v6077[1] }
        rf      = { defs={} expr=v6078[1] }
        vm      = { defs={} expr=v6079[1] }
        ac      = { defs={} expr=v6080[1] }
        vif     = { defs={} expr=v6081[1] }
        vip     = { defs={} expr=v6082[1] }
        id      = { defs={} expr=v6083[1] }
        ?22     = { defs={} expr=v6084[1] }
        ?23     = { defs={} expr=v6085[1] }
        ?24     = { defs={} expr=v6086[1] }
        ?25     = { defs={} expr=v6087[1] }
        ?26     = { defs={} expr=v6088[1] }
        ?27     = { defs={} expr=v6089[1] }
        ?28     = { defs={} expr=v6090[1] }
        ?29     = { defs={} expr=v6091[1] }
        ?30     = { defs={} expr=v6092[1] }
        ?31     = { defs={} expr=v6093[1] }
        ip      = { defs={0x0804852e} expr=0x0804852f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6052[32] 3[32]) }
          value = { defs={} expr=v6106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 2[32]) }
          value = { defs={} expr=v6105[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 1[32]) }
          value = { defs={} expr=v6104[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6052[32] }
          value = { defs={} expr=v6103[8] }
          flags = { rdonly }
0x804852f:add    ebx, 0x0000119a
    registers:
        ax      = { defs={} expr=v6048[32] }
        cx      = { defs={} expr=v6049[32] }
        dx      = { defs={} expr=v6050[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6052[32] 4[32]) }
        bp      = { defs={} expr=v6053[32] }
        si      = { defs={} expr=v6054[32] }
        di      = { defs={} expr=v6055[32] }
        es      = { defs={} expr=v6056[16] }
        cs      = { defs={} expr=v6057[16] }
        ss      = { defs={} expr=v6058[16] }
        ds      = { defs={} expr=v6059[16] }
        fs      = { defs={} expr=v6060[16] }
        gs      = { defs={} expr=v6061[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v6063[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v6065[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v6067[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])) }
        tf      = { defs={} expr=v6070[1] }
        if      = { defs={} expr=v6071[1] }
        df      = { defs={} expr=v6072[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33])))))) }
        iopl0   = { defs={} expr=v6074[1] }
        iopl1   = { defs={} expr=v6075[1] }
        nt      = { defs={} expr=v6076[1] }
        ?15     = { defs={} expr=v6077[1] }
        rf      = { defs={} expr=v6078[1] }
        vm      = { defs={} expr=v6079[1] }
        ac      = { defs={} expr=v6080[1] }
        vif     = { defs={} expr=v6081[1] }
        vip     = { defs={} expr=v6082[1] }
        id      = { defs={} expr=v6083[1] }
        ?22     = { defs={} expr=v6084[1] }
        ?23     = { defs={} expr=v6085[1] }
        ?24     = { defs={} expr=v6086[1] }
        ?25     = { defs={} expr=v6087[1] }
        ?26     = { defs={} expr=v6088[1] }
        ?27     = { defs={} expr=v6089[1] }
        ?28     = { defs={} expr=v6090[1] }
        ?29     = { defs={} expr=v6091[1] }
        ?30     = { defs={} expr=v6092[1] }
        ?31     = { defs={} expr=v6093[1] }
        ip      = { defs={0x0804852e,0x0804852f} expr=0x08048535[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6052[32] 3[32]) }
          value = { defs={} expr=v6106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 2[32]) }
          value = { defs={} expr=v6105[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 1[32]) }
          value = { defs={} expr=v6104[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6052[32] }
          value = { defs={} expr=v6103[8] }
          flags = { rdonly }
0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v6049[32] }
        dx      = { defs={} expr=v6050[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6052[32] 4[32]) }
        bp      = { defs={} expr=v6053[32] }
        si      = { defs={} expr=v6054[32] }
        di      = { defs={} expr=v6055[32] }
        es      = { defs={} expr=v6056[16] }
        cs      = { defs={} expr=v6057[16] }
        ss      = { defs={} expr=v6058[16] }
        ds      = { defs={} expr=v6059[16] }
        fs      = { defs={} expr=v6060[16] }
        gs      = { defs={} expr=v6061[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v6063[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v6065[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v6067[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])) }
        tf      = { defs={} expr=v6070[1] }
        if      = { defs={} expr=v6071[1] }
        df      = { defs={} expr=v6072[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33])))))) }
        iopl0   = { defs={} expr=v6074[1] }
        iopl1   = { defs={} expr=v6075[1] }
        nt      = { defs={} expr=v6076[1] }
        ?15     = { defs={} expr=v6077[1] }
        rf      = { defs={} expr=v6078[1] }
        vm      = { defs={} expr=v6079[1] }
        ac      = { defs={} expr=v6080[1] }
        vif     = { defs={} expr=v6081[1] }
        vip     = { defs={} expr=v6082[1] }
        id      = { defs={} expr=v6083[1] }
        ?22     = { defs={} expr=v6084[1] }
        ?23     = { defs={} expr=v6085[1] }
        ?24     = { defs={} expr=v6086[1] }
        ?25     = { defs={} expr=v6087[1] }
        ?26     = { defs={} expr=v6088[1] }
        ?27     = { defs={} expr=v6089[1] }
        ?28     = { defs={} expr=v6090[1] }
        ?29     = { defs={} expr=v6091[1] }
        ?30     = { defs={} expr=v6092[1] }
        ?31     = { defs={} expr=v6093[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535} expr=0x0804853b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6052[32] 3[32]) }
          value = { defs={} expr=v6106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 2[32]) }
          value = { defs={} expr=v6105[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 1[32]) }
          value = { defs={} expr=v6104[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6052[32] }
          value = { defs={} expr=v6103[8] }
          flags = { rdonly }
0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v6049[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6052[32] 4[32]) }
        bp      = { defs={} expr=v6053[32] }
        si      = { defs={} expr=v6054[32] }
        di      = { defs={} expr=v6055[32] }
        es      = { defs={} expr=v6056[16] }
        cs      = { defs={} expr=v6057[16] }
        ss      = { defs={} expr=v6058[16] }
        ds      = { defs={} expr=v6059[16] }
        fs      = { defs={} expr=v6060[16] }
        gs      = { defs={} expr=v6061[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v6063[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v6065[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v6067[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32])) }
        tf      = { defs={} expr=v6070[1] }
        if      = { defs={} expr=v6071[1] }
        df      = { defs={} expr=v6072[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8])))) 4506[33])))))) }
        iopl0   = { defs={} expr=v6074[1] }
        iopl1   = { defs={} expr=v6075[1] }
        nt      = { defs={} expr=v6076[1] }
        ?15     = { defs={} expr=v6077[1] }
        rf      = { defs={} expr=v6078[1] }
        vm      = { defs={} expr=v6079[1] }
        ac      = { defs={} expr=v6080[1] }
        vif     = { defs={} expr=v6081[1] }
        vip     = { defs={} expr=v6082[1] }
        id      = { defs={} expr=v6083[1] }
        ?22     = { defs={} expr=v6084[1] }
        ?23     = { defs={} expr=v6085[1] }
        ?24     = { defs={} expr=v6086[1] }
        ?25     = { defs={} expr=v6087[1] }
        ?26     = { defs={} expr=v6088[1] }
        ?27     = { defs={} expr=v6089[1] }
        ?28     = { defs={} expr=v6090[1] }
        ?29     = { defs={} expr=v6091[1] }
        ?30     = { defs={} expr=v6092[1] }
        ?31     = { defs={} expr=v6093[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b} expr=0x08048541[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6052[32] 3[32]) }
          value = { defs={} expr=v6106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 2[32]) }
          value = { defs={} expr=v6105[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 1[32]) }
          value = { defs={} expr=v6104[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6052[32] }
          value = { defs={} expr=v6103[8] }
          flags = { rdonly }
0x8048541:sub    eax, edx
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])) }
        cx      = { defs={} expr=v6049[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6052[32] 4[32]) }
        bp      = { defs={} expr=v6053[32] }
        si      = { defs={} expr=v6054[32] }
        di      = { defs={} expr=v6055[32] }
        es      = { defs={} expr=v6056[16] }
        cs      = { defs={} expr=v6057[16] }
        ss      = { defs={} expr=v6058[16] }
        ds      = { defs={} expr=v6059[16] }
        fs      = { defs={} expr=v6060[16] }
        gs      = { defs={} expr=v6061[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v6063[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v6065[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v6067[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(zerop[1] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) }
        tf      = { defs={} expr=v6070[1] }
        if      = { defs={} expr=v6071[1] }
        df      = { defs={} expr=v6072[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v6074[1] }
        iopl1   = { defs={} expr=v6075[1] }
        nt      = { defs={} expr=v6076[1] }
        ?15     = { defs={} expr=v6077[1] }
        rf      = { defs={} expr=v6078[1] }
        vm      = { defs={} expr=v6079[1] }
        ac      = { defs={} expr=v6080[1] }
        vif     = { defs={} expr=v6081[1] }
        vip     = { defs={} expr=v6082[1] }
        id      = { defs={} expr=v6083[1] }
        ?22     = { defs={} expr=v6084[1] }
        ?23     = { defs={} expr=v6085[1] }
        ?24     = { defs={} expr=v6086[1] }
        ?25     = { defs={} expr=v6087[1] }
        ?26     = { defs={} expr=v6088[1] }
        ?27     = { defs={} expr=v6089[1] }
        ?28     = { defs={} expr=v6090[1] }
        ?29     = { defs={} expr=v6091[1] }
        ?30     = { defs={} expr=v6092[1] }
        ?31     = { defs={} expr=v6093[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=0x08048543[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6052[32] 3[32]) }
          value = { defs={} expr=v6106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 2[32]) }
          value = { defs={} expr=v6105[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 1[32]) }
          value = { defs={} expr=v6104[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6052[32] }
          value = { defs={} expr=v6103[8] }
          flags = { rdonly }
0x8048543:sar    eax, 0x02
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v6049[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6052[32] 4[32]) }
        bp      = { defs={} expr=v6053[32] }
        si      = { defs={} expr=v6054[32] }
        di      = { defs={} expr=v6055[32] }
        es      = { defs={} expr=v6056[16] }
        cs      = { defs={} expr=v6057[16] }
        ss      = { defs={} expr=v6058[16] }
        ds      = { defs={} expr=v6059[16] }
        fs      = { defs={} expr=v6060[16] }
        gs      = { defs={} expr=v6061[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v6063[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v6065[1] }
        af      = { defs={0x08048543} expr=v6240[1] }
        ?5      = { defs={} expr=v6067[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v6070[1] }
        if      = { defs={} expr=v6071[1] }
        df      = { defs={} expr=v6072[1] }
        of      = { defs={0x08048543} expr=v6255[1] }
        iopl0   = { defs={} expr=v6074[1] }
        iopl1   = { defs={} expr=v6075[1] }
        nt      = { defs={} expr=v6076[1] }
        ?15     = { defs={} expr=v6077[1] }
        rf      = { defs={} expr=v6078[1] }
        vm      = { defs={} expr=v6079[1] }
        ac      = { defs={} expr=v6080[1] }
        vif     = { defs={} expr=v6081[1] }
        vip     = { defs={} expr=v6082[1] }
        id      = { defs={} expr=v6083[1] }
        ?22     = { defs={} expr=v6084[1] }
        ?23     = { defs={} expr=v6085[1] }
        ?24     = { defs={} expr=v6086[1] }
        ?25     = { defs={} expr=v6087[1] }
        ?26     = { defs={} expr=v6088[1] }
        ?27     = { defs={} expr=v6089[1] }
        ?28     = { defs={} expr=v6090[1] }
        ?29     = { defs={} expr=v6091[1] }
        ?30     = { defs={} expr=v6092[1] }
        ?31     = { defs={} expr=v6093[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=0x08048546[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v6052[32] 3[32]) }
          value = { defs={} expr=v6106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 2[32]) }
          value = { defs={} expr=v6105[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 1[32]) }
          value = { defs={} expr=v6104[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6052[32] }
          value = { defs={} expr=v6103[8] }
          flags = { rdonly }
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v6049[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6052[32] 4[32]) }
        bp      = { defs={} expr=v6053[32] }
        si      = { defs={} expr=v6054[32] }
        di      = { defs={} expr=v6055[32] }
        es      = { defs={} expr=v6056[16] }
        cs      = { defs={} expr=v6057[16] }
        ss      = { defs={} expr=v6058[16] }
        ds      = { defs={} expr=v6059[16] }
        fs      = { defs={} expr=v6060[16] }
        gs      = { defs={} expr=v6061[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v6063[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v6065[1] }
        af      = { defs={0x08048543} expr=v6240[1] }
        ?5      = { defs={} expr=v6067[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v6070[1] }
        if      = { defs={} expr=v6071[1] }
        df      = { defs={} expr=v6072[1] }
        of      = { defs={0x08048543} expr=v6255[1] }
        iopl0   = { defs={} expr=v6074[1] }
        iopl1   = { defs={} expr=v6075[1] }
        nt      = { defs={} expr=v6076[1] }
        ?15     = { defs={} expr=v6077[1] }
        rf      = { defs={} expr=v6078[1] }
        vm      = { defs={} expr=v6079[1] }
        ac      = { defs={} expr=v6080[1] }
        vif     = { defs={} expr=v6081[1] }
        vip     = { defs={} expr=v6082[1] }
        id      = { defs={} expr=v6083[1] }
        ?22     = { defs={} expr=v6084[1] }
        ?23     = { defs={} expr=v6085[1] }
        ?24     = { defs={} expr=v6086[1] }
        ?25     = { defs={} expr=v6087[1] }
        ?26     = { defs={} expr=v6088[1] }
        ?27     = { defs={} expr=v6089[1] }
        ?28     = { defs={} expr=v6090[1] }
        ?29     = { defs={} expr=v6091[1] }
        ?30     = { defs={} expr=v6092[1] }
        ?31     = { defs={} expr=v6093[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=0x08048549[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 3[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 2[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 1[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v6053[32] -16[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v6052[32] 3[32]) }
          value = { defs={} expr=v6106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 2[32]) }
          value = { defs={} expr=v6105[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 1[32]) }
          value = { defs={} expr=v6104[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6052[32] }
          value = { defs={} expr=v6103[8] }
          flags = { rdonly }
0x8048549:dec    eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v6049[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6052[32] 4[32]) }
        bp      = { defs={} expr=v6053[32] }
        si      = { defs={} expr=v6054[32] }
        di      = { defs={} expr=v6055[32] }
        es      = { defs={} expr=v6056[16] }
        cs      = { defs={} expr=v6057[16] }
        ss      = { defs={} expr=v6058[16] }
        ds      = { defs={} expr=v6059[16] }
        fs      = { defs={} expr=v6060[16] }
        gs      = { defs={} expr=v6061[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v6063[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))))))) }
        ?3      = { defs={} expr=v6065[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33])))))) }
        ?5      = { defs={} expr=v6067[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        tf      = { defs={} expr=v6070[1] }
        if      = { defs={} expr=v6071[1] }
        df      = { defs={} expr=v6072[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33])))))) }
        iopl0   = { defs={} expr=v6074[1] }
        iopl1   = { defs={} expr=v6075[1] }
        nt      = { defs={} expr=v6076[1] }
        ?15     = { defs={} expr=v6077[1] }
        rf      = { defs={} expr=v6078[1] }
        vm      = { defs={} expr=v6079[1] }
        ac      = { defs={} expr=v6080[1] }
        vif     = { defs={} expr=v6081[1] }
        vip     = { defs={} expr=v6082[1] }
        id      = { defs={} expr=v6083[1] }
        ?22     = { defs={} expr=v6084[1] }
        ?23     = { defs={} expr=v6085[1] }
        ?24     = { defs={} expr=v6086[1] }
        ?25     = { defs={} expr=v6087[1] }
        ?26     = { defs={} expr=v6088[1] }
        ?27     = { defs={} expr=v6089[1] }
        ?28     = { defs={} expr=v6090[1] }
        ?29     = { defs={} expr=v6091[1] }
        ?30     = { defs={} expr=v6092[1] }
        ?31     = { defs={} expr=v6093[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549} expr=0x0804854a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 3[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 2[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 1[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v6053[32] -16[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v6052[32] 3[32]) }
          value = { defs={} expr=v6106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 2[32]) }
          value = { defs={} expr=v6105[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 1[32]) }
          value = { defs={} expr=v6104[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6052[32] }
          value = { defs={} expr=v6103[8] }
          flags = { rdonly }
0x804854a:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v6049[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6052[32] 4[32]) }
        bp      = { defs={} expr=v6053[32] }
        si      = { defs={} expr=v6054[32] }
        di      = { defs={} expr=v6055[32] }
        es      = { defs={} expr=v6056[16] }
        cs      = { defs={} expr=v6057[16] }
        ss      = { defs={} expr=v6058[16] }
        ds      = { defs={} expr=v6059[16] }
        fs      = { defs={} expr=v6060[16] }
        gs      = { defs={} expr=v6061[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v6063[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
        ?3      = { defs={} expr=v6065[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v6067[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v6070[1] }
        if      = { defs={} expr=v6071[1] }
        df      = { defs={} expr=v6072[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        iopl0   = { defs={} expr=v6074[1] }
        iopl1   = { defs={} expr=v6075[1] }
        nt      = { defs={} expr=v6076[1] }
        ?15     = { defs={} expr=v6077[1] }
        rf      = { defs={} expr=v6078[1] }
        vm      = { defs={} expr=v6079[1] }
        ac      = { defs={} expr=v6080[1] }
        vif     = { defs={} expr=v6081[1] }
        vip     = { defs={} expr=v6082[1] }
        id      = { defs={} expr=v6083[1] }
        ?22     = { defs={} expr=v6084[1] }
        ?23     = { defs={} expr=v6085[1] }
        ?24     = { defs={} expr=v6086[1] }
        ?25     = { defs={} expr=v6087[1] }
        ?26     = { defs={} expr=v6088[1] }
        ?27     = { defs={} expr=v6089[1] }
        ?28     = { defs={} expr=v6090[1] }
        ?29     = { defs={} expr=v6091[1] }
        ?30     = { defs={} expr=v6092[1] }
        ?31     = { defs={} expr=v6093[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a} expr=0x0804854d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 3[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 2[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 1[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v6053[32] -16[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v6052[32] 3[32]) }
          value = { defs={} expr=v6106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 2[32]) }
          value = { defs={} expr=v6105[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 1[32]) }
          value = { defs={} expr=v6104[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6052[32] }
          value = { defs={} expr=v6103[8] }
          flags = { rdonly }
0x804854d:je     0x0804856b<<Insn>>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v6049[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v6052[32] 4[32]) }
        bp      = { defs={} expr=v6053[32] }
        si      = { defs={} expr=v6054[32] }
        di      = { defs={} expr=v6055[32] }
        es      = { defs={} expr=v6056[16] }
        cs      = { defs={} expr=v6057[16] }
        ss      = { defs={} expr=v6058[16] }
        ds      = { defs={} expr=v6059[16] }
        fs      = { defs={} expr=v6060[16] }
        gs      = { defs={} expr=v6061[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v6063[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
        ?3      = { defs={} expr=v6065[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v6067[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v6070[1] }
        if      = { defs={} expr=v6071[1] }
        df      = { defs={} expr=v6072[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        iopl0   = { defs={} expr=v6074[1] }
        iopl1   = { defs={} expr=v6075[1] }
        nt      = { defs={} expr=v6076[1] }
        ?15     = { defs={} expr=v6077[1] }
        rf      = { defs={} expr=v6078[1] }
        vm      = { defs={} expr=v6079[1] }
        ac      = { defs={} expr=v6080[1] }
        vif     = { defs={} expr=v6081[1] }
        vip     = { defs={} expr=v6082[1] }
        id      = { defs={} expr=v6083[1] }
        ?22     = { defs={} expr=v6084[1] }
        ?23     = { defs={} expr=v6085[1] }
        ?24     = { defs={} expr=v6086[1] }
        ?25     = { defs={} expr=v6087[1] }
        ?26     = { defs={} expr=v6088[1] }
        ?27     = { defs={} expr=v6089[1] }
        ?28     = { defs={} expr=v6090[1] }
        ?29     = { defs={} expr=v6091[1] }
        ?30     = { defs={} expr=v6092[1] }
        ?31     = { defs={} expr=v6093[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a,0x0804854d} expr=(ite[32] (zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) 0x0804856b[32] 0x0804854f[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 3[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 2[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6053[32] -16[32]) 1[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v6053[32] -16[32]) }
          value = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6103[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6104[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6105[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6106[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v6052[32] 3[32]) }
          value = { defs={} expr=v6106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 2[32]) }
          value = { defs={} expr=v6105[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v6052[32] 1[32]) }
          value = { defs={} expr=v6104[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v6052[32] }
          value = { defs={} expr=v6103[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804854f:lea    esi, [edx + eax*0x04]
    registers:
        ax      = { defs={} expr=v6455[32] }
        cx      = { defs={} expr=v6456[32] }
        dx      = { defs={} expr=v6457[32] }
        bx      = { defs={} expr=v6458[32] }
        sp      = { defs={} expr=v6459[32] }
        bp      = { defs={} expr=v6460[32] }
        si      = { defs={0x0804854f} expr=(add[32] v6457[32] (extract[32] 0[32] 32[32] (umul[40] v6455[32] 4[8]))) }
        di      = { defs={} expr=v6462[32] }
        es      = { defs={} expr=v6463[16] }
        cs      = { defs={} expr=v6464[16] }
        ss      = { defs={} expr=v6465[16] }
        ds      = { defs={} expr=v6466[16] }
        fs      = { defs={} expr=v6467[16] }
        gs      = { defs={} expr=v6468[16] }
        cf      = { defs={} expr=v6469[1] }
        ?1      = { defs={} expr=v6470[1] }
        pf      = { defs={} expr=v6471[1] }
        ?3      = { defs={} expr=v6472[1] }
        af      = { defs={} expr=v6473[1] }
        ?5      = { defs={} expr=v6474[1] }
        zf      = { defs={} expr=v6475[1] }
        sf      = { defs={} expr=v6476[1] }
        tf      = { defs={} expr=v6477[1] }
        if      = { defs={} expr=v6478[1] }
        df      = { defs={} expr=v6479[1] }
        of      = { defs={} expr=v6480[1] }
        iopl0   = { defs={} expr=v6481[1] }
        iopl1   = { defs={} expr=v6482[1] }
        nt      = { defs={} expr=v6483[1] }
        ?15     = { defs={} expr=v6484[1] }
        rf      = { defs={} expr=v6485[1] }
        vm      = { defs={} expr=v6486[1] }
        ac      = { defs={} expr=v6487[1] }
        vif     = { defs={} expr=v6488[1] }
        vip     = { defs={} expr=v6489[1] }
        id      = { defs={} expr=v6490[1] }
        ?22     = { defs={} expr=v6491[1] }
        ?23     = { defs={} expr=v6492[1] }
        ?24     = { defs={} expr=v6493[1] }
        ?25     = { defs={} expr=v6494[1] }
        ?26     = { defs={} expr=v6495[1] }
        ?27     = { defs={} expr=v6496[1] }
        ?28     = { defs={} expr=v6497[1] }
        ?29     = { defs={} expr=v6498[1] }
        ?30     = { defs={} expr=v6499[1] }
        ?31     = { defs={} expr=v6500[1] }
        ip      = { defs={0x0804854f} expr=0x08048552[32] }
    memory:
    init mem:
0x8048552:xor    edi, edi
    registers:
        ax      = { defs={} expr=v6455[32] }
        cx      = { defs={} expr=v6456[32] }
        dx      = { defs={} expr=v6457[32] }
        bx      = { defs={} expr=v6458[32] }
        sp      = { defs={} expr=v6459[32] }
        bp      = { defs={} expr=v6460[32] }
        si      = { defs={0x0804854f} expr=(add[32] v6457[32] (extract[32] 0[32] 32[32] (umul[40] v6455[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v6463[16] }
        cs      = { defs={} expr=v6464[16] }
        ss      = { defs={} expr=v6465[16] }
        ds      = { defs={} expr=v6466[16] }
        fs      = { defs={} expr=v6467[16] }
        gs      = { defs={} expr=v6468[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6470[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6472[1] }
        af      = { defs={0x08048552} expr=v6544[1] }
        ?5      = { defs={} expr=v6474[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6477[1] }
        if      = { defs={} expr=v6478[1] }
        df      = { defs={} expr=v6479[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6481[1] }
        iopl1   = { defs={} expr=v6482[1] }
        nt      = { defs={} expr=v6483[1] }
        ?15     = { defs={} expr=v6484[1] }
        rf      = { defs={} expr=v6485[1] }
        vm      = { defs={} expr=v6486[1] }
        ac      = { defs={} expr=v6487[1] }
        vif     = { defs={} expr=v6488[1] }
        vip     = { defs={} expr=v6489[1] }
        id      = { defs={} expr=v6490[1] }
        ?22     = { defs={} expr=v6491[1] }
        ?23     = { defs={} expr=v6492[1] }
        ?24     = { defs={} expr=v6493[1] }
        ?25     = { defs={} expr=v6494[1] }
        ?26     = { defs={} expr=v6495[1] }
        ?27     = { defs={} expr=v6496[1] }
        ?28     = { defs={} expr=v6497[1] }
        ?29     = { defs={} expr=v6498[1] }
        ?30     = { defs={} expr=v6499[1] }
        ?31     = { defs={} expr=v6500[1] }
        ip      = { defs={0x0804854f,0x08048552} expr=0x08048554[32] }
    memory:
    init mem:
0x8048554:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v6455[32] }
        cx      = { defs={} expr=v6456[32] }
        dx      = { defs={} expr=v6457[32] }
        bx      = { defs={} expr=v6458[32] }
        sp      = { defs={} expr=v6459[32] }
        bp      = { defs={} expr=v6460[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6457[32] (extract[32] 0[32] 32[32] (umul[40] v6455[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v6463[16] }
        cs      = { defs={} expr=v6464[16] }
        ss      = { defs={} expr=v6465[16] }
        ds      = { defs={} expr=v6466[16] }
        fs      = { defs={} expr=v6467[16] }
        gs      = { defs={} expr=v6468[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6470[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6472[1] }
        af      = { defs={0x08048552} expr=v6544[1] }
        ?5      = { defs={} expr=v6474[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6477[1] }
        if      = { defs={} expr=v6478[1] }
        df      = { defs={} expr=v6479[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6481[1] }
        iopl1   = { defs={} expr=v6482[1] }
        nt      = { defs={} expr=v6483[1] }
        ?15     = { defs={} expr=v6484[1] }
        rf      = { defs={} expr=v6485[1] }
        vm      = { defs={} expr=v6486[1] }
        ac      = { defs={} expr=v6487[1] }
        vif     = { defs={} expr=v6488[1] }
        vip     = { defs={} expr=v6489[1] }
        id      = { defs={} expr=v6490[1] }
        ?22     = { defs={} expr=v6491[1] }
        ?23     = { defs={} expr=v6492[1] }
        ?24     = { defs={} expr=v6493[1] }
        ?25     = { defs={} expr=v6494[1] }
        ?26     = { defs={} expr=v6495[1] }
        ?27     = { defs={} expr=v6496[1] }
        ?28     = { defs={} expr=v6497[1] }
        ?29     = { defs={} expr=v6498[1] }
        ?30     = { defs={} expr=v6499[1] }
        ?31     = { defs={} expr=v6500[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554} expr=0x0804855a[32] }
    memory:
    init mem:
0x804855a:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v6455[32] }
        cx      = { defs={} expr=v6456[32] }
        dx      = { defs={} expr=v6457[32] }
        bx      = { defs={} expr=v6458[32] }
        sp      = { defs={} expr=v6459[32] }
        bp      = { defs={} expr=v6460[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6457[32] (extract[32] 0[32] 32[32] (umul[40] v6455[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v6463[16] }
        cs      = { defs={} expr=v6464[16] }
        ss      = { defs={} expr=v6465[16] }
        ds      = { defs={} expr=v6466[16] }
        fs      = { defs={} expr=v6467[16] }
        gs      = { defs={} expr=v6468[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6470[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6472[1] }
        af      = { defs={0x08048552} expr=v6544[1] }
        ?5      = { defs={} expr=v6474[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6477[1] }
        if      = { defs={} expr=v6478[1] }
        df      = { defs={} expr=v6479[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6481[1] }
        iopl1   = { defs={} expr=v6482[1] }
        nt      = { defs={} expr=v6483[1] }
        ?15     = { defs={} expr=v6484[1] }
        rf      = { defs={} expr=v6485[1] }
        vm      = { defs={} expr=v6486[1] }
        ac      = { defs={} expr=v6487[1] }
        vif     = { defs={} expr=v6488[1] }
        vip     = { defs={} expr=v6489[1] }
        id      = { defs={} expr=v6490[1] }
        ?22     = { defs={} expr=v6491[1] }
        ?23     = { defs={} expr=v6492[1] }
        ?24     = { defs={} expr=v6493[1] }
        ?25     = { defs={} expr=v6494[1] }
        ?26     = { defs={} expr=v6495[1] }
        ?27     = { defs={} expr=v6496[1] }
        ?28     = { defs={} expr=v6497[1] }
        ?29     = { defs={} expr=v6498[1] }
        ?30     = { defs={} expr=v6499[1] }
        ?31     = { defs={} expr=v6500[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a} expr=0x08048560[32] }
    memory:
    init mem:
0x8048560:call   DWORD PTR ds:[esi]
    registers:
        ax      = { defs={} expr=v6455[32] }
        cx      = { defs={} expr=v6456[32] }
        dx      = { defs={} expr=v6457[32] }
        bx      = { defs={} expr=v6458[32] }
        sp      = { defs={0x08048560} expr=(add[32] v6459[32] -4[32]) }
        bp      = { defs={} expr=v6460[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6457[32] (extract[32] 0[32] 32[32] (umul[40] v6455[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v6463[16] }
        cs      = { defs={} expr=v6464[16] }
        ss      = { defs={} expr=v6465[16] }
        ds      = { defs={} expr=v6466[16] }
        fs      = { defs={} expr=v6467[16] }
        gs      = { defs={} expr=v6468[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6470[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6472[1] }
        af      = { defs={0x08048552} expr=v6544[1] }
        ?5      = { defs={} expr=v6474[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6477[1] }
        if      = { defs={} expr=v6478[1] }
        df      = { defs={} expr=v6479[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6481[1] }
        iopl1   = { defs={} expr=v6482[1] }
        nt      = { defs={} expr=v6483[1] }
        ?15     = { defs={} expr=v6484[1] }
        rf      = { defs={} expr=v6485[1] }
        vm      = { defs={} expr=v6486[1] }
        ac      = { defs={} expr=v6487[1] }
        vif     = { defs={} expr=v6488[1] }
        vip     = { defs={} expr=v6489[1] }
        id      = { defs={} expr=v6490[1] }
        ?22     = { defs={} expr=v6491[1] }
        ?23     = { defs={} expr=v6492[1] }
        ?24     = { defs={} expr=v6493[1] }
        ?25     = { defs={} expr=v6494[1] }
        ?26     = { defs={} expr=v6495[1] }
        ?27     = { defs={} expr=v6496[1] }
        ?28     = { defs={} expr=v6497[1] }
        ?29     = { defs={} expr=v6498[1] }
        ?30     = { defs={} expr=v6499[1] }
        ?31     = { defs={} expr=v6500[1] }
        ip      = { defs={0x08048560} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6572[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6573[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6574[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6575[8]))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6459[32] -4[32]) 3[32]) }
          value = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a,0x08048560} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6459[32] -4[32]) 2[32]) }
          value = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a,0x08048560} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6459[32] -4[32]) 1[32]) }
          value = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a,0x08048560} expr=-123[8] }
          flags = { }
        address = { defs={0x08048560} expr=(add[32] v6459[32] -4[32]) }
          value = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a,0x08048560} expr=98[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6457[32] (extract[32] 0[32] 32[32] (umul[40] v6455[32] 4[8]))) 3[32]) }
          value = { defs={} expr=v6575[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6457[32] (extract[32] 0[32] 32[32] (umul[40] v6455[32] 4[8]))) 2[32]) }
          value = { defs={} expr=v6574[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6457[32] (extract[32] 0[32] 32[32] (umul[40] v6455[32] 4[8]))) 1[32]) }
          value = { defs={} expr=v6573[8] }
          flags = { rdonly }
        address = { defs={0x0804854f,0x08048554,0x08048560} expr=(add[32] v6457[32] (extract[32] 0[32] 32[32] (umul[40] v6455[32] 4[8]))) }
          value = { defs={} expr=v6572[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048562:inc    edi
    registers:
        ax      = { defs={} expr=v6630[32] }
        cx      = { defs={} expr=v6631[32] }
        dx      = { defs={} expr=v6632[32] }
        bx      = { defs={} expr=v6633[32] }
        sp      = { defs={} expr=v6634[32] }
        bp      = { defs={} expr=v6635[32] }
        si      = { defs={} expr=v6636[32] }
        di      = { defs={0x08048562} expr=(add[32] v6637[32] 1[32]) }
        es      = { defs={} expr=v6638[16] }
        cs      = { defs={} expr=v6639[16] }
        ss      = { defs={} expr=v6640[16] }
        ds      = { defs={} expr=v6641[16] }
        fs      = { defs={} expr=v6642[16] }
        gs      = { defs={} expr=v6643[16] }
        cf      = { defs={} expr=v6644[1] }
        ?1      = { defs={} expr=v6645[1] }
        pf      = { defs={0x08048562} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6637[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6637[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6637[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6637[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6637[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6637[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6637[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6637[32] 1[32]))))))) }
        ?3      = { defs={} expr=v6647[1] }
        af      = { defs={0x08048562} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6637[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6637[32]) 1[33]))))) }
        ?5      = { defs={} expr=v6649[1] }
        zf      = { defs={0x08048562} expr=(zerop[1] (add[32] v6637[32] 1[32])) }
        sf      = { defs={0x08048562} expr=(extract[1] 31[32] 32[32] (add[32] v6637[32] 1[32])) }
        tf      = { defs={} expr=v6652[1] }
        if      = { defs={} expr=v6653[1] }
        df      = { defs={} expr=v6654[1] }
        of      = { defs={0x08048562} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6637[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6637[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6637[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6637[32]) 1[33])))))) }
        iopl0   = { defs={} expr=v6656[1] }
        iopl1   = { defs={} expr=v6657[1] }
        nt      = { defs={} expr=v6658[1] }
        ?15     = { defs={} expr=v6659[1] }
        rf      = { defs={} expr=v6660[1] }
        vm      = { defs={} expr=v6661[1] }
        ac      = { defs={} expr=v6662[1] }
        vif     = { defs={} expr=v6663[1] }
        vip     = { defs={} expr=v6664[1] }
        id      = { defs={} expr=v6665[1] }
        ?22     = { defs={} expr=v6666[1] }
        ?23     = { defs={} expr=v6667[1] }
        ?24     = { defs={} expr=v6668[1] }
        ?25     = { defs={} expr=v6669[1] }
        ?26     = { defs={} expr=v6670[1] }
        ?27     = { defs={} expr=v6671[1] }
        ?28     = { defs={} expr=v6672[1] }
        ?29     = { defs={} expr=v6673[1] }
        ?30     = { defs={} expr=v6674[1] }
        ?31     = { defs={} expr=v6675[1] }
        ip      = { defs={0x08048562} expr=0x08048563[32] }
    memory:
    init mem:
0x8048563:sub    esi, 0x04
    registers:
        ax      = { defs={} expr=v6630[32] }
        cx      = { defs={} expr=v6631[32] }
        dx      = { defs={} expr=v6632[32] }
        bx      = { defs={} expr=v6633[32] }
        sp      = { defs={} expr=v6634[32] }
        bp      = { defs={} expr=v6635[32] }
        si      = { defs={0x08048563} expr=(add[32] v6636[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6637[32] 1[32]) }
        es      = { defs={} expr=v6638[16] }
        cs      = { defs={} expr=v6639[16] }
        ss      = { defs={} expr=v6640[16] }
        ds      = { defs={} expr=v6641[16] }
        fs      = { defs={} expr=v6642[16] }
        gs      = { defs={} expr=v6643[16] }
        cf      = { defs={0x08048563} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6636[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6636[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v6645[1] }
        pf      = { defs={0x08048563} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6636[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6636[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6636[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6636[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6636[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6636[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6636[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6636[32] -4[32]))))))) }
        ?3      = { defs={} expr=v6647[1] }
        af      = { defs={0x08048563} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6636[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6636[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v6649[1] }
        zf      = { defs={0x08048563} expr=(zerop[1] (add[32] v6636[32] -4[32])) }
        sf      = { defs={0x08048563} expr=(extract[1] 31[32] 32[32] (add[32] v6636[32] -4[32])) }
        tf      = { defs={} expr=v6652[1] }
        if      = { defs={} expr=v6653[1] }
        df      = { defs={} expr=v6654[1] }
        of      = { defs={0x08048563} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6636[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6636[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6636[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6636[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v6656[1] }
        iopl1   = { defs={} expr=v6657[1] }
        nt      = { defs={} expr=v6658[1] }
        ?15     = { defs={} expr=v6659[1] }
        rf      = { defs={} expr=v6660[1] }
        vm      = { defs={} expr=v6661[1] }
        ac      = { defs={} expr=v6662[1] }
        vif     = { defs={} expr=v6663[1] }
        vip     = { defs={} expr=v6664[1] }
        id      = { defs={} expr=v6665[1] }
        ?22     = { defs={} expr=v6666[1] }
        ?23     = { defs={} expr=v6667[1] }
        ?24     = { defs={} expr=v6668[1] }
        ?25     = { defs={} expr=v6669[1] }
        ?26     = { defs={} expr=v6670[1] }
        ?27     = { defs={} expr=v6671[1] }
        ?28     = { defs={} expr=v6672[1] }
        ?29     = { defs={} expr=v6673[1] }
        ?30     = { defs={} expr=v6674[1] }
        ?31     = { defs={} expr=v6675[1] }
        ip      = { defs={0x08048562,0x08048563} expr=0x08048566[32] }
    memory:
    init mem:
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
    registers:
        ax      = { defs={} expr=v6630[32] }
        cx      = { defs={} expr=v6631[32] }
        dx      = { defs={} expr=v6632[32] }
        bx      = { defs={} expr=v6633[32] }
        sp      = { defs={} expr=v6634[32] }
        bp      = { defs={} expr=v6635[32] }
        si      = { defs={0x08048563} expr=(add[32] v6636[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6637[32] 1[32]) }
        es      = { defs={} expr=v6638[16] }
        cs      = { defs={} expr=v6639[16] }
        ss      = { defs={} expr=v6640[16] }
        ds      = { defs={} expr=v6641[16] }
        fs      = { defs={} expr=v6642[16] }
        gs      = { defs={} expr=v6643[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v6645[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v6647[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v6649[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v6652[1] }
        if      = { defs={} expr=v6653[1] }
        df      = { defs={} expr=v6654[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v6656[1] }
        iopl1   = { defs={} expr=v6657[1] }
        nt      = { defs={} expr=v6658[1] }
        ?15     = { defs={} expr=v6659[1] }
        rf      = { defs={} expr=v6660[1] }
        vm      = { defs={} expr=v6661[1] }
        ac      = { defs={} expr=v6662[1] }
        vif     = { defs={} expr=v6663[1] }
        vip     = { defs={} expr=v6664[1] }
        id      = { defs={} expr=v6665[1] }
        ?22     = { defs={} expr=v6666[1] }
        ?23     = { defs={} expr=v6667[1] }
        ?24     = { defs={} expr=v6668[1] }
        ?25     = { defs={} expr=v6669[1] }
        ?26     = { defs={} expr=v6670[1] }
        ?27     = { defs={} expr=v6671[1] }
        ?28     = { defs={} expr=v6672[1] }
        ?29     = { defs={} expr=v6673[1] }
        ?30     = { defs={} expr=v6674[1] }
        ?31     = { defs={} expr=v6675[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566} expr=0x08048569[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6635[32] -16[32]) 3[32]) }
          value = { defs={} expr=v6787[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6635[32] -16[32]) 2[32]) }
          value = { defs={} expr=v6786[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6635[32] -16[32]) 1[32]) }
          value = { defs={} expr=v6785[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v6635[32] -16[32]) }
          value = { defs={} expr=v6784[8] }
          flags = { rdonly }
0x8048569:jne    0x08048560<<Insn>>
    registers:
        ax      = { defs={} expr=v6630[32] }
        cx      = { defs={} expr=v6631[32] }
        dx      = { defs={} expr=v6632[32] }
        bx      = { defs={} expr=v6633[32] }
        sp      = { defs={} expr=v6634[32] }
        bp      = { defs={} expr=v6635[32] }
        si      = { defs={0x08048563} expr=(add[32] v6636[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6637[32] 1[32]) }
        es      = { defs={} expr=v6638[16] }
        cs      = { defs={} expr=v6639[16] }
        ss      = { defs={} expr=v6640[16] }
        ds      = { defs={} expr=v6641[16] }
        fs      = { defs={} expr=v6642[16] }
        gs      = { defs={} expr=v6643[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v6645[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v6647[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v6649[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v6652[1] }
        if      = { defs={} expr=v6653[1] }
        df      = { defs={} expr=v6654[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6637[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v6656[1] }
        iopl1   = { defs={} expr=v6657[1] }
        nt      = { defs={} expr=v6658[1] }
        ?15     = { defs={} expr=v6659[1] }
        rf      = { defs={} expr=v6660[1] }
        vm      = { defs={} expr=v6661[1] }
        ac      = { defs={} expr=v6662[1] }
        vif     = { defs={} expr=v6663[1] }
        vip     = { defs={} expr=v6664[1] }
        id      = { defs={} expr=v6665[1] }
        ?22     = { defs={} expr=v6666[1] }
        ?23     = { defs={} expr=v6667[1] }
        ?24     = { defs={} expr=v6668[1] }
        ?25     = { defs={} expr=v6669[1] }
        ?26     = { defs={} expr=v6670[1] }
        ?27     = { defs={} expr=v6671[1] }
        ?28     = { defs={} expr=v6672[1] }
        ?29     = { defs={} expr=v6673[1] }
        ?30     = { defs={} expr=v6674[1] }
        ?31     = { defs={} expr=v6675[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566,0x08048569} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6784[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6785[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6786[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6787[8]))) (add[32] (invert[32] (add[32] v6637[32] 1[32])) 1[32])))) 0x08048560[32] 0x0804856b[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6635[32] -16[32]) 3[32]) }
          value = { defs={} expr=v6787[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6635[32] -16[32]) 2[32]) }
          value = { defs={} expr=v6786[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6635[32] -16[32]) 1[32]) }
          value = { defs={} expr=v6785[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v6635[32] -16[32]) }
          value = { defs={} expr=v6784[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804856b:call   0x080485b0<_fini>
    registers:
        ax      = { defs={} expr=v6894[32] }
        cx      = { defs={} expr=v6895[32] }
        dx      = { defs={} expr=v6896[32] }
        bx      = { defs={} expr=v6897[32] }
        sp      = { defs={0x0804856b} expr=(add[32] v6898[32] -4[32]) }
        bp      = { defs={} expr=v6899[32] }
        si      = { defs={} expr=v6900[32] }
        di      = { defs={} expr=v6901[32] }
        es      = { defs={} expr=v6902[16] }
        cs      = { defs={} expr=v6903[16] }
        ss      = { defs={} expr=v6904[16] }
        ds      = { defs={} expr=v6905[16] }
        fs      = { defs={} expr=v6906[16] }
        gs      = { defs={} expr=v6907[16] }
        cf      = { defs={} expr=v6908[1] }
        ?1      = { defs={} expr=v6909[1] }
        pf      = { defs={} expr=v6910[1] }
        ?3      = { defs={} expr=v6911[1] }
        af      = { defs={} expr=v6912[1] }
        ?5      = { defs={} expr=v6913[1] }
        zf      = { defs={} expr=v6914[1] }
        sf      = { defs={} expr=v6915[1] }
        tf      = { defs={} expr=v6916[1] }
        if      = { defs={} expr=v6917[1] }
        df      = { defs={} expr=v6918[1] }
        of      = { defs={} expr=v6919[1] }
        iopl0   = { defs={} expr=v6920[1] }
        iopl1   = { defs={} expr=v6921[1] }
        nt      = { defs={} expr=v6922[1] }
        ?15     = { defs={} expr=v6923[1] }
        rf      = { defs={} expr=v6924[1] }
        vm      = { defs={} expr=v6925[1] }
        ac      = { defs={} expr=v6926[1] }
        vif     = { defs={} expr=v6927[1] }
        vip     = { defs={} expr=v6928[1] }
        id      = { defs={} expr=v6929[1] }
        ?22     = { defs={} expr=v6930[1] }
        ?23     = { defs={} expr=v6931[1] }
        ?24     = { defs={} expr=v6932[1] }
        ?25     = { defs={} expr=v6933[1] }
        ?26     = { defs={} expr=v6934[1] }
        ?27     = { defs={} expr=v6935[1] }
        ?28     = { defs={} expr=v6936[1] }
        ?29     = { defs={} expr=v6937[1] }
        ?30     = { defs={} expr=v6938[1] }
        ?31     = { defs={} expr=v6939[1] }
        ip      = { defs={0x0804856b} expr=0x080485b0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6898[32] -4[32]) 3[32]) }
          value = { defs={0x0804856b} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6898[32] -4[32]) 2[32]) }
          value = { defs={0x0804856b} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6898[32] -4[32]) 1[32]) }
          value = { defs={0x0804856b} expr=-123[8] }
          flags = { }
        address = { defs={0x0804856b} expr=(add[32] v6898[32] -4[32]) }
          value = { defs={0x0804856b} expr=112[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048570:add    esp, 0x0c
    registers:
        ax      = { defs={} expr=v7001[32] }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={} expr=v7004[32] }
        sp      = { defs={0x08048570} expr=(add[32] v7005[32] 12[32]) }
        bp      = { defs={} expr=v7006[32] }
        si      = { defs={} expr=v7007[32] }
        di      = { defs={} expr=v7008[32] }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))))) }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v7005[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v7005[32] 12[32])) }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048570} expr=0x08048573[32] }
    memory:
    init mem:
0x8048573:pop    ebx
    registers:
        ax      = { defs={} expr=v7001[32] }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7104[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7105[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7106[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7107[8]))) }
        sp      = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v7005[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v7006[32] }
        si      = { defs={} expr=v7007[32] }
        di      = { defs={} expr=v7008[32] }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))))) }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v7005[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v7005[32] 12[32])) }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048570,0x08048573} expr=0x08048574[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 3[32]) }
          value = { defs={} expr=v7107[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 2[32]) }
          value = { defs={} expr=v7106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 1[32]) }
          value = { defs={} expr=v7105[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v7005[32] 12[32]) }
          value = { defs={} expr=v7104[8] }
          flags = { rdonly }
0x8048574:pop    esi
    registers:
        ax      = { defs={} expr=v7001[32] }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7104[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7105[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7106[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7107[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v7006[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7121[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7122[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7123[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7124[8]))) }
        di      = { defs={} expr=v7008[32] }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))))) }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v7005[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v7005[32] 12[32])) }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574} expr=0x08048575[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7124[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7123[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7122[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v7005[32] 12[32]) 4[32]) }
          value = { defs={} expr=v7121[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 3[32]) }
          value = { defs={} expr=v7107[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 2[32]) }
          value = { defs={} expr=v7106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 1[32]) }
          value = { defs={} expr=v7105[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v7005[32] 12[32]) }
          value = { defs={} expr=v7104[8] }
          flags = { rdonly }
0x8048575:pop    edi
    registers:
        ax      = { defs={} expr=v7001[32] }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7104[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7105[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7106[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7107[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v7006[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7121[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7122[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7123[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7124[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7138[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7139[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7140[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7141[8]))) }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))))) }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v7005[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v7005[32] 12[32])) }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=0x08048576[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7141[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7140[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7139[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7138[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7124[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7123[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7122[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v7005[32] 12[32]) 4[32]) }
          value = { defs={} expr=v7121[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 3[32]) }
          value = { defs={} expr=v7107[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 2[32]) }
          value = { defs={} expr=v7106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 1[32]) }
          value = { defs={} expr=v7105[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v7005[32] 12[32]) }
          value = { defs={} expr=v7104[8] }
          flags = { rdonly }
0x8048576:pop    ebp
    registers:
        ax      = { defs={} expr=v7001[32] }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7104[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7105[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7106[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7107[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7155[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7156[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7157[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7158[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7121[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7122[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7123[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7124[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7138[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7139[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7140[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7141[8]))) }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))))) }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v7005[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v7005[32] 12[32])) }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=0x08048577[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7158[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7157[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7156[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7155[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7141[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7140[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7139[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7138[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7124[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7123[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7122[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v7005[32] 12[32]) 4[32]) }
          value = { defs={} expr=v7121[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 3[32]) }
          value = { defs={} expr=v7107[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 2[32]) }
          value = { defs={} expr=v7106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 1[32]) }
          value = { defs={} expr=v7105[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v7005[32] 12[32]) }
          value = { defs={} expr=v7104[8] }
          flags = { rdonly }
0x8048577:ret    
    registers:
        ax      = { defs={} expr=v7001[32] }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7104[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7105[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7106[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7107[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7155[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7156[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7157[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7158[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7121[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7122[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7123[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7124[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7138[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7139[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7140[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7141[8]))) }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v7005[32] 12[32]))))))) }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v7005[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v7005[32] 12[32])) }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7005[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v7005[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048577} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7172[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7173[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7174[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7175[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7175[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7174[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7173[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7172[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7158[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7157[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7156[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7155[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7141[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7140[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7139[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7138[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7124[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7123[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7122[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v7005[32] 12[32]) 4[32]) }
          value = { defs={} expr=v7121[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 3[32]) }
          value = { defs={} expr=v7107[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 2[32]) }
          value = { defs={} expr=v7106[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7005[32] 12[32]) 1[32]) }
          value = { defs={} expr=v7105[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v7005[32] 12[32]) }
          value = { defs={} expr=v7104[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048580:push   ebp
    registers:
        ax      = { defs={} expr=v7230[32] }
        cx      = { defs={} expr=v7231[32] }
        dx      = { defs={} expr=v7232[32] }
        bx      = { defs={} expr=v7233[32] }
        sp      = { defs={0x08048580} expr=(add[32] v7234[32] -4[32]) }
        bp      = { defs={} expr=v7235[32] }
        si      = { defs={} expr=v7236[32] }
        di      = { defs={} expr=v7237[32] }
        es      = { defs={} expr=v7238[16] }
        cs      = { defs={} expr=v7239[16] }
        ss      = { defs={} expr=v7240[16] }
        ds      = { defs={} expr=v7241[16] }
        fs      = { defs={} expr=v7242[16] }
        gs      = { defs={} expr=v7243[16] }
        cf      = { defs={} expr=v7244[1] }
        ?1      = { defs={} expr=v7245[1] }
        pf      = { defs={} expr=v7246[1] }
        ?3      = { defs={} expr=v7247[1] }
        af      = { defs={} expr=v7248[1] }
        ?5      = { defs={} expr=v7249[1] }
        zf      = { defs={} expr=v7250[1] }
        sf      = { defs={} expr=v7251[1] }
        tf      = { defs={} expr=v7252[1] }
        if      = { defs={} expr=v7253[1] }
        df      = { defs={} expr=v7254[1] }
        of      = { defs={} expr=v7255[1] }
        iopl0   = { defs={} expr=v7256[1] }
        iopl1   = { defs={} expr=v7257[1] }
        nt      = { defs={} expr=v7258[1] }
        ?15     = { defs={} expr=v7259[1] }
        rf      = { defs={} expr=v7260[1] }
        vm      = { defs={} expr=v7261[1] }
        ac      = { defs={} expr=v7262[1] }
        vif     = { defs={} expr=v7263[1] }
        vip     = { defs={} expr=v7264[1] }
        id      = { defs={} expr=v7265[1] }
        ?22     = { defs={} expr=v7266[1] }
        ?23     = { defs={} expr=v7267[1] }
        ?24     = { defs={} expr=v7268[1] }
        ?25     = { defs={} expr=v7269[1] }
        ?26     = { defs={} expr=v7270[1] }
        ?27     = { defs={} expr=v7271[1] }
        ?28     = { defs={} expr=v7272[1] }
        ?29     = { defs={} expr=v7273[1] }
        ?30     = { defs={} expr=v7274[1] }
        ?31     = { defs={} expr=v7275[1] }
        ip      = { defs={0x08048580} expr=0x08048581[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7235[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7234[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7235[32]) }
          flags = { }
    init mem:
0x8048581:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v7230[32] }
        cx      = { defs={} expr=v7231[32] }
        dx      = { defs={} expr=v7232[32] }
        bx      = { defs={} expr=v7233[32] }
        sp      = { defs={0x08048580} expr=(add[32] v7234[32] -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7234[32] -4[32]) }
        si      = { defs={} expr=v7236[32] }
        di      = { defs={} expr=v7237[32] }
        es      = { defs={} expr=v7238[16] }
        cs      = { defs={} expr=v7239[16] }
        ss      = { defs={} expr=v7240[16] }
        ds      = { defs={} expr=v7241[16] }
        fs      = { defs={} expr=v7242[16] }
        gs      = { defs={} expr=v7243[16] }
        cf      = { defs={} expr=v7244[1] }
        ?1      = { defs={} expr=v7245[1] }
        pf      = { defs={} expr=v7246[1] }
        ?3      = { defs={} expr=v7247[1] }
        af      = { defs={} expr=v7248[1] }
        ?5      = { defs={} expr=v7249[1] }
        zf      = { defs={} expr=v7250[1] }
        sf      = { defs={} expr=v7251[1] }
        tf      = { defs={} expr=v7252[1] }
        if      = { defs={} expr=v7253[1] }
        df      = { defs={} expr=v7254[1] }
        of      = { defs={} expr=v7255[1] }
        iopl0   = { defs={} expr=v7256[1] }
        iopl1   = { defs={} expr=v7257[1] }
        nt      = { defs={} expr=v7258[1] }
        ?15     = { defs={} expr=v7259[1] }
        rf      = { defs={} expr=v7260[1] }
        vm      = { defs={} expr=v7261[1] }
        ac      = { defs={} expr=v7262[1] }
        vif     = { defs={} expr=v7263[1] }
        vip     = { defs={} expr=v7264[1] }
        id      = { defs={} expr=v7265[1] }
        ?22     = { defs={} expr=v7266[1] }
        ?23     = { defs={} expr=v7267[1] }
        ?24     = { defs={} expr=v7268[1] }
        ?25     = { defs={} expr=v7269[1] }
        ?26     = { defs={} expr=v7270[1] }
        ?27     = { defs={} expr=v7271[1] }
        ?28     = { defs={} expr=v7272[1] }
        ?29     = { defs={} expr=v7273[1] }
        ?30     = { defs={} expr=v7274[1] }
        ?31     = { defs={} expr=v7275[1] }
        ip      = { defs={0x08048580,0x08048581} expr=0x08048583[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7235[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7234[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7235[32]) }
          flags = { }
    init mem:
0x8048583:push   ebx
    registers:
        ax      = { defs={} expr=v7230[32] }
        cx      = { defs={} expr=v7231[32] }
        dx      = { defs={} expr=v7232[32] }
        bx      = { defs={} expr=v7233[32] }
        sp      = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7234[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7234[32] -4[32]) }
        si      = { defs={} expr=v7236[32] }
        di      = { defs={} expr=v7237[32] }
        es      = { defs={} expr=v7238[16] }
        cs      = { defs={} expr=v7239[16] }
        ss      = { defs={} expr=v7240[16] }
        ds      = { defs={} expr=v7241[16] }
        fs      = { defs={} expr=v7242[16] }
        gs      = { defs={} expr=v7243[16] }
        cf      = { defs={} expr=v7244[1] }
        ?1      = { defs={} expr=v7245[1] }
        pf      = { defs={} expr=v7246[1] }
        ?3      = { defs={} expr=v7247[1] }
        af      = { defs={} expr=v7248[1] }
        ?5      = { defs={} expr=v7249[1] }
        zf      = { defs={} expr=v7250[1] }
        sf      = { defs={} expr=v7251[1] }
        tf      = { defs={} expr=v7252[1] }
        if      = { defs={} expr=v7253[1] }
        df      = { defs={} expr=v7254[1] }
        of      = { defs={} expr=v7255[1] }
        iopl0   = { defs={} expr=v7256[1] }
        iopl1   = { defs={} expr=v7257[1] }
        nt      = { defs={} expr=v7258[1] }
        ?15     = { defs={} expr=v7259[1] }
        rf      = { defs={} expr=v7260[1] }
        vm      = { defs={} expr=v7261[1] }
        ac      = { defs={} expr=v7262[1] }
        vif     = { defs={} expr=v7263[1] }
        vip     = { defs={} expr=v7264[1] }
        id      = { defs={} expr=v7265[1] }
        ?22     = { defs={} expr=v7266[1] }
        ?23     = { defs={} expr=v7267[1] }
        ?24     = { defs={} expr=v7268[1] }
        ?25     = { defs={} expr=v7269[1] }
        ?26     = { defs={} expr=v7270[1] }
        ?27     = { defs={} expr=v7271[1] }
        ?28     = { defs={} expr=v7272[1] }
        ?29     = { defs={} expr=v7273[1] }
        ?30     = { defs={} expr=v7274[1] }
        ?31     = { defs={} expr=v7275[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583} expr=0x08048584[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7233[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7234[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7235[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7234[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7235[32]) }
          flags = { }
    init mem:
0x8048584:sub    esp, 0x04
    registers:
        ax      = { defs={} expr=v7230[32] }
        cx      = { defs={} expr=v7231[32] }
        dx      = { defs={} expr=v7232[32] }
        bx      = { defs={} expr=v7233[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7234[32] -4[32]) }
        si      = { defs={} expr=v7236[32] }
        di      = { defs={} expr=v7237[32] }
        es      = { defs={} expr=v7238[16] }
        cs      = { defs={} expr=v7239[16] }
        ss      = { defs={} expr=v7240[16] }
        ds      = { defs={} expr=v7241[16] }
        fs      = { defs={} expr=v7242[16] }
        gs      = { defs={} expr=v7243[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7245[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v7247[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7249[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v7252[1] }
        if      = { defs={} expr=v7253[1] }
        df      = { defs={} expr=v7254[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7256[1] }
        iopl1   = { defs={} expr=v7257[1] }
        nt      = { defs={} expr=v7258[1] }
        ?15     = { defs={} expr=v7259[1] }
        rf      = { defs={} expr=v7260[1] }
        vm      = { defs={} expr=v7261[1] }
        ac      = { defs={} expr=v7262[1] }
        vif     = { defs={} expr=v7263[1] }
        vip     = { defs={} expr=v7264[1] }
        id      = { defs={} expr=v7265[1] }
        ?22     = { defs={} expr=v7266[1] }
        ?23     = { defs={} expr=v7267[1] }
        ?24     = { defs={} expr=v7268[1] }
        ?25     = { defs={} expr=v7269[1] }
        ?26     = { defs={} expr=v7270[1] }
        ?27     = { defs={} expr=v7271[1] }
        ?28     = { defs={} expr=v7272[1] }
        ?29     = { defs={} expr=v7273[1] }
        ?30     = { defs={} expr=v7274[1] }
        ?31     = { defs={} expr=v7275[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584} expr=0x08048587[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7233[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7234[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7235[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7234[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7235[32]) }
          flags = { }
    init mem:
0x8048587:mov    ebx, 0x080495e8<.ctors>
    registers:
        ax      = { defs={} expr=v7230[32] }
        cx      = { defs={} expr=v7231[32] }
        dx      = { defs={} expr=v7232[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7234[32] -4[32]) }
        si      = { defs={} expr=v7236[32] }
        di      = { defs={} expr=v7237[32] }
        es      = { defs={} expr=v7238[16] }
        cs      = { defs={} expr=v7239[16] }
        ss      = { defs={} expr=v7240[16] }
        ds      = { defs={} expr=v7241[16] }
        fs      = { defs={} expr=v7242[16] }
        gs      = { defs={} expr=v7243[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7245[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v7247[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7249[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v7252[1] }
        if      = { defs={} expr=v7253[1] }
        df      = { defs={} expr=v7254[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7256[1] }
        iopl1   = { defs={} expr=v7257[1] }
        nt      = { defs={} expr=v7258[1] }
        ?15     = { defs={} expr=v7259[1] }
        rf      = { defs={} expr=v7260[1] }
        vm      = { defs={} expr=v7261[1] }
        ac      = { defs={} expr=v7262[1] }
        vif     = { defs={} expr=v7263[1] }
        vip     = { defs={} expr=v7264[1] }
        id      = { defs={} expr=v7265[1] }
        ?22     = { defs={} expr=v7266[1] }
        ?23     = { defs={} expr=v7267[1] }
        ?24     = { defs={} expr=v7268[1] }
        ?25     = { defs={} expr=v7269[1] }
        ?26     = { defs={} expr=v7270[1] }
        ?27     = { defs={} expr=v7271[1] }
        ?28     = { defs={} expr=v7272[1] }
        ?29     = { defs={} expr=v7273[1] }
        ?30     = { defs={} expr=v7274[1] }
        ?31     = { defs={} expr=v7275[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587} expr=0x0804858c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7233[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7234[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7235[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7234[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7235[32]) }
          flags = { }
    init mem:
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8<.ctors>]
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) }
        cx      = { defs={} expr=v7231[32] }
        dx      = { defs={} expr=v7232[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7234[32] -4[32]) }
        si      = { defs={} expr=v7236[32] }
        di      = { defs={} expr=v7237[32] }
        es      = { defs={} expr=v7238[16] }
        cs      = { defs={} expr=v7239[16] }
        ss      = { defs={} expr=v7240[16] }
        ds      = { defs={} expr=v7241[16] }
        fs      = { defs={} expr=v7242[16] }
        gs      = { defs={} expr=v7243[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7245[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v7247[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7249[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v7252[1] }
        if      = { defs={} expr=v7253[1] }
        df      = { defs={} expr=v7254[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7234[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7256[1] }
        iopl1   = { defs={} expr=v7257[1] }
        nt      = { defs={} expr=v7258[1] }
        ?15     = { defs={} expr=v7259[1] }
        rf      = { defs={} expr=v7260[1] }
        vm      = { defs={} expr=v7261[1] }
        ac      = { defs={} expr=v7262[1] }
        vif     = { defs={} expr=v7263[1] }
        vip     = { defs={} expr=v7264[1] }
        id      = { defs={} expr=v7265[1] }
        ?22     = { defs={} expr=v7266[1] }
        ?23     = { defs={} expr=v7267[1] }
        ?24     = { defs={} expr=v7268[1] }
        ?25     = { defs={} expr=v7269[1] }
        ?26     = { defs={} expr=v7270[1] }
        ?27     = { defs={} expr=v7271[1] }
        ?28     = { defs={} expr=v7272[1] }
        ?29     = { defs={} expr=v7273[1] }
        ?30     = { defs={} expr=v7274[1] }
        ?31     = { defs={} expr=v7275[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c} expr=0x08048591[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7233[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7234[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7235[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7234[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7235[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7368[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7367[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7366[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7365[8] }
          flags = { rdonly }
0x8048591:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) }
        cx      = { defs={} expr=v7231[32] }
        dx      = { defs={} expr=v7232[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7234[32] -4[32]) }
        si      = { defs={} expr=v7236[32] }
        di      = { defs={} expr=v7237[32] }
        es      = { defs={} expr=v7238[16] }
        cs      = { defs={} expr=v7239[16] }
        ss      = { defs={} expr=v7240[16] }
        ds      = { defs={} expr=v7241[16] }
        fs      = { defs={} expr=v7242[16] }
        gs      = { defs={} expr=v7243[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7245[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7247[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7249[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32])) }
        tf      = { defs={} expr=v7252[1] }
        if      = { defs={} expr=v7253[1] }
        df      = { defs={} expr=v7254[1] }
        of      = { defs={0x0804858c,0x08048591} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v7256[1] }
        iopl1   = { defs={} expr=v7257[1] }
        nt      = { defs={} expr=v7258[1] }
        ?15     = { defs={} expr=v7259[1] }
        rf      = { defs={} expr=v7260[1] }
        vm      = { defs={} expr=v7261[1] }
        ac      = { defs={} expr=v7262[1] }
        vif     = { defs={} expr=v7263[1] }
        vip     = { defs={} expr=v7264[1] }
        id      = { defs={} expr=v7265[1] }
        ?22     = { defs={} expr=v7266[1] }
        ?23     = { defs={} expr=v7267[1] }
        ?24     = { defs={} expr=v7268[1] }
        ?25     = { defs={} expr=v7269[1] }
        ?26     = { defs={} expr=v7270[1] }
        ?27     = { defs={} expr=v7271[1] }
        ?28     = { defs={} expr=v7272[1] }
        ?29     = { defs={} expr=v7273[1] }
        ?30     = { defs={} expr=v7274[1] }
        ?31     = { defs={} expr=v7275[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591} expr=0x08048594[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7233[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7234[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7235[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7234[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7235[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7368[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7367[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7366[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7365[8] }
          flags = { rdonly }
0x8048594:je     0x080485ac<<Insn>>
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) }
        cx      = { defs={} expr=v7231[32] }
        dx      = { defs={} expr=v7232[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7234[32] -4[32]) }
        si      = { defs={} expr=v7236[32] }
        di      = { defs={} expr=v7237[32] }
        es      = { defs={} expr=v7238[16] }
        cs      = { defs={} expr=v7239[16] }
        ss      = { defs={} expr=v7240[16] }
        ds      = { defs={} expr=v7241[16] }
        fs      = { defs={} expr=v7242[16] }
        gs      = { defs={} expr=v7243[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7245[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7247[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7249[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32])) }
        tf      = { defs={} expr=v7252[1] }
        if      = { defs={} expr=v7253[1] }
        df      = { defs={} expr=v7254[1] }
        of      = { defs={0x0804858c,0x08048591} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v7256[1] }
        iopl1   = { defs={} expr=v7257[1] }
        nt      = { defs={} expr=v7258[1] }
        ?15     = { defs={} expr=v7259[1] }
        rf      = { defs={} expr=v7260[1] }
        vm      = { defs={} expr=v7261[1] }
        ac      = { defs={} expr=v7262[1] }
        vif     = { defs={} expr=v7263[1] }
        vip     = { defs={} expr=v7264[1] }
        id      = { defs={} expr=v7265[1] }
        ?22     = { defs={} expr=v7266[1] }
        ?23     = { defs={} expr=v7267[1] }
        ?24     = { defs={} expr=v7268[1] }
        ?25     = { defs={} expr=v7269[1] }
        ?26     = { defs={} expr=v7270[1] }
        ?27     = { defs={} expr=v7271[1] }
        ?28     = { defs={} expr=v7272[1] }
        ?29     = { defs={} expr=v7273[1] }
        ?30     = { defs={} expr=v7274[1] }
        ?31     = { defs={} expr=v7275[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594} expr=(ite[32] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7365[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7366[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7367[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7368[8]))) 1[32])) 0x080485ac[32] 0x08048596[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x08048583} expr=(extract[8] 24[32] 32[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x08048583} expr=(extract[8] 16[32] 24[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7234[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x08048583} expr=(extract[8] 8[32] 16[32] v7233[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7234[32] -4[32]) -4[32]) }
          value = { defs={0x08048583} expr=(extract[8] 0[32] 8[32] v7233[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 3[32]) }
          value = { defs={0x08048580} expr=(extract[8] 24[32] 32[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 2[32]) }
          value = { defs={0x08048580} expr=(extract[8] 16[32] 24[32] v7235[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7234[32] -4[32]) 1[32]) }
          value = { defs={0x08048580} expr=(extract[8] 8[32] 16[32] v7235[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7234[32] -4[32]) }
          value = { defs={0x08048580} expr=(extract[8] 0[32] 8[32] v7235[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7368[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7367[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7366[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7365[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048596:lea    esi, [esi + 0x00]
    registers:
        ax      = { defs={} expr=v7480[32] }
        cx      = { defs={} expr=v7481[32] }
        dx      = { defs={} expr=v7482[32] }
        bx      = { defs={} expr=v7483[32] }
        sp      = { defs={} expr=v7484[32] }
        bp      = { defs={} expr=v7485[32] }
        si      = { defs={0x08048596} expr=v7486[32] }
        di      = { defs={} expr=v7487[32] }
        es      = { defs={} expr=v7488[16] }
        cs      = { defs={} expr=v7489[16] }
        ss      = { defs={} expr=v7490[16] }
        ds      = { defs={} expr=v7491[16] }
        fs      = { defs={} expr=v7492[16] }
        gs      = { defs={} expr=v7493[16] }
        cf      = { defs={} expr=v7494[1] }
        ?1      = { defs={} expr=v7495[1] }
        pf      = { defs={} expr=v7496[1] }
        ?3      = { defs={} expr=v7497[1] }
        af      = { defs={} expr=v7498[1] }
        ?5      = { defs={} expr=v7499[1] }
        zf      = { defs={} expr=v7500[1] }
        sf      = { defs={} expr=v7501[1] }
        tf      = { defs={} expr=v7502[1] }
        if      = { defs={} expr=v7503[1] }
        df      = { defs={} expr=v7504[1] }
        of      = { defs={} expr=v7505[1] }
        iopl0   = { defs={} expr=v7506[1] }
        iopl1   = { defs={} expr=v7507[1] }
        nt      = { defs={} expr=v7508[1] }
        ?15     = { defs={} expr=v7509[1] }
        rf      = { defs={} expr=v7510[1] }
        vm      = { defs={} expr=v7511[1] }
        ac      = { defs={} expr=v7512[1] }
        vif     = { defs={} expr=v7513[1] }
        vip     = { defs={} expr=v7514[1] }
        id      = { defs={} expr=v7515[1] }
        ?22     = { defs={} expr=v7516[1] }
        ?23     = { defs={} expr=v7517[1] }
        ?24     = { defs={} expr=v7518[1] }
        ?25     = { defs={} expr=v7519[1] }
        ?26     = { defs={} expr=v7520[1] }
        ?27     = { defs={} expr=v7521[1] }
        ?28     = { defs={} expr=v7522[1] }
        ?29     = { defs={} expr=v7523[1] }
        ?30     = { defs={} expr=v7524[1] }
        ?31     = { defs={} expr=v7525[1] }
        ip      = { defs={0x08048596} expr=0x08048599[32] }
    memory:
    init mem:
0x8048599:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v7480[32] }
        cx      = { defs={} expr=v7481[32] }
        dx      = { defs={} expr=v7482[32] }
        bx      = { defs={} expr=v7483[32] }
        sp      = { defs={} expr=v7484[32] }
        bp      = { defs={} expr=v7485[32] }
        si      = { defs={0x08048596} expr=v7486[32] }
        di      = { defs={0x08048599} expr=v7487[32] }
        es      = { defs={} expr=v7488[16] }
        cs      = { defs={} expr=v7489[16] }
        ss      = { defs={} expr=v7490[16] }
        ds      = { defs={} expr=v7491[16] }
        fs      = { defs={} expr=v7492[16] }
        gs      = { defs={} expr=v7493[16] }
        cf      = { defs={} expr=v7494[1] }
        ?1      = { defs={} expr=v7495[1] }
        pf      = { defs={} expr=v7496[1] }
        ?3      = { defs={} expr=v7497[1] }
        af      = { defs={} expr=v7498[1] }
        ?5      = { defs={} expr=v7499[1] }
        zf      = { defs={} expr=v7500[1] }
        sf      = { defs={} expr=v7501[1] }
        tf      = { defs={} expr=v7502[1] }
        if      = { defs={} expr=v7503[1] }
        df      = { defs={} expr=v7504[1] }
        of      = { defs={} expr=v7505[1] }
        iopl0   = { defs={} expr=v7506[1] }
        iopl1   = { defs={} expr=v7507[1] }
        nt      = { defs={} expr=v7508[1] }
        ?15     = { defs={} expr=v7509[1] }
        rf      = { defs={} expr=v7510[1] }
        vm      = { defs={} expr=v7511[1] }
        ac      = { defs={} expr=v7512[1] }
        vif     = { defs={} expr=v7513[1] }
        vip     = { defs={} expr=v7514[1] }
        id      = { defs={} expr=v7515[1] }
        ?22     = { defs={} expr=v7516[1] }
        ?23     = { defs={} expr=v7517[1] }
        ?24     = { defs={} expr=v7518[1] }
        ?25     = { defs={} expr=v7519[1] }
        ?26     = { defs={} expr=v7520[1] }
        ?27     = { defs={} expr=v7521[1] }
        ?28     = { defs={} expr=v7522[1] }
        ?29     = { defs={} expr=v7523[1] }
        ?30     = { defs={} expr=v7524[1] }
        ?31     = { defs={} expr=v7525[1] }
        ip      = { defs={0x08048596,0x08048599} expr=0x080485a0[32] }
    memory:
    init mem:
0x80485a0:sub    ebx, 0x04
    registers:
        ax      = { defs={} expr=v7480[32] }
        cx      = { defs={} expr=v7481[32] }
        dx      = { defs={} expr=v7482[32] }
        bx      = { defs={0x080485a0} expr=(add[32] v7483[32] -4[32]) }
        sp      = { defs={} expr=v7484[32] }
        bp      = { defs={} expr=v7485[32] }
        si      = { defs={0x08048596} expr=v7486[32] }
        di      = { defs={0x08048599} expr=v7487[32] }
        es      = { defs={} expr=v7488[16] }
        cs      = { defs={} expr=v7489[16] }
        ss      = { defs={} expr=v7490[16] }
        ds      = { defs={} expr=v7491[16] }
        fs      = { defs={} expr=v7492[16] }
        gs      = { defs={} expr=v7493[16] }
        cf      = { defs={0x080485a0} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7483[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7483[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7495[1] }
        pf      = { defs={0x080485a0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))))))) }
        ?3      = { defs={} expr=v7497[1] }
        af      = { defs={0x080485a0} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7483[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7483[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7499[1] }
        zf      = { defs={0x080485a0} expr=(zerop[1] (add[32] v7483[32] -4[32])) }
        sf      = { defs={0x080485a0} expr=(extract[1] 31[32] 32[32] (add[32] v7483[32] -4[32])) }
        tf      = { defs={} expr=v7502[1] }
        if      = { defs={} expr=v7503[1] }
        df      = { defs={} expr=v7504[1] }
        of      = { defs={0x080485a0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7483[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7483[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7483[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7483[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7506[1] }
        iopl1   = { defs={} expr=v7507[1] }
        nt      = { defs={} expr=v7508[1] }
        ?15     = { defs={} expr=v7509[1] }
        rf      = { defs={} expr=v7510[1] }
        vm      = { defs={} expr=v7511[1] }
        ac      = { defs={} expr=v7512[1] }
        vif     = { defs={} expr=v7513[1] }
        vip     = { defs={} expr=v7514[1] }
        id      = { defs={} expr=v7515[1] }
        ?22     = { defs={} expr=v7516[1] }
        ?23     = { defs={} expr=v7517[1] }
        ?24     = { defs={} expr=v7518[1] }
        ?25     = { defs={} expr=v7519[1] }
        ?26     = { defs={} expr=v7520[1] }
        ?27     = { defs={} expr=v7521[1] }
        ?28     = { defs={} expr=v7522[1] }
        ?29     = { defs={} expr=v7523[1] }
        ?30     = { defs={} expr=v7524[1] }
        ?31     = { defs={} expr=v7525[1] }
        ip      = { defs={0x08048596,0x08048599,0x080485a0} expr=0x080485a3[32] }
    memory:
    init mem:
0x80485a3:call   eax
    registers:
        ax      = { defs={} expr=v7480[32] }
        cx      = { defs={} expr=v7481[32] }
        dx      = { defs={} expr=v7482[32] }
        bx      = { defs={0x080485a0} expr=(add[32] v7483[32] -4[32]) }
        sp      = { defs={0x080485a3} expr=(add[32] v7484[32] -4[32]) }
        bp      = { defs={} expr=v7485[32] }
        si      = { defs={0x08048596} expr=v7486[32] }
        di      = { defs={0x08048599} expr=v7487[32] }
        es      = { defs={} expr=v7488[16] }
        cs      = { defs={} expr=v7489[16] }
        ss      = { defs={} expr=v7490[16] }
        ds      = { defs={} expr=v7491[16] }
        fs      = { defs={} expr=v7492[16] }
        gs      = { defs={} expr=v7493[16] }
        cf      = { defs={0x080485a0} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7483[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7483[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7495[1] }
        pf      = { defs={0x080485a0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v7483[32] -4[32]))))))) }
        ?3      = { defs={} expr=v7497[1] }
        af      = { defs={0x080485a0} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7483[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7483[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7499[1] }
        zf      = { defs={0x080485a0} expr=(zerop[1] (add[32] v7483[32] -4[32])) }
        sf      = { defs={0x080485a0} expr=(extract[1] 31[32] 32[32] (add[32] v7483[32] -4[32])) }
        tf      = { defs={} expr=v7502[1] }
        if      = { defs={} expr=v7503[1] }
        df      = { defs={} expr=v7504[1] }
        of      = { defs={0x080485a0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7483[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7483[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7483[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7483[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7506[1] }
        iopl1   = { defs={} expr=v7507[1] }
        nt      = { defs={} expr=v7508[1] }
        ?15     = { defs={} expr=v7509[1] }
        rf      = { defs={} expr=v7510[1] }
        vm      = { defs={} expr=v7511[1] }
        ac      = { defs={} expr=v7512[1] }
        vif     = { defs={} expr=v7513[1] }
        vip     = { defs={} expr=v7514[1] }
        id      = { defs={} expr=v7515[1] }
        ?22     = { defs={} expr=v7516[1] }
        ?23     = { defs={} expr=v7517[1] }
        ?24     = { defs={} expr=v7518[1] }
        ?25     = { defs={} expr=v7519[1] }
        ?26     = { defs={} expr=v7520[1] }
        ?27     = { defs={} expr=v7521[1] }
        ?28     = { defs={} expr=v7522[1] }
        ?29     = { defs={} expr=v7523[1] }
        ?30     = { defs={} expr=v7524[1] }
        ?31     = { defs={} expr=v7525[1] }
        ip      = { defs={0x080485a3} expr=v7480[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 3[32]) }
          value = { defs={0x08048596,0x08048599,0x080485a0,0x080485a3} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 2[32]) }
          value = { defs={0x08048596,0x08048599,0x080485a0,0x080485a3} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 1[32]) }
          value = { defs={0x08048596,0x08048599,0x080485a0,0x080485a3} expr=-123[8] }
          flags = { }
        address = { defs={0x080485a3} expr=(add[32] v7484[32] -4[32]) }
          value = { defs={0x08048596,0x08048599,0x080485a0,0x080485a3} expr=-91[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) }
        cx      = { defs={} expr=v7653[32] }
        dx      = { defs={} expr=v7654[32] }
        bx      = { defs={} expr=v7655[32] }
        sp      = { defs={} expr=v7656[32] }
        bp      = { defs={} expr=v7657[32] }
        si      = { defs={} expr=v7658[32] }
        di      = { defs={} expr=v7659[32] }
        es      = { defs={} expr=v7660[16] }
        cs      = { defs={} expr=v7661[16] }
        ss      = { defs={} expr=v7662[16] }
        ds      = { defs={} expr=v7663[16] }
        fs      = { defs={} expr=v7664[16] }
        gs      = { defs={} expr=v7665[16] }
        cf      = { defs={} expr=v7666[1] }
        ?1      = { defs={} expr=v7667[1] }
        pf      = { defs={} expr=v7668[1] }
        ?3      = { defs={} expr=v7669[1] }
        af      = { defs={} expr=v7670[1] }
        ?5      = { defs={} expr=v7671[1] }
        zf      = { defs={} expr=v7672[1] }
        sf      = { defs={} expr=v7673[1] }
        tf      = { defs={} expr=v7674[1] }
        if      = { defs={} expr=v7675[1] }
        df      = { defs={} expr=v7676[1] }
        of      = { defs={} expr=v7677[1] }
        iopl0   = { defs={} expr=v7678[1] }
        iopl1   = { defs={} expr=v7679[1] }
        nt      = { defs={} expr=v7680[1] }
        ?15     = { defs={} expr=v7681[1] }
        rf      = { defs={} expr=v7682[1] }
        vm      = { defs={} expr=v7683[1] }
        ac      = { defs={} expr=v7684[1] }
        vif     = { defs={} expr=v7685[1] }
        vip     = { defs={} expr=v7686[1] }
        id      = { defs={} expr=v7687[1] }
        ?22     = { defs={} expr=v7688[1] }
        ?23     = { defs={} expr=v7689[1] }
        ?24     = { defs={} expr=v7690[1] }
        ?25     = { defs={} expr=v7691[1] }
        ?26     = { defs={} expr=v7692[1] }
        ?27     = { defs={} expr=v7693[1] }
        ?28     = { defs={} expr=v7694[1] }
        ?29     = { defs={} expr=v7695[1] }
        ?30     = { defs={} expr=v7696[1] }
        ?31     = { defs={} expr=v7697[1] }
        ip      = { defs={0x080485a5} expr=0x080485a7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7655[32] 3[32]) }
          value = { defs={} expr=v7708[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7655[32] 2[32]) }
          value = { defs={} expr=v7707[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7655[32] 1[32]) }
          value = { defs={} expr=v7706[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7655[32] }
          value = { defs={} expr=v7705[8] }
          flags = { rdonly }
0x80485a7:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) }
        cx      = { defs={} expr=v7653[32] }
        dx      = { defs={} expr=v7654[32] }
        bx      = { defs={} expr=v7655[32] }
        sp      = { defs={} expr=v7656[32] }
        bp      = { defs={} expr=v7657[32] }
        si      = { defs={} expr=v7658[32] }
        di      = { defs={} expr=v7659[32] }
        es      = { defs={} expr=v7660[16] }
        cs      = { defs={} expr=v7661[16] }
        ss      = { defs={} expr=v7662[16] }
        ds      = { defs={} expr=v7663[16] }
        fs      = { defs={} expr=v7664[16] }
        gs      = { defs={} expr=v7665[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7667[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7669[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7671[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32])) }
        tf      = { defs={} expr=v7674[1] }
        if      = { defs={} expr=v7675[1] }
        df      = { defs={} expr=v7676[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v7678[1] }
        iopl1   = { defs={} expr=v7679[1] }
        nt      = { defs={} expr=v7680[1] }
        ?15     = { defs={} expr=v7681[1] }
        rf      = { defs={} expr=v7682[1] }
        vm      = { defs={} expr=v7683[1] }
        ac      = { defs={} expr=v7684[1] }
        vif     = { defs={} expr=v7685[1] }
        vip     = { defs={} expr=v7686[1] }
        id      = { defs={} expr=v7687[1] }
        ?22     = { defs={} expr=v7688[1] }
        ?23     = { defs={} expr=v7689[1] }
        ?24     = { defs={} expr=v7690[1] }
        ?25     = { defs={} expr=v7691[1] }
        ?26     = { defs={} expr=v7692[1] }
        ?27     = { defs={} expr=v7693[1] }
        ?28     = { defs={} expr=v7694[1] }
        ?29     = { defs={} expr=v7695[1] }
        ?30     = { defs={} expr=v7696[1] }
        ?31     = { defs={} expr=v7697[1] }
        ip      = { defs={0x080485a5,0x080485a7} expr=0x080485aa[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7655[32] 3[32]) }
          value = { defs={} expr=v7708[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7655[32] 2[32]) }
          value = { defs={} expr=v7707[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7655[32] 1[32]) }
          value = { defs={} expr=v7706[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7655[32] }
          value = { defs={} expr=v7705[8] }
          flags = { rdonly }
0x80485aa:jne    0x080485a0<<Insn>>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) }
        cx      = { defs={} expr=v7653[32] }
        dx      = { defs={} expr=v7654[32] }
        bx      = { defs={} expr=v7655[32] }
        sp      = { defs={} expr=v7656[32] }
        bp      = { defs={} expr=v7657[32] }
        si      = { defs={} expr=v7658[32] }
        di      = { defs={} expr=v7659[32] }
        es      = { defs={} expr=v7660[16] }
        cs      = { defs={} expr=v7661[16] }
        ss      = { defs={} expr=v7662[16] }
        ds      = { defs={} expr=v7663[16] }
        fs      = { defs={} expr=v7664[16] }
        gs      = { defs={} expr=v7665[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7667[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7669[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7671[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32])) }
        tf      = { defs={} expr=v7674[1] }
        if      = { defs={} expr=v7675[1] }
        df      = { defs={} expr=v7676[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v7678[1] }
        iopl1   = { defs={} expr=v7679[1] }
        nt      = { defs={} expr=v7680[1] }
        ?15     = { defs={} expr=v7681[1] }
        rf      = { defs={} expr=v7682[1] }
        vm      = { defs={} expr=v7683[1] }
        ac      = { defs={} expr=v7684[1] }
        vif     = { defs={} expr=v7685[1] }
        vip     = { defs={} expr=v7686[1] }
        id      = { defs={} expr=v7687[1] }
        ?22     = { defs={} expr=v7688[1] }
        ?23     = { defs={} expr=v7689[1] }
        ?24     = { defs={} expr=v7690[1] }
        ?25     = { defs={} expr=v7691[1] }
        ?26     = { defs={} expr=v7692[1] }
        ?27     = { defs={} expr=v7693[1] }
        ?28     = { defs={} expr=v7694[1] }
        ?29     = { defs={} expr=v7695[1] }
        ?30     = { defs={} expr=v7696[1] }
        ?31     = { defs={} expr=v7697[1] }
        ip      = { defs={0x080485a5,0x080485a7,0x080485aa} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7705[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7706[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7707[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7708[8]))) 1[32]))) 0x080485a0[32] 0x080485ac[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7655[32] 3[32]) }
          value = { defs={} expr=v7708[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7655[32] 2[32]) }
          value = { defs={} expr=v7707[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7655[32] 1[32]) }
          value = { defs={} expr=v7706[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7655[32] }
          value = { defs={} expr=v7705[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ac:pop    eax
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7876[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7877[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7878[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7879[8]))) }
        cx      = { defs={} expr=v7822[32] }
        dx      = { defs={} expr=v7823[32] }
        bx      = { defs={} expr=v7824[32] }
        sp      = { defs={0x080485ac} expr=(add[32] v7825[32] 4[32]) }
        bp      = { defs={} expr=v7826[32] }
        si      = { defs={} expr=v7827[32] }
        di      = { defs={} expr=v7828[32] }
        es      = { defs={} expr=v7829[16] }
        cs      = { defs={} expr=v7830[16] }
        ss      = { defs={} expr=v7831[16] }
        ds      = { defs={} expr=v7832[16] }
        fs      = { defs={} expr=v7833[16] }
        gs      = { defs={} expr=v7834[16] }
        cf      = { defs={} expr=v7835[1] }
        ?1      = { defs={} expr=v7836[1] }
        pf      = { defs={} expr=v7837[1] }
        ?3      = { defs={} expr=v7838[1] }
        af      = { defs={} expr=v7839[1] }
        ?5      = { defs={} expr=v7840[1] }
        zf      = { defs={} expr=v7841[1] }
        sf      = { defs={} expr=v7842[1] }
        tf      = { defs={} expr=v7843[1] }
        if      = { defs={} expr=v7844[1] }
        df      = { defs={} expr=v7845[1] }
        of      = { defs={} expr=v7846[1] }
        iopl0   = { defs={} expr=v7847[1] }
        iopl1   = { defs={} expr=v7848[1] }
        nt      = { defs={} expr=v7849[1] }
        ?15     = { defs={} expr=v7850[1] }
        rf      = { defs={} expr=v7851[1] }
        vm      = { defs={} expr=v7852[1] }
        ac      = { defs={} expr=v7853[1] }
        vif     = { defs={} expr=v7854[1] }
        vip     = { defs={} expr=v7855[1] }
        id      = { defs={} expr=v7856[1] }
        ?22     = { defs={} expr=v7857[1] }
        ?23     = { defs={} expr=v7858[1] }
        ?24     = { defs={} expr=v7859[1] }
        ?25     = { defs={} expr=v7860[1] }
        ?26     = { defs={} expr=v7861[1] }
        ?27     = { defs={} expr=v7862[1] }
        ?28     = { defs={} expr=v7863[1] }
        ?29     = { defs={} expr=v7864[1] }
        ?30     = { defs={} expr=v7865[1] }
        ?31     = { defs={} expr=v7866[1] }
        ip      = { defs={0x080485ac} expr=0x080485ad[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7825[32] 3[32]) }
          value = { defs={} expr=v7879[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7825[32] 2[32]) }
          value = { defs={} expr=v7878[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7825[32] 1[32]) }
          value = { defs={} expr=v7877[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7825[32] }
          value = { defs={} expr=v7876[8] }
          flags = { rdonly }
0x80485ad:pop    ebx
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7876[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7877[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7878[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7879[8]))) }
        cx      = { defs={} expr=v7822[32] }
        dx      = { defs={} expr=v7823[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7893[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7894[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7895[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7896[8]))) }
        sp      = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v7825[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v7826[32] }
        si      = { defs={} expr=v7827[32] }
        di      = { defs={} expr=v7828[32] }
        es      = { defs={} expr=v7829[16] }
        cs      = { defs={} expr=v7830[16] }
        ss      = { defs={} expr=v7831[16] }
        ds      = { defs={} expr=v7832[16] }
        fs      = { defs={} expr=v7833[16] }
        gs      = { defs={} expr=v7834[16] }
        cf      = { defs={} expr=v7835[1] }
        ?1      = { defs={} expr=v7836[1] }
        pf      = { defs={} expr=v7837[1] }
        ?3      = { defs={} expr=v7838[1] }
        af      = { defs={} expr=v7839[1] }
        ?5      = { defs={} expr=v7840[1] }
        zf      = { defs={} expr=v7841[1] }
        sf      = { defs={} expr=v7842[1] }
        tf      = { defs={} expr=v7843[1] }
        if      = { defs={} expr=v7844[1] }
        df      = { defs={} expr=v7845[1] }
        of      = { defs={} expr=v7846[1] }
        iopl0   = { defs={} expr=v7847[1] }
        iopl1   = { defs={} expr=v7848[1] }
        nt      = { defs={} expr=v7849[1] }
        ?15     = { defs={} expr=v7850[1] }
        rf      = { defs={} expr=v7851[1] }
        vm      = { defs={} expr=v7852[1] }
        ac      = { defs={} expr=v7853[1] }
        vif     = { defs={} expr=v7854[1] }
        vip     = { defs={} expr=v7855[1] }
        id      = { defs={} expr=v7856[1] }
        ?22     = { defs={} expr=v7857[1] }
        ?23     = { defs={} expr=v7858[1] }
        ?24     = { defs={} expr=v7859[1] }
        ?25     = { defs={} expr=v7860[1] }
        ?26     = { defs={} expr=v7861[1] }
        ?27     = { defs={} expr=v7862[1] }
        ?28     = { defs={} expr=v7863[1] }
        ?29     = { defs={} expr=v7864[1] }
        ?30     = { defs={} expr=v7865[1] }
        ?31     = { defs={} expr=v7866[1] }
        ip      = { defs={0x080485ac,0x080485ad} expr=0x080485ae[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v7825[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7896[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7825[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7895[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7825[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7894[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7825[32] 4[32]) }
          value = { defs={} expr=v7893[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7825[32] 3[32]) }
          value = { defs={} expr=v7879[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7825[32] 2[32]) }
          value = { defs={} expr=v7878[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7825[32] 1[32]) }
          value = { defs={} expr=v7877[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7825[32] }
          value = { defs={} expr=v7876[8] }
          flags = { rdonly }
0x80485ae:pop    ebp
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7876[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7877[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7878[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7879[8]))) }
        cx      = { defs={} expr=v7822[32] }
        dx      = { defs={} expr=v7823[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7893[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7894[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7895[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7896[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7910[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7911[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7912[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7913[8]))) }
        si      = { defs={} expr=v7827[32] }
        di      = { defs={} expr=v7828[32] }
        es      = { defs={} expr=v7829[16] }
        cs      = { defs={} expr=v7830[16] }
        ss      = { defs={} expr=v7831[16] }
        ds      = { defs={} expr=v7832[16] }
        fs      = { defs={} expr=v7833[16] }
        gs      = { defs={} expr=v7834[16] }
        cf      = { defs={} expr=v7835[1] }
        ?1      = { defs={} expr=v7836[1] }
        pf      = { defs={} expr=v7837[1] }
        ?3      = { defs={} expr=v7838[1] }
        af      = { defs={} expr=v7839[1] }
        ?5      = { defs={} expr=v7840[1] }
        zf      = { defs={} expr=v7841[1] }
        sf      = { defs={} expr=v7842[1] }
        tf      = { defs={} expr=v7843[1] }
        if      = { defs={} expr=v7844[1] }
        df      = { defs={} expr=v7845[1] }
        of      = { defs={} expr=v7846[1] }
        iopl0   = { defs={} expr=v7847[1] }
        iopl1   = { defs={} expr=v7848[1] }
        nt      = { defs={} expr=v7849[1] }
        ?15     = { defs={} expr=v7850[1] }
        rf      = { defs={} expr=v7851[1] }
        vm      = { defs={} expr=v7852[1] }
        ac      = { defs={} expr=v7853[1] }
        vif     = { defs={} expr=v7854[1] }
        vip     = { defs={} expr=v7855[1] }
        id      = { defs={} expr=v7856[1] }
        ?22     = { defs={} expr=v7857[1] }
        ?23     = { defs={} expr=v7858[1] }
        ?24     = { defs={} expr=v7859[1] }
        ?25     = { defs={} expr=v7860[1] }
        ?26     = { defs={} expr=v7861[1] }
        ?27     = { defs={} expr=v7862[1] }
        ?28     = { defs={} expr=v7863[1] }
        ?29     = { defs={} expr=v7864[1] }
        ?30     = { defs={} expr=v7865[1] }
        ?31     = { defs={} expr=v7866[1] }
        ip      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=0x080485af[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7913[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7912[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7911[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] v7825[32] 4[32]) 4[32]) }
          value = { defs={} expr=v7910[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7825[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7896[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7825[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7895[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7825[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7894[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7825[32] 4[32]) }
          value = { defs={} expr=v7893[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7825[32] 3[32]) }
          value = { defs={} expr=v7879[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7825[32] 2[32]) }
          value = { defs={} expr=v7878[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7825[32] 1[32]) }
          value = { defs={} expr=v7877[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7825[32] }
          value = { defs={} expr=v7876[8] }
          flags = { rdonly }
0x80485af:ret    
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7876[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7877[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7878[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7879[8]))) }
        cx      = { defs={} expr=v7822[32] }
        dx      = { defs={} expr=v7823[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7893[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7894[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7895[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7896[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7910[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7911[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7912[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7913[8]))) }
        si      = { defs={} expr=v7827[32] }
        di      = { defs={} expr=v7828[32] }
        es      = { defs={} expr=v7829[16] }
        cs      = { defs={} expr=v7830[16] }
        ss      = { defs={} expr=v7831[16] }
        ds      = { defs={} expr=v7832[16] }
        fs      = { defs={} expr=v7833[16] }
        gs      = { defs={} expr=v7834[16] }
        cf      = { defs={} expr=v7835[1] }
        ?1      = { defs={} expr=v7836[1] }
        pf      = { defs={} expr=v7837[1] }
        ?3      = { defs={} expr=v7838[1] }
        af      = { defs={} expr=v7839[1] }
        ?5      = { defs={} expr=v7840[1] }
        zf      = { defs={} expr=v7841[1] }
        sf      = { defs={} expr=v7842[1] }
        tf      = { defs={} expr=v7843[1] }
        if      = { defs={} expr=v7844[1] }
        df      = { defs={} expr=v7845[1] }
        of      = { defs={} expr=v7846[1] }
        iopl0   = { defs={} expr=v7847[1] }
        iopl1   = { defs={} expr=v7848[1] }
        nt      = { defs={} expr=v7849[1] }
        ?15     = { defs={} expr=v7850[1] }
        rf      = { defs={} expr=v7851[1] }
        vm      = { defs={} expr=v7852[1] }
        ac      = { defs={} expr=v7853[1] }
        vif     = { defs={} expr=v7854[1] }
        vip     = { defs={} expr=v7855[1] }
        id      = { defs={} expr=v7856[1] }
        ?22     = { defs={} expr=v7857[1] }
        ?23     = { defs={} expr=v7858[1] }
        ?24     = { defs={} expr=v7859[1] }
        ?25     = { defs={} expr=v7860[1] }
        ?26     = { defs={} expr=v7861[1] }
        ?27     = { defs={} expr=v7862[1] }
        ?28     = { defs={} expr=v7863[1] }
        ?29     = { defs={} expr=v7864[1] }
        ?30     = { defs={} expr=v7865[1] }
        ?31     = { defs={} expr=v7866[1] }
        ip      = { defs={0x080485af} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7927[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7928[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7930[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7930[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7929[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7928[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7927[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7913[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7912[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7825[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7911[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] v7825[32] 4[32]) 4[32]) }
          value = { defs={} expr=v7910[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7825[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7896[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7825[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7895[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7825[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7894[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7825[32] 4[32]) }
          value = { defs={} expr=v7893[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7825[32] 3[32]) }
          value = { defs={} expr=v7879[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7825[32] 2[32]) }
          value = { defs={} expr=v7878[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7825[32] 1[32]) }
          value = { defs={} expr=v7877[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7825[32] }
          value = { defs={} expr=v7876[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485b0:push   ebp
    registers:
        ax      = { defs={} expr=v7985[32] }
        cx      = { defs={} expr=v7986[32] }
        dx      = { defs={} expr=v7987[32] }
        bx      = { defs={} expr=v7988[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v7989[32] -4[32]) }
        bp      = { defs={} expr=v7990[32] }
        si      = { defs={} expr=v7991[32] }
        di      = { defs={} expr=v7992[32] }
        es      = { defs={} expr=v7993[16] }
        cs      = { defs={} expr=v7994[16] }
        ss      = { defs={} expr=v7995[16] }
        ds      = { defs={} expr=v7996[16] }
        fs      = { defs={} expr=v7997[16] }
        gs      = { defs={} expr=v7998[16] }
        cf      = { defs={} expr=v7999[1] }
        ?1      = { defs={} expr=v8000[1] }
        pf      = { defs={} expr=v8001[1] }
        ?3      = { defs={} expr=v8002[1] }
        af      = { defs={} expr=v8003[1] }
        ?5      = { defs={} expr=v8004[1] }
        zf      = { defs={} expr=v8005[1] }
        sf      = { defs={} expr=v8006[1] }
        tf      = { defs={} expr=v8007[1] }
        if      = { defs={} expr=v8008[1] }
        df      = { defs={} expr=v8009[1] }
        of      = { defs={} expr=v8010[1] }
        iopl0   = { defs={} expr=v8011[1] }
        iopl1   = { defs={} expr=v8012[1] }
        nt      = { defs={} expr=v8013[1] }
        ?15     = { defs={} expr=v8014[1] }
        rf      = { defs={} expr=v8015[1] }
        vm      = { defs={} expr=v8016[1] }
        ac      = { defs={} expr=v8017[1] }
        vif     = { defs={} expr=v8018[1] }
        vip     = { defs={} expr=v8019[1] }
        id      = { defs={} expr=v8020[1] }
        ?22     = { defs={} expr=v8021[1] }
        ?23     = { defs={} expr=v8022[1] }
        ?24     = { defs={} expr=v8023[1] }
        ?25     = { defs={} expr=v8024[1] }
        ?26     = { defs={} expr=v8025[1] }
        ?27     = { defs={} expr=v8026[1] }
        ?28     = { defs={} expr=v8027[1] }
        ?29     = { defs={} expr=v8028[1] }
        ?30     = { defs={} expr=v8029[1] }
        ?31     = { defs={} expr=v8030[1] }
        ip      = { defs={0x080485b0} expr=0x080485b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 3[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 24[32] 32[32] v7990[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 2[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 16[32] 24[32] v7990[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 1[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 8[32] 16[32] v7990[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7989[32] -4[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 0[32] 8[32] v7990[32]) }
          flags = { }
    init mem:
0x80485b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v7985[32] }
        cx      = { defs={} expr=v7986[32] }
        dx      = { defs={} expr=v7987[32] }
        bx      = { defs={} expr=v7988[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v7989[32] -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7989[32] -4[32]) }
        si      = { defs={} expr=v7991[32] }
        di      = { defs={} expr=v7992[32] }
        es      = { defs={} expr=v7993[16] }
        cs      = { defs={} expr=v7994[16] }
        ss      = { defs={} expr=v7995[16] }
        ds      = { defs={} expr=v7996[16] }
        fs      = { defs={} expr=v7997[16] }
        gs      = { defs={} expr=v7998[16] }
        cf      = { defs={} expr=v7999[1] }
        ?1      = { defs={} expr=v8000[1] }
        pf      = { defs={} expr=v8001[1] }
        ?3      = { defs={} expr=v8002[1] }
        af      = { defs={} expr=v8003[1] }
        ?5      = { defs={} expr=v8004[1] }
        zf      = { defs={} expr=v8005[1] }
        sf      = { defs={} expr=v8006[1] }
        tf      = { defs={} expr=v8007[1] }
        if      = { defs={} expr=v8008[1] }
        df      = { defs={} expr=v8009[1] }
        of      = { defs={} expr=v8010[1] }
        iopl0   = { defs={} expr=v8011[1] }
        iopl1   = { defs={} expr=v8012[1] }
        nt      = { defs={} expr=v8013[1] }
        ?15     = { defs={} expr=v8014[1] }
        rf      = { defs={} expr=v8015[1] }
        vm      = { defs={} expr=v8016[1] }
        ac      = { defs={} expr=v8017[1] }
        vif     = { defs={} expr=v8018[1] }
        vip     = { defs={} expr=v8019[1] }
        id      = { defs={} expr=v8020[1] }
        ?22     = { defs={} expr=v8021[1] }
        ?23     = { defs={} expr=v8022[1] }
        ?24     = { defs={} expr=v8023[1] }
        ?25     = { defs={} expr=v8024[1] }
        ?26     = { defs={} expr=v8025[1] }
        ?27     = { defs={} expr=v8026[1] }
        ?28     = { defs={} expr=v8027[1] }
        ?29     = { defs={} expr=v8028[1] }
        ?30     = { defs={} expr=v8029[1] }
        ?31     = { defs={} expr=v8030[1] }
        ip      = { defs={0x080485b0,0x080485b1} expr=0x080485b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 3[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 24[32] 32[32] v7990[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 2[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 16[32] 24[32] v7990[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 1[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 8[32] 16[32] v7990[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7989[32] -4[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 0[32] 8[32] v7990[32]) }
          flags = { }
    init mem:
0x80485b3:push   ebx
    registers:
        ax      = { defs={} expr=v7985[32] }
        cx      = { defs={} expr=v7986[32] }
        dx      = { defs={} expr=v7987[32] }
        bx      = { defs={} expr=v7988[32] }
        sp      = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7989[32] -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7989[32] -4[32]) }
        si      = { defs={} expr=v7991[32] }
        di      = { defs={} expr=v7992[32] }
        es      = { defs={} expr=v7993[16] }
        cs      = { defs={} expr=v7994[16] }
        ss      = { defs={} expr=v7995[16] }
        ds      = { defs={} expr=v7996[16] }
        fs      = { defs={} expr=v7997[16] }
        gs      = { defs={} expr=v7998[16] }
        cf      = { defs={} expr=v7999[1] }
        ?1      = { defs={} expr=v8000[1] }
        pf      = { defs={} expr=v8001[1] }
        ?3      = { defs={} expr=v8002[1] }
        af      = { defs={} expr=v8003[1] }
        ?5      = { defs={} expr=v8004[1] }
        zf      = { defs={} expr=v8005[1] }
        sf      = { defs={} expr=v8006[1] }
        tf      = { defs={} expr=v8007[1] }
        if      = { defs={} expr=v8008[1] }
        df      = { defs={} expr=v8009[1] }
        of      = { defs={} expr=v8010[1] }
        iopl0   = { defs={} expr=v8011[1] }
        iopl1   = { defs={} expr=v8012[1] }
        nt      = { defs={} expr=v8013[1] }
        ?15     = { defs={} expr=v8014[1] }
        rf      = { defs={} expr=v8015[1] }
        vm      = { defs={} expr=v8016[1] }
        ac      = { defs={} expr=v8017[1] }
        vif     = { defs={} expr=v8018[1] }
        vip     = { defs={} expr=v8019[1] }
        id      = { defs={} expr=v8020[1] }
        ?22     = { defs={} expr=v8021[1] }
        ?23     = { defs={} expr=v8022[1] }
        ?24     = { defs={} expr=v8023[1] }
        ?25     = { defs={} expr=v8024[1] }
        ?26     = { defs={} expr=v8025[1] }
        ?27     = { defs={} expr=v8026[1] }
        ?28     = { defs={} expr=v8027[1] }
        ?29     = { defs={} expr=v8028[1] }
        ?30     = { defs={} expr=v8029[1] }
        ?31     = { defs={} expr=v8030[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3} expr=0x080485b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 24[32] 32[32] v7988[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 16[32] 24[32] v7988[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 8[32] 16[32] v7988[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7989[32] -4[32]) -4[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 0[32] 8[32] v7988[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 3[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 24[32] 32[32] v7990[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 2[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 16[32] 24[32] v7990[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 1[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 8[32] 16[32] v7990[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7989[32] -4[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 0[32] 8[32] v7990[32]) }
          flags = { }
    init mem:
0x80485b4:push   eax
    registers:
        ax      = { defs={} expr=v7985[32] }
        cx      = { defs={} expr=v7986[32] }
        dx      = { defs={} expr=v7987[32] }
        bx      = { defs={} expr=v7988[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7989[32] -4[32]) }
        si      = { defs={} expr=v7991[32] }
        di      = { defs={} expr=v7992[32] }
        es      = { defs={} expr=v7993[16] }
        cs      = { defs={} expr=v7994[16] }
        ss      = { defs={} expr=v7995[16] }
        ds      = { defs={} expr=v7996[16] }
        fs      = { defs={} expr=v7997[16] }
        gs      = { defs={} expr=v7998[16] }
        cf      = { defs={} expr=v7999[1] }
        ?1      = { defs={} expr=v8000[1] }
        pf      = { defs={} expr=v8001[1] }
        ?3      = { defs={} expr=v8002[1] }
        af      = { defs={} expr=v8003[1] }
        ?5      = { defs={} expr=v8004[1] }
        zf      = { defs={} expr=v8005[1] }
        sf      = { defs={} expr=v8006[1] }
        tf      = { defs={} expr=v8007[1] }
        if      = { defs={} expr=v8008[1] }
        df      = { defs={} expr=v8009[1] }
        of      = { defs={} expr=v8010[1] }
        iopl0   = { defs={} expr=v8011[1] }
        iopl1   = { defs={} expr=v8012[1] }
        nt      = { defs={} expr=v8013[1] }
        ?15     = { defs={} expr=v8014[1] }
        rf      = { defs={} expr=v8015[1] }
        vm      = { defs={} expr=v8016[1] }
        ac      = { defs={} expr=v8017[1] }
        vif     = { defs={} expr=v8018[1] }
        vip     = { defs={} expr=v8019[1] }
        id      = { defs={} expr=v8020[1] }
        ?22     = { defs={} expr=v8021[1] }
        ?23     = { defs={} expr=v8022[1] }
        ?24     = { defs={} expr=v8023[1] }
        ?25     = { defs={} expr=v8024[1] }
        ?26     = { defs={} expr=v8025[1] }
        ?27     = { defs={} expr=v8026[1] }
        ?28     = { defs={} expr=v8027[1] }
        ?29     = { defs={} expr=v8028[1] }
        ?30     = { defs={} expr=v8029[1] }
        ?31     = { defs={} expr=v8030[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4} expr=0x080485b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 24[32] 32[32] v7985[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 16[32] 24[32] v7985[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 8[32] 16[32] v7985[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 0[32] 8[32] v7985[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 24[32] 32[32] v7988[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 16[32] 24[32] v7988[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 8[32] 16[32] v7988[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7989[32] -4[32]) -4[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 0[32] 8[32] v7988[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 3[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 24[32] 32[32] v7990[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 2[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 16[32] 24[32] v7990[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 1[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 8[32] 16[32] v7990[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7989[32] -4[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 0[32] 8[32] v7990[32]) }
          flags = { }
    init mem:
0x80485b5:call   0x080485ba<<Insn>>
    registers:
        ax      = { defs={} expr=v7985[32] }
        cx      = { defs={} expr=v7986[32] }
        dx      = { defs={} expr=v7987[32] }
        bx      = { defs={} expr=v7988[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7989[32] -4[32]) }
        si      = { defs={} expr=v7991[32] }
        di      = { defs={} expr=v7992[32] }
        es      = { defs={} expr=v7993[16] }
        cs      = { defs={} expr=v7994[16] }
        ss      = { defs={} expr=v7995[16] }
        ds      = { defs={} expr=v7996[16] }
        fs      = { defs={} expr=v7997[16] }
        gs      = { defs={} expr=v7998[16] }
        cf      = { defs={} expr=v7999[1] }
        ?1      = { defs={} expr=v8000[1] }
        pf      = { defs={} expr=v8001[1] }
        ?3      = { defs={} expr=v8002[1] }
        af      = { defs={} expr=v8003[1] }
        ?5      = { defs={} expr=v8004[1] }
        zf      = { defs={} expr=v8005[1] }
        sf      = { defs={} expr=v8006[1] }
        tf      = { defs={} expr=v8007[1] }
        if      = { defs={} expr=v8008[1] }
        df      = { defs={} expr=v8009[1] }
        of      = { defs={} expr=v8010[1] }
        iopl0   = { defs={} expr=v8011[1] }
        iopl1   = { defs={} expr=v8012[1] }
        nt      = { defs={} expr=v8013[1] }
        ?15     = { defs={} expr=v8014[1] }
        rf      = { defs={} expr=v8015[1] }
        vm      = { defs={} expr=v8016[1] }
        ac      = { defs={} expr=v8017[1] }
        vif     = { defs={} expr=v8018[1] }
        vip     = { defs={} expr=v8019[1] }
        id      = { defs={} expr=v8020[1] }
        ?22     = { defs={} expr=v8021[1] }
        ?23     = { defs={} expr=v8022[1] }
        ?24     = { defs={} expr=v8023[1] }
        ?25     = { defs={} expr=v8024[1] }
        ?26     = { defs={} expr=v8025[1] }
        ?27     = { defs={} expr=v8026[1] }
        ?28     = { defs={} expr=v8027[1] }
        ?29     = { defs={} expr=v8028[1] }
        ?30     = { defs={} expr=v8029[1] }
        ?31     = { defs={} expr=v8030[1] }
        ip      = { defs={0x080485b5} expr=0x080485ba[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4,0x080485b5} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4,0x080485b5} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4,0x080485b5} expr=-123[8] }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4,0x080485b5} expr=-70[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 24[32] 32[32] v7985[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 16[32] 24[32] v7985[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 8[32] 16[32] v7985[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={0x080485b4} expr=(extract[8] 0[32] 8[32] v7985[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 24[32] 32[32] v7988[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 16[32] 24[32] v7988[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7989[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 8[32] 16[32] v7988[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7989[32] -4[32]) -4[32]) }
          value = { defs={0x080485b3} expr=(extract[8] 0[32] 8[32] v7988[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 3[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 24[32] 32[32] v7990[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 2[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 16[32] 24[32] v7990[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7989[32] -4[32]) 1[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 8[32] 16[32] v7990[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7989[32] -4[32]) }
          value = { defs={0x080485b0} expr=(extract[8] 0[32] 8[32] v7990[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ba:pop    ebx
    registers:
        ax      = { defs={} expr=v8130[32] }
        cx      = { defs={} expr=v8131[32] }
        dx      = { defs={} expr=v8132[32] }
        bx      = { defs={0x080485ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) }
        sp      = { defs={0x080485ba} expr=(add[32] v8134[32] 4[32]) }
        bp      = { defs={} expr=v8135[32] }
        si      = { defs={} expr=v8136[32] }
        di      = { defs={} expr=v8137[32] }
        es      = { defs={} expr=v8138[16] }
        cs      = { defs={} expr=v8139[16] }
        ss      = { defs={} expr=v8140[16] }
        ds      = { defs={} expr=v8141[16] }
        fs      = { defs={} expr=v8142[16] }
        gs      = { defs={} expr=v8143[16] }
        cf      = { defs={} expr=v8144[1] }
        ?1      = { defs={} expr=v8145[1] }
        pf      = { defs={} expr=v8146[1] }
        ?3      = { defs={} expr=v8147[1] }
        af      = { defs={} expr=v8148[1] }
        ?5      = { defs={} expr=v8149[1] }
        zf      = { defs={} expr=v8150[1] }
        sf      = { defs={} expr=v8151[1] }
        tf      = { defs={} expr=v8152[1] }
        if      = { defs={} expr=v8153[1] }
        df      = { defs={} expr=v8154[1] }
        of      = { defs={} expr=v8155[1] }
        iopl0   = { defs={} expr=v8156[1] }
        iopl1   = { defs={} expr=v8157[1] }
        nt      = { defs={} expr=v8158[1] }
        ?15     = { defs={} expr=v8159[1] }
        rf      = { defs={} expr=v8160[1] }
        vm      = { defs={} expr=v8161[1] }
        ac      = { defs={} expr=v8162[1] }
        vif     = { defs={} expr=v8163[1] }
        vip     = { defs={} expr=v8164[1] }
        id      = { defs={} expr=v8165[1] }
        ?22     = { defs={} expr=v8166[1] }
        ?23     = { defs={} expr=v8167[1] }
        ?24     = { defs={} expr=v8168[1] }
        ?25     = { defs={} expr=v8169[1] }
        ?26     = { defs={} expr=v8170[1] }
        ?27     = { defs={} expr=v8171[1] }
        ?28     = { defs={} expr=v8172[1] }
        ?29     = { defs={} expr=v8173[1] }
        ?30     = { defs={} expr=v8174[1] }
        ?31     = { defs={} expr=v8175[1] }
        ip      = { defs={0x080485ba} expr=0x080485bb[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v8134[32] 3[32]) }
          value = { defs={} expr=v8188[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8134[32] 2[32]) }
          value = { defs={} expr=v8187[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8134[32] 1[32]) }
          value = { defs={} expr=v8186[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v8134[32] }
          value = { defs={} expr=v8185[8] }
          flags = { rdonly }
0x80485bb:add    ebx, 0x0000110e
    registers:
        ax      = { defs={} expr=v8130[32] }
        cx      = { defs={} expr=v8131[32] }
        dx      = { defs={} expr=v8132[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]) }
        sp      = { defs={0x080485ba} expr=(add[32] v8134[32] 4[32]) }
        bp      = { defs={} expr=v8135[32] }
        si      = { defs={} expr=v8136[32] }
        di      = { defs={} expr=v8137[32] }
        es      = { defs={} expr=v8138[16] }
        cs      = { defs={} expr=v8139[16] }
        ss      = { defs={} expr=v8140[16] }
        ds      = { defs={} expr=v8141[16] }
        fs      = { defs={} expr=v8142[16] }
        gs      = { defs={} expr=v8143[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v8145[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v8147[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v8149[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32])) }
        tf      = { defs={} expr=v8152[1] }
        if      = { defs={} expr=v8153[1] }
        df      = { defs={} expr=v8154[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) 4366[33])))))) }
        iopl0   = { defs={} expr=v8156[1] }
        iopl1   = { defs={} expr=v8157[1] }
        nt      = { defs={} expr=v8158[1] }
        ?15     = { defs={} expr=v8159[1] }
        rf      = { defs={} expr=v8160[1] }
        vm      = { defs={} expr=v8161[1] }
        ac      = { defs={} expr=v8162[1] }
        vif     = { defs={} expr=v8163[1] }
        vip     = { defs={} expr=v8164[1] }
        id      = { defs={} expr=v8165[1] }
        ?22     = { defs={} expr=v8166[1] }
        ?23     = { defs={} expr=v8167[1] }
        ?24     = { defs={} expr=v8168[1] }
        ?25     = { defs={} expr=v8169[1] }
        ?26     = { defs={} expr=v8170[1] }
        ?27     = { defs={} expr=v8171[1] }
        ?28     = { defs={} expr=v8172[1] }
        ?29     = { defs={} expr=v8173[1] }
        ?30     = { defs={} expr=v8174[1] }
        ?31     = { defs={} expr=v8175[1] }
        ip      = { defs={0x080485ba,0x080485bb} expr=0x080485c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v8134[32] 3[32]) }
          value = { defs={} expr=v8188[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8134[32] 2[32]) }
          value = { defs={} expr=v8187[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8134[32] 1[32]) }
          value = { defs={} expr=v8186[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v8134[32] }
          value = { defs={} expr=v8185[8] }
          flags = { rdonly }
0x80485c1:call   0x08048390<__do_global_dtors_aux>
    registers:
        ax      = { defs={} expr=v8130[32] }
        cx      = { defs={} expr=v8131[32] }
        dx      = { defs={} expr=v8132[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]) }
        sp      = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v8134[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v8135[32] }
        si      = { defs={} expr=v8136[32] }
        di      = { defs={} expr=v8137[32] }
        es      = { defs={} expr=v8138[16] }
        cs      = { defs={} expr=v8139[16] }
        ss      = { defs={} expr=v8140[16] }
        ds      = { defs={} expr=v8141[16] }
        fs      = { defs={} expr=v8142[16] }
        gs      = { defs={} expr=v8143[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v8145[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v8147[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v8149[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8]))) 4366[32])) }
        tf      = { defs={} expr=v8152[1] }
        if      = { defs={} expr=v8153[1] }
        df      = { defs={} expr=v8154[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8188[8])))) 4366[33])))))) }
        iopl0   = { defs={} expr=v8156[1] }
        iopl1   = { defs={} expr=v8157[1] }
        nt      = { defs={} expr=v8158[1] }
        ?15     = { defs={} expr=v8159[1] }
        rf      = { defs={} expr=v8160[1] }
        vm      = { defs={} expr=v8161[1] }
        ac      = { defs={} expr=v8162[1] }
        vif     = { defs={} expr=v8163[1] }
        vip     = { defs={} expr=v8164[1] }
        id      = { defs={} expr=v8165[1] }
        ?22     = { defs={} expr=v8166[1] }
        ?23     = { defs={} expr=v8167[1] }
        ?24     = { defs={} expr=v8168[1] }
        ?25     = { defs={} expr=v8169[1] }
        ?26     = { defs={} expr=v8170[1] }
        ?27     = { defs={} expr=v8171[1] }
        ?28     = { defs={} expr=v8172[1] }
        ?29     = { defs={} expr=v8173[1] }
        ?30     = { defs={} expr=v8174[1] }
        ?31     = { defs={} expr=v8175[1] }
        ip      = { defs={0x080485c1} expr=0x08048390[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v8134[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={0x080485ba,0x080485bb,0x080485c1} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v8134[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={0x080485ba,0x080485bb,0x080485c1} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v8134[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={0x080485ba,0x080485bb,0x080485c1} expr=-123[8] }
          flags = { }
        address = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v8134[32] 4[32]) -4[32]) }
          value = { defs={0x080485ba,0x080485bb,0x080485c1} expr=-58[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v8134[32] 3[32]) }
          value = { defs={} expr=v8188[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8134[32] 2[32]) }
          value = { defs={} expr=v8187[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8134[32] 1[32]) }
          value = { defs={} expr=v8186[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v8134[32] }
          value = { defs={} expr=v8185[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485c6:pop    eax
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8357[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8358[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8359[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8360[8]))) }
        cx      = { defs={} expr=v8303[32] }
        dx      = { defs={} expr=v8304[32] }
        bx      = { defs={} expr=v8305[32] }
        sp      = { defs={0x080485c6} expr=(add[32] v8306[32] 4[32]) }
        bp      = { defs={} expr=v8307[32] }
        si      = { defs={} expr=v8308[32] }
        di      = { defs={} expr=v8309[32] }
        es      = { defs={} expr=v8310[16] }
        cs      = { defs={} expr=v8311[16] }
        ss      = { defs={} expr=v8312[16] }
        ds      = { defs={} expr=v8313[16] }
        fs      = { defs={} expr=v8314[16] }
        gs      = { defs={} expr=v8315[16] }
        cf      = { defs={} expr=v8316[1] }
        ?1      = { defs={} expr=v8317[1] }
        pf      = { defs={} expr=v8318[1] }
        ?3      = { defs={} expr=v8319[1] }
        af      = { defs={} expr=v8320[1] }
        ?5      = { defs={} expr=v8321[1] }
        zf      = { defs={} expr=v8322[1] }
        sf      = { defs={} expr=v8323[1] }
        tf      = { defs={} expr=v8324[1] }
        if      = { defs={} expr=v8325[1] }
        df      = { defs={} expr=v8326[1] }
        of      = { defs={} expr=v8327[1] }
        iopl0   = { defs={} expr=v8328[1] }
        iopl1   = { defs={} expr=v8329[1] }
        nt      = { defs={} expr=v8330[1] }
        ?15     = { defs={} expr=v8331[1] }
        rf      = { defs={} expr=v8332[1] }
        vm      = { defs={} expr=v8333[1] }
        ac      = { defs={} expr=v8334[1] }
        vif     = { defs={} expr=v8335[1] }
        vip     = { defs={} expr=v8336[1] }
        id      = { defs={} expr=v8337[1] }
        ?22     = { defs={} expr=v8338[1] }
        ?23     = { defs={} expr=v8339[1] }
        ?24     = { defs={} expr=v8340[1] }
        ?25     = { defs={} expr=v8341[1] }
        ?26     = { defs={} expr=v8342[1] }
        ?27     = { defs={} expr=v8343[1] }
        ?28     = { defs={} expr=v8344[1] }
        ?29     = { defs={} expr=v8345[1] }
        ?30     = { defs={} expr=v8346[1] }
        ?31     = { defs={} expr=v8347[1] }
        ip      = { defs={0x080485c6} expr=0x080485c7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v8306[32] 3[32]) }
          value = { defs={} expr=v8360[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8306[32] 2[32]) }
          value = { defs={} expr=v8359[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8306[32] 1[32]) }
          value = { defs={} expr=v8358[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8306[32] }
          value = { defs={} expr=v8357[8] }
          flags = { rdonly }
0x80485c7:pop    ebx
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8357[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8358[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8359[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8360[8]))) }
        cx      = { defs={} expr=v8303[32] }
        dx      = { defs={} expr=v8304[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8374[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8375[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8376[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8377[8]))) }
        sp      = { defs={0x080485c6,0x080485c7} expr=(add[32] (add[32] v8306[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v8307[32] }
        si      = { defs={} expr=v8308[32] }
        di      = { defs={} expr=v8309[32] }
        es      = { defs={} expr=v8310[16] }
        cs      = { defs={} expr=v8311[16] }
        ss      = { defs={} expr=v8312[16] }
        ds      = { defs={} expr=v8313[16] }
        fs      = { defs={} expr=v8314[16] }
        gs      = { defs={} expr=v8315[16] }
        cf      = { defs={} expr=v8316[1] }
        ?1      = { defs={} expr=v8317[1] }
        pf      = { defs={} expr=v8318[1] }
        ?3      = { defs={} expr=v8319[1] }
        af      = { defs={} expr=v8320[1] }
        ?5      = { defs={} expr=v8321[1] }
        zf      = { defs={} expr=v8322[1] }
        sf      = { defs={} expr=v8323[1] }
        tf      = { defs={} expr=v8324[1] }
        if      = { defs={} expr=v8325[1] }
        df      = { defs={} expr=v8326[1] }
        of      = { defs={} expr=v8327[1] }
        iopl0   = { defs={} expr=v8328[1] }
        iopl1   = { defs={} expr=v8329[1] }
        nt      = { defs={} expr=v8330[1] }
        ?15     = { defs={} expr=v8331[1] }
        rf      = { defs={} expr=v8332[1] }
        vm      = { defs={} expr=v8333[1] }
        ac      = { defs={} expr=v8334[1] }
        vif     = { defs={} expr=v8335[1] }
        vip     = { defs={} expr=v8336[1] }
        id      = { defs={} expr=v8337[1] }
        ?22     = { defs={} expr=v8338[1] }
        ?23     = { defs={} expr=v8339[1] }
        ?24     = { defs={} expr=v8340[1] }
        ?25     = { defs={} expr=v8341[1] }
        ?26     = { defs={} expr=v8342[1] }
        ?27     = { defs={} expr=v8343[1] }
        ?28     = { defs={} expr=v8344[1] }
        ?29     = { defs={} expr=v8345[1] }
        ?30     = { defs={} expr=v8346[1] }
        ?31     = { defs={} expr=v8347[1] }
        ip      = { defs={0x080485c6,0x080485c7} expr=0x080485c8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v8306[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8377[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8306[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8376[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8306[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8375[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v8306[32] 4[32]) }
          value = { defs={} expr=v8374[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8306[32] 3[32]) }
          value = { defs={} expr=v8360[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8306[32] 2[32]) }
          value = { defs={} expr=v8359[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8306[32] 1[32]) }
          value = { defs={} expr=v8358[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8306[32] }
          value = { defs={} expr=v8357[8] }
          flags = { rdonly }
0x80485c8:leave  
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8357[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8358[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8359[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8360[8]))) }
        cx      = { defs={} expr=v8303[32] }
        dx      = { defs={} expr=v8304[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8374[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8375[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8376[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8377[8]))) }
        sp      = { defs={0x080485c8} expr=(add[32] v8307[32] 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8392[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8393[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8394[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8395[8]))) }
        si      = { defs={} expr=v8308[32] }
        di      = { defs={} expr=v8309[32] }
        es      = { defs={} expr=v8310[16] }
        cs      = { defs={} expr=v8311[16] }
        ss      = { defs={} expr=v8312[16] }
        ds      = { defs={} expr=v8313[16] }
        fs      = { defs={} expr=v8314[16] }
        gs      = { defs={} expr=v8315[16] }
        cf      = { defs={} expr=v8316[1] }
        ?1      = { defs={} expr=v8317[1] }
        pf      = { defs={} expr=v8318[1] }
        ?3      = { defs={} expr=v8319[1] }
        af      = { defs={} expr=v8320[1] }
        ?5      = { defs={} expr=v8321[1] }
        zf      = { defs={} expr=v8322[1] }
        sf      = { defs={} expr=v8323[1] }
        tf      = { defs={} expr=v8324[1] }
        if      = { defs={} expr=v8325[1] }
        df      = { defs={} expr=v8326[1] }
        of      = { defs={} expr=v8327[1] }
        iopl0   = { defs={} expr=v8328[1] }
        iopl1   = { defs={} expr=v8329[1] }
        nt      = { defs={} expr=v8330[1] }
        ?15     = { defs={} expr=v8331[1] }
        rf      = { defs={} expr=v8332[1] }
        vm      = { defs={} expr=v8333[1] }
        ac      = { defs={} expr=v8334[1] }
        vif     = { defs={} expr=v8335[1] }
        vip     = { defs={} expr=v8336[1] }
        id      = { defs={} expr=v8337[1] }
        ?22     = { defs={} expr=v8338[1] }
        ?23     = { defs={} expr=v8339[1] }
        ?24     = { defs={} expr=v8340[1] }
        ?25     = { defs={} expr=v8341[1] }
        ?26     = { defs={} expr=v8342[1] }
        ?27     = { defs={} expr=v8343[1] }
        ?28     = { defs={} expr=v8344[1] }
        ?29     = { defs={} expr=v8345[1] }
        ?30     = { defs={} expr=v8346[1] }
        ?31     = { defs={} expr=v8347[1] }
        ip      = { defs={0x080485c6,0x080485c7,0x080485c8} expr=0x080485c9[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v8307[32] 3[32]) }
          value = { defs={} expr=v8395[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8307[32] 2[32]) }
          value = { defs={} expr=v8394[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8307[32] 1[32]) }
          value = { defs={} expr=v8393[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v8307[32] }
          value = { defs={} expr=v8392[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8306[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8377[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8306[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8376[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8306[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8375[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v8306[32] 4[32]) }
          value = { defs={} expr=v8374[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8306[32] 3[32]) }
          value = { defs={} expr=v8360[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8306[32] 2[32]) }
          value = { defs={} expr=v8359[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8306[32] 1[32]) }
          value = { defs={} expr=v8358[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8306[32] }
          value = { defs={} expr=v8357[8] }
          flags = { rdonly }
0x80485c9:ret    
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8357[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8358[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8359[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8360[8]))) }
        cx      = { defs={} expr=v8303[32] }
        dx      = { defs={} expr=v8304[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8374[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8375[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8376[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8377[8]))) }
        sp      = { defs={0x080485c8,0x080485c9} expr=(add[32] (add[32] v8307[32] 4[32]) 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8392[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8393[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8394[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8395[8]))) }
        si      = { defs={} expr=v8308[32] }
        di      = { defs={} expr=v8309[32] }
        es      = { defs={} expr=v8310[16] }
        cs      = { defs={} expr=v8311[16] }
        ss      = { defs={} expr=v8312[16] }
        ds      = { defs={} expr=v8313[16] }
        fs      = { defs={} expr=v8314[16] }
        gs      = { defs={} expr=v8315[16] }
        cf      = { defs={} expr=v8316[1] }
        ?1      = { defs={} expr=v8317[1] }
        pf      = { defs={} expr=v8318[1] }
        ?3      = { defs={} expr=v8319[1] }
        af      = { defs={} expr=v8320[1] }
        ?5      = { defs={} expr=v8321[1] }
        zf      = { defs={} expr=v8322[1] }
        sf      = { defs={} expr=v8323[1] }
        tf      = { defs={} expr=v8324[1] }
        if      = { defs={} expr=v8325[1] }
        df      = { defs={} expr=v8326[1] }
        of      = { defs={} expr=v8327[1] }
        iopl0   = { defs={} expr=v8328[1] }
        iopl1   = { defs={} expr=v8329[1] }
        nt      = { defs={} expr=v8330[1] }
        ?15     = { defs={} expr=v8331[1] }
        rf      = { defs={} expr=v8332[1] }
        vm      = { defs={} expr=v8333[1] }
        ac      = { defs={} expr=v8334[1] }
        vif     = { defs={} expr=v8335[1] }
        vip     = { defs={} expr=v8336[1] }
        id      = { defs={} expr=v8337[1] }
        ?22     = { defs={} expr=v8338[1] }
        ?23     = { defs={} expr=v8339[1] }
        ?24     = { defs={} expr=v8340[1] }
        ?25     = { defs={} expr=v8341[1] }
        ?26     = { defs={} expr=v8342[1] }
        ?27     = { defs={} expr=v8343[1] }
        ?28     = { defs={} expr=v8344[1] }
        ?29     = { defs={} expr=v8345[1] }
        ?30     = { defs={} expr=v8346[1] }
        ?31     = { defs={} expr=v8347[1] }
        ip      = { defs={0x080485c9} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8410[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8411[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8412[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8413[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v8307[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8413[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8307[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8412[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8307[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8411[8] }
          flags = { rdonly }
        address = { defs={0x080485c8,0x080485c9} expr=(add[32] v8307[32] 4[32]) }
          value = { defs={} expr=v8410[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8307[32] 3[32]) }
          value = { defs={} expr=v8395[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8307[32] 2[32]) }
          value = { defs={} expr=v8394[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8307[32] 1[32]) }
          value = { defs={} expr=v8393[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v8307[32] }
          value = { defs={} expr=v8392[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8306[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8377[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8306[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8376[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8306[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8375[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v8306[32] 4[32]) }
          value = { defs={} expr=v8374[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8306[32] 3[32]) }
          value = { defs={} expr=v8360[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8306[32] 2[32]) }
          value = { defs={} expr=v8359[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8306[32] 1[32]) }
          value = { defs={} expr=v8358[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8306[32] }
          value = { defs={} expr=v8357[8] }
          flags = { rdonly }
analyzed headers: 1
