# Makefile.in generated by automake 1.9.6 from Makefile.am.
# Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic 
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?

srcdir = ..
top_srcdir = ..
VPATH = ..
pkgdatadir = $(datadir)/rose
pkglibdir = $(libdir)/rose
pkgincludedir = $(includedir)/rose
top_builddir = .
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
DIST_COMMON = README $(am__configure_deps) $(include_HEADERS) \
	$(noinst_HEADERS) $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/rose.docs.in $(srcdir)/rose_config.h.in \
	$(srcdir)/stamp-h.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs \
	$(top_srcdir)/config/automake_conditional_display_makefile \
	$(top_srcdir)/config/build_rose_paths.Makefile \
	$(top_srcdir)/configure \
	$(top_srcdir)/projects/compass/src/compassSupport/compass_dirs.inc \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/lib/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/misc/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/src/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/src/disp/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.3/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.3/misc/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.3/src/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/lib/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/misc/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/src/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/src/disp/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/lib/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/misc/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/src/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/src/disp/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_SAGE_Connection/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/edg43Rose/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/edgRose/Makefile.in \
	ChangeLog
am__append_1 = tests

# DQ (4/23/2011): Ignoring all of these whole directories might be over kill.  But I have had problems with 
# Insure++ compilation specific to Hudson and want to start small and work to grow the number of parts of ROSE
# used by Insure.  Except on Hudson (e.g. on my machine) Insure++ can be used to compiler nearly all of ROSE.
am__append_2 = projects
am__append_3 = tutorial exampleTranslators docs 
am__append_4 = tools scripts 
am__append_5 = demo
am__append_6 = binaries

# DQ (7/25/2008): If ROSE was originallly configured with Fortran (by tuning 
# on the java support) then make sure it is tested as part of the distcheck rule.
# if ROSE_USE_OPEN_FORTRAN_PARSER
# DISTCHECK_CONFIGURE_FLAGS += --with-java
am__append_7 = --with-java=$(JAVA_PATH)
# DQ (10/22/2010): Added specification of --without-java to distcheck rule.
# If we have first built without java then we have had to build some of the
# Fortran language supporting files as empty files and thus we don't want to
# run distcheck in a way that would use those files. However the problem
# when this is not used has more to do with the Java langauge support.
# A better reason why this is required might be so that we can run the NMI tests.
# TOO (3/24/2011): TODO: the new language-support configuration that I've
# implemented does not automatically disable fortran, whereas the previous
# implementation did. Since we now have Java-language support, the
# --without-java flag is confusing. I thought it meant "without java-language
# support". Speaking with Dan, we concluded that we need to look at renaming
# --without-java to something else like --without-jvm or --without-java-components
# This flag is suppose to turn off all parts of ROSE that use Java: 
# projects/javaports, java- and fortran-language support, etc.
#am__append_8 = --without-java \
#	--disable-fortran

# DQ (7/25/2008): If ROSE was originallly configured to use the HPC Toolkit
# then make sure it is tested as part of the distcheck rule.
#am__append_9 = --enable-rosehpct

# DQ (7/25/2008): If ROSE was originallly configured to use the javaport
# work (generation of Java interface functions for ROSE using SWIG) then 
# make sure it is tested as part of the distcheck rule.
#am__append_10 = --with-javaport

# DQ (4/5/2010): Use the same version of OFP as specified on the original configure command line.
# CER (10/10/2011): No longer needed. A specific OFP version is configured by default and distributed with ROSE.
#DISTCHECK_CONFIGURE_FLAGS += --enable-ofp-version=0.8.3

# SRIRAM (8/2/2010): changing distcheck configuration for LLVM translator
#am__append_11 = --with-llvm=$(llvm_path)
subdir = .
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/acmacros/upc.m4 \
	$(top_srcdir)/config/EDG.m4 $(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/acinclude.m4 $(top_srcdir)/config/argz.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_lib_xerces.m4 \
	$(top_srcdir)/config/ax_python_devel.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determine-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libtool.m4 $(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/ltdl.m4 $(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/mdl_have_opengl.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-backstroke.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-clang.m4 \
	$(top_srcdir)/config/support-compass2.m4 \
	$(top_srcdir)/config/support-cuda-opencl.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-git-versioning.m4 \
	$(top_srcdir)/config/support-gmp.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-isl.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-languages.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-mint.m4 \
	$(top_srcdir)/config/support-ofp.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-projects.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-rtedupc.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/support_POET.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno configure.status.lineno
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = rose_config.h
CONFIG_CLEAN_FILES = src/frontend/CxxFrontend/EDG/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_3.3/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_3.3/misc/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_3.3/src/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_3.10/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_3.10/misc/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_3.10/src/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_3.10/src/disp/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_3.10/lib/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.0/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.0/misc/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.0/src/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.0/src/disp/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.0/lib/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.3/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.3/misc/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.3/src/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.3/src/disp/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.3/lib/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_SAGE_Connection/Makefile \
	src/frontend/CxxFrontend/EDG/edgRose/Makefile \
	src/frontend/CxxFrontend/EDG/edg43Rose/Makefile stamp-h \
	rose.docs
depcomp =
am__depfiles_maybe =
SOURCES =
DIST_SOURCES =
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-exec-recursive install-info-recursive \
	install-recursive installcheck-recursive installdirs-recursive \
	pdf-recursive ps-recursive uninstall-info-recursive \
	uninstall-recursive
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(includedir)"
includeHEADERS_INSTALL = $(INSTALL_HEADER)
HEADERS = $(include_HEADERS) $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = libltdl config src tests projects tutorial \
	exampleTranslators docs tools scripts demo binaries
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d $(distdir) \
    || { find $(distdir) -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr $(distdir); }; }
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ABS_COMPASS2_XML_SRCDIR = /home/bronevet/Downloads/rose/projects/compass2/compass2/xml
ACLOCAL = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run aclocal-1.9
ALTERNATE_BACKEND_C_CROSS_COMPILER_FALSE = 
ALTERNATE_BACKEND_C_CROSS_COMPILER_TRUE = #
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run tar
AR = ar
ARGZ_H = 
AUTOCONF = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run autoconf
AUTOHEADER = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run autoheader
AUTOMAKE = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run automake-1.9
AUX_LINKER = 
AWK = gawk
AXXPXX_SPECIFIC_TESTS_FALSE = 
AXXPXX_SPECIFIC_TESTS_TRUE = #
Axx_INCLUDES = 
Axx_LIBS = 
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = 4
BACKEND_COMPILER_VERSION_MINOR_NUMBER = 4
BACKEND_COMPILER_VERSION_NAME = GNU
BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_FALSE = 
BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_TRUE = #
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = 6
BACKEND_CXX_COMPILER = g++
BACKEND_C_COMPILER = gcc
BACKEND_FORTRAN_COMPILER = gfortran
BACKEND_JAVA_COMPILER = javac
BACKSTROKE_ROSS_INCLUDE = 
BACKSTROKE_SPEEDES_INCLUDE = 
BINARY_EDG_TARBALL_ENABLED_FALSE = 
BINARY_EDG_TARBALL_ENABLED_TRUE = #
BOOST_CPPFLAGS = -pthread -I/home/bronevet/apps/boost/include
BOOST_DATE_TIME_LIB = -lboost_date_time
BOOST_FILESYSTEM_LIB = -lboost_filesystem
BOOST_LDFLAGS =  -L/home/bronevet/apps/boost/lib
BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options
BOOST_REGEX_LIB = -lboost_regex
BOOST_SYSTEM_LIB = -lboost_system
BOOST_THREAD_LIB = -lboost_thread
BOOST_WAVE_LIB = -lboost_wave
CANDL_PATH = 
CC = gcc
CCDEPMODE = depmode=none
CCLD = gcc
CFLAGS = -g -O2 -g -Wall -Wstrict-prototypes -Wmissing-prototypes
CFLAGS32 = no
CLANG_CXXFLAGS = 
CLANG_LDFLAGS = 
CLANG_LIBDIR = 
CLASSPATH = /home/bronevet/Downloads/rose/compile/../src/3rdPartyLibraries/antlr-jars/antlr-3.3-complete.jar:/home/bronevet/Downloads/rose/compile/../src/3rdPartyLibraries/fortran-parser/OpenFortranParser-20111001.jar
CLOOG_PATH = 
CONVENIENCE_LTDL_FALSE = #
CONVENIENCE_LTDL_TRUE = 
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=none
CXXFLAGS =  -g -Wall
CXXLD = g++
CXX_DEBUG = -g
CXX_OPTIMIZE = 
CXX_SHARED_LIB_UPDATE = ${CXX} -shared -o
CXX_STATIC_LIB_UPDATE = ${AR} ruv
CXX_TEMPLATE_OBJECTS = 
CXX_TEMPLATE_REPOSITORY_PATH = $(top_builddir)/src
CXX_WARNINGS = -Wall
CYGPATH_W = echo
C_DEBUG = -g
C_OPTIMIZE = 
C_WARNINGS = -Wall -Wstrict-prototypes -Wmissing-prototypes
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DOT_TO_GML_TRANSLATOR_FALSE = 
DOT_TO_GML_TRANSLATOR_TRUE = #
DOXYGEN_ADDED_DIRECTORY_1 = @top_pwd@/src/frontend/SageIII
DOXYGEN_ADDED_DIRECTORY_2 = /home/bronevet/Downloads/rose/compile/../src/frontend/SageIII
DOXYGEN_ENABLED_SECTIONS = documentDevelopmentVersionUsingDoxygen
DOXYGEN_EXTRACT_ALL = YES
DOXYGEN_EXTRACT_PRIVATE = YES
DOXYGEN_EXTRACT_STATIC = YES
DOXYGEN_HIDE_FRIEND_COMPOUNDS = NO
DOXYGEN_HIDE_UNDOC_CLASSES = NO
DOXYGEN_HIDE_UNDOC_MEMBERS = NO
DOXYGEN_INTERNAL_DOCS = YES
DOXYGEN_USE_TAG_FILE = 
DSYMUTIL = 
DUMPBIN = 
DWARF_INCLUDE = 
DWARF_LINK = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
ENABLE_I386_FALSE = 
ENABLE_I386_TRUE = #
ENABLE_JAVAPORT_FALSE = 
ENABLE_JAVAPORT_TRUE = #
ETHER_PREFIX = 
EXE = 
EXEEXT = 
FGREP = /bin/grep -F
FLTK_include_path = 
FLTK_libs_path = 
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = GNU-4.4
GEN_BE = sage_gen_be.o
GFORTRAN_PATH = /usr/bin/gfortran
GHCBIN = 
GLUT_include_path = 
GLUT_libs_path = 
GL_CFLAGS = 
GL_LIBS = 
GMP_INCLUDE_PATH = 
GMP_INSTALL_PATH = 
GMP_LIBRARY_PATH = 
GREP = /bin/grep
GraphViz_include_path = 
GraphViz_libs_path = 
HAS_LIBRARY_CURL_FALSE = 
HAS_LIBRARY_CURL_TRUE = #
HS_CONFIG_OPTS = --prefix=/home/bronevet/apps/rose --user
INCLTDL = -I${top_srcdir}/libltdl
INCLUDE_COMPASS_MAKEFILE_INC = include compass_makefile.inc
INDENT = indent
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_LTDL_FALSE = 
INSTALL_LTDL_TRUE = #
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
INSURE_OPTIONS = 
ISL_INCLUDE_PATH = 
ISL_INSTALL_PATH = 
ISL_LIBRARY_PATH = 
IntelPin_path = 
JAR = /usr/java/jdk1.7.0_04/bin/jar
JAVA = /usr/java/jdk1.7.0_04/bin/java
JAVAC = /usr/java/jdk1.7.0_04/bin/javac
JAVAH = /usr/java/jdk1.7.0_04/bin/javah
JAVA_JVM_INCLUDE = -I/usr/java/jdk1.7.0_04/include -I/usr/java/jdk1.7.0_04/include/linux
JAVA_JVM_LINK = -L/usr/java/jdk1.7.0_04/jre/lib/amd64/server -ljvm
JAVA_PATH = /usr/java/jdk1.7.0_04
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LEX = flex
LEXLIB = 
LEX_OUTPUT_ROOT = lex.yy
LIBADD_DL = -ldl 
LIBADD_DLD_LINK = 
LIBADD_DLOPEN = -ldl
LIBADD_SHL_LOAD = 
LIBFFI_CFLAGS = 
LIBFFI_LIBS = 
LIBLTDL = ${top_build_prefix}libltdl/libltdlc.la
LIBOBJS = 
LIBS = 
LIBS_WITH_RPATH = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool --quiet
LIPO = 
LLVM_CONFIG = 
LN_S = ln -s
LTDLDEPS = ${top_build_prefix}libltdl/libltdlc.la
LTDLINCL = -I${top_srcdir}/libltdl
LTDLOPEN = libltdl
LTLIBOBJS = 
LT_CONFIG_H = rose_config.h
LT_DLLOADERS =  dlopen.la
LT_DLPREOPEN = -dlpreopen dlopen.la 
MAKEINFO = ${SHELL} /home/bronevet/Downloads/rose/config/missing --run makeinfo
MAPLE_INCLUDES = 
MAPLE_LIBS = 
MD5 = md5sum
MINT = $(top_builddir)/projects/mint/src/mint
MOC = NONE/moc
MPICXX = 
MYSQL_CFLAGS = 
MYSQL_CONFIG = 
MYSQL_INCLUDE = 
MYSQL_LDFLAGS = 
MYSQL_VERSION = 
NM = /usr/bin/nm -B
NMEDIT = 
OBJ = .o
OBJDUMP = objdump
OBJEXT = o
OLD_COMPILER_VERSION_FALSE = 
OLD_COMPILER_VERSION_TRUE = #
OPEN_FORTRAN_PARSER_PATH = /src/3rdPartyLibraries/fortran-parser
OPTIONAL_PROJECTS = 
OS_32BIT_FALSE = 
OS_32BIT_TRUE = #
OS_64BIT_FALSE = #
OS_64BIT_TRUE = 
OS_LINUX_FALSE = #
OS_LINUX_TRUE = 
OS_MACOSX_FALSE = 
OS_MACOSX_TRUE = #
OS_MINGW_FALSE = 
OS_MINGW_TRUE = #
OS_MSDOS_FALSE = 
OS_MSDOS_TRUE = #
OS_VENDOR_APPLE_FALSE = 
OS_VENDOR_APPLE_TRUE = #
OS_VENDOR_CENTOS_FALSE = #
OS_VENDOR_CENTOS_TRUE = 
OS_VENDOR_DEBIAN_FALSE = 
OS_VENDOR_DEBIAN_TRUE = #
OS_VENDOR_REDHAT_32BIT_FALSE = 
OS_VENDOR_REDHAT_32BIT_TRUE = #
OS_VENDOR_REDHAT_FALSE = 
OS_VENDOR_REDHAT_TRUE = #
OS_VENDOR_UBUNTU_FALSE = 
OS_VENDOR_UBUNTU_TRUE = #
OS_release = 6.2
OS_vendor = CentOS
OTOOL = 
OTOOL64 = 
PACKAGE = rose
PACKAGE_BUGREPORT = 
PACKAGE_NAME = ROSE
PACKAGE_STRING = ROSE 0.9.5a
PACKAGE_TARNAME = rose
PACKAGE_VERSION = 0.9.5a
PACKAGE_VERSION_NUMERIC = 0.9.5.1
PATH_SEPARATOR = :
PERL = perl
PKG_CONFIG = /usr/bin/pkg-config
POET_INCL = -I$(poet_dir)
POET_LIB = 
PPL_PATH = 
PURIFY_OPTIONS = -windows=no -recursion-depth-limit=40000 -chain-length=24 -first-only=yes -leaks-at-exit=no -inuse-at-exit=no -always-use-cache-dir=yes -cache-dir=/home/bronevet/tmp -best-effort 
PYTHON = 
PYTHON_CPPFLAGS = 
PYTHON_EXTRA_LDFLAGS = 
PYTHON_EXTRA_LIBS = 
PYTHON_LDFLAGS = 
PYTHON_SITE_PKG = 
Pxx_INCLUDES = 
Pxx_LIBS = 
QROSE_PREFIX = 
QROSE_USE_MINGW32_FALSE = 
QROSE_USE_MINGW32_TRUE = #
QROSE_USE_WINDOWS_FALSE = 
QROSE_USE_WINDOWS_TRUE = #
QT_INCLUDES = -DQT3_SUPPORT -INONE/QtCore -INONE/QtGui -INONE/Qt3Support -INONE/QtXml -INONE
QT_LDFLAGS = -LNONE -lQtCore -lQtGui -lQt3Support -lQtXml -lQtUiTools
QT_VERSION = 
QT_VERSION_MAJOR = 
QT_VERSION_MINOR = 
RANLIB = ranlib
RCC = NONE/rcc
ROSEHPCT_DEP_INCLUDES = 
ROSEHPCT_DEP_LIBS = 
ROSE_BOOST_NORMAL_INCLUDE_PATH = 

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use). 
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = -isystem /home/bronevet/apps/boost/include
ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_FALSE = #
ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE = 
ROSE_BUILD_COMPASS2_FALSE = 
ROSE_BUILD_COMPASS2_TRUE = #
ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_CXX_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_CXX_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_C_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_C_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_EDG_WITH_CUDA_SUPPORT_FALSE = 
ROSE_BUILD_EDG_WITH_CUDA_SUPPORT_TRUE = #
ROSE_BUILD_EDG_WITH_OPENCL_SUPPORT_FALSE = 
ROSE_BUILD_EDG_WITH_OPENCL_SUPPORT_TRUE = #
ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_OS_IS_CYGWIN_FALSE = 
ROSE_BUILD_OS_IS_CYGWIN_TRUE = #
ROSE_BUILD_OS_IS_OSX_FALSE = 
ROSE_BUILD_OS_IS_OSX_TRUE = #
ROSE_BUILD_PHP_LANGUAGE_SUPPORT_FALSE = #
ROSE_BUILD_PHP_LANGUAGE_SUPPORT_TRUE = 
ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_FALSE = #
ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE = 
ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_FALSE = 
ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_TRUE = #
ROSE_BUILD_ROSEHPCT_FALSE = 
ROSE_BUILD_ROSEHPCT_TRUE = #
ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_FALSE = #
ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE = 
ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_FALSE = #
ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE = 
ROSE_EDG_MAJOR_VERSION_NUMBER = 3
ROSE_EDG_MINOR_VERSION_NUMBER = 3
ROSE_HAS_EDG_SOURCE_FALSE = 
ROSE_HAS_EDG_SOURCE_TRUE = #
ROSE_HAVE_LIBYICES_FALSE = 
ROSE_HAVE_LIBYICES_TRUE = #
ROSE_HAVE_YICES_FALSE = 
ROSE_HAVE_YICES_TRUE = #
ROSE_HOME = .
ROSE_LSB_RELEASE = lsb_release
ROSE_MPI_FALSE = 
ROSE_MPI_TRUE = #
ROSE_OBJDUMP_PATH = objdump
ROSE_OFP_CONTAINS_JAVA_FILE_FALSE = 
ROSE_OFP_CONTAINS_JAVA_FILE_TRUE = #
ROSE_OFP_JAR_FILE = OpenFortranParser-20111001.jar
ROSE_OFP_MAJOR_VERSION_NUMBER = 0
ROSE_OFP_MINOR_VERSION_NUMBER = 8
ROSE_OFP_PATCH_VERSION_NUMBER = 3
ROSE_OFP_VERSION_NUMBER = 20111001
ROSE_PCH_FALSE = 
ROSE_PCH_TRUE = #
ROSE_PS2PDF_PATH = ps2pdf
ROSE_SUPPORT_GNU_EXTENSIONS = FALSE
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = FALSE
ROSE_USE_ASSEMBLY_SEMANTICS_FALSE = 
ROSE_USE_ASSEMBLY_SEMANTICS_TRUE = #
ROSE_USE_BDDBDDB_FALSE = 
ROSE_USE_BDDBDDB_TRUE = #
ROSE_USE_BINARYCONTEXTLOOKUP_FALSE = 
ROSE_USE_BINARYCONTEXTLOOKUP_TRUE = #
ROSE_USE_BOOST_WAVE_FALSE = #
ROSE_USE_BOOST_WAVE_TRUE = 
ROSE_USE_CANDL = 
ROSE_USE_CANDL_FALSE = 
ROSE_USE_CANDL_TRUE = #
ROSE_USE_CLANG_FRONTEND = 
ROSE_USE_CLANG_FRONTEND_FALSE = 
ROSE_USE_CLANG_FRONTEND_TRUE = #
ROSE_USE_CLOOG = 
ROSE_USE_CLOOG_FALSE = 
ROSE_USE_CLOOG_TRUE = #
ROSE_USE_CUDA_SUPPORT = 7
ROSE_USE_CUDA_SUPPORT_FALSE = 
ROSE_USE_CUDA_SUPPORT_TRUE = #
ROSE_USE_DWARF_FALSE = 
ROSE_USE_DWARF_TRUE = #
ROSE_USE_EDG_VERSION_4_3_FALSE = 
ROSE_USE_EDG_VERSION_4_3_TRUE = #
ROSE_USE_EDG_VERSION_4_FALSE = 
ROSE_USE_EDG_VERSION_4_TRUE = #
ROSE_USE_ETHER_FALSE = 
ROSE_USE_ETHER_TRUE = #
ROSE_USE_GCC_OMP_FALSE = 
ROSE_USE_GCC_OMP_TRUE = #
ROSE_USE_GRAPHVIZ_DOT_FALSE = 
ROSE_USE_GRAPHVIZ_DOT_TRUE = #
ROSE_USE_IDA_FALSE = 
ROSE_USE_IDA_TRUE = #
ROSE_USE_INDENT_FALSE = #
ROSE_USE_INDENT_TRUE = 
ROSE_USE_INSURE_FALSE = 
ROSE_USE_INSURE_TRUE = #
ROSE_USE_INTEL_PIN_FALSE = 
ROSE_USE_INTEL_PIN_TRUE = #
ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE = 
ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE = #
ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_FALSE = #
ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_TRUE = 
ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE = #
ROSE_USE_INTERNAL_JAVA_SUPPORT_TRUE = 
ROSE_USE_LIBFFI_FALSE = 
ROSE_USE_LIBFFI_TRUE = #
ROSE_USE_LIBNUMA_FALSE = 
ROSE_USE_LIBNUMA_TRUE = #
ROSE_USE_LLVM_FALSE = 
ROSE_USE_LLVM_TRUE = #
ROSE_USE_LONG_MAKE_CHECK_RULE_FALSE = 
ROSE_USE_LONG_MAKE_CHECK_RULE_TRUE = #
ROSE_USE_MAPLE_FALSE = 
ROSE_USE_MAPLE_TRUE = #
ROSE_USE_MYSQL_FALSE = 
ROSE_USE_MYSQL_TRUE = #
ROSE_USE_NEW_EDG_INTERFACE_FALSE = 
ROSE_USE_NEW_EDG_INTERFACE_TRUE = #
ROSE_USE_OBJDUMP_FALSE = #
ROSE_USE_OBJDUMP_TRUE = 
ROSE_USE_OMNI_OPENMP_FALSE = 
ROSE_USE_OMNI_OPENMP_TRUE = #
ROSE_USE_OPENCL_SUPPORT = 
ROSE_USE_OPENCL_SUPPORT_FALSE = 
ROSE_USE_OPENCL_SUPPORT_TRUE = #
ROSE_USE_OPENGL_FALSE = 
ROSE_USE_OPENGL_TRUE = #
ROSE_USE_PHP_FALSE = 
ROSE_USE_PHP_TRUE = #
ROSE_USE_PPL = 
ROSE_USE_PPL_FALSE = 
ROSE_USE_PPL_TRUE = #
ROSE_USE_PS2PDF_FALSE = #
ROSE_USE_PS2PDF_TRUE = 
ROSE_USE_PYTHON_FALSE = #
ROSE_USE_PYTHON_TRUE = 
ROSE_USE_QROSE_FALSE = 
ROSE_USE_QROSE_TRUE = #
ROSE_USE_QT_FALSE = 
ROSE_USE_QT_TRUE = #
ROSE_USE_RTED_FALSE = 
ROSE_USE_RTED_TRUE = #
ROSE_USE_SAT_FALSE = 
ROSE_USE_SAT_TRUE = #
ROSE_USE_SCOPLIB = 
ROSE_USE_SCOPLIB_FALSE = 
ROSE_USE_SCOPLIB_TRUE = #
ROSE_USE_SMALLER_GENERATED_FILES_FALSE = 
ROSE_USE_SMALLER_GENERATED_FILES_TRUE = #
ROSE_USE_SQLITE_DATABASE_FALSE = 
ROSE_USE_SQLITE_DATABASE_TRUE = #
ROSE_USE_SSL_SUPPORT_FALSE = 
ROSE_USE_SSL_SUPPORT_TRUE = #
ROSE_USE_TCLSH_FALSE = 
ROSE_USE_TCLSH_TRUE = #
ROSE_USE_TEST_SMT_SOLVER_FALSE = 
ROSE_USE_TEST_SMT_SOLVER_TRUE = #
ROSE_USE_TRACE_ANALYSIS_FALSE = 
ROSE_USE_TRACE_ANALYSIS_TRUE = #
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = 
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_FALSE = 
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_TRUE = #
ROSE_USE_VISUALIZATION_FALSE = 
ROSE_USE_VISUALIZATION_TRUE = #
ROSE_USE_WGET_FALSE = #
ROSE_USE_WGET_TRUE = 
ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_FALSE = 
ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE = #
ROSE_USE_XML_FALSE = 
ROSE_USE_XML_TRUE = #
ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_FALSE = 
ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_TRUE = #
ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE = 
ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_TRUE = #
ROSE_USING_BOOST_VERSION_1_35_FALSE = 
ROSE_USING_BOOST_VERSION_1_35_TRUE = #
ROSE_USING_BOOST_VERSION_1_36_FALSE = 
ROSE_USING_BOOST_VERSION_1_36_TRUE = #
ROSE_USING_BOOST_VERSION_1_37_FALSE = 
ROSE_USING_BOOST_VERSION_1_37_TRUE = #
ROSE_USING_BOOST_VERSION_1_38_FALSE = 
ROSE_USING_BOOST_VERSION_1_38_TRUE = #
ROSE_USING_BOOST_VERSION_1_39_FALSE = 
ROSE_USING_BOOST_VERSION_1_39_TRUE = #
ROSE_USING_BOOST_VERSION_1_40_FALSE = 
ROSE_USING_BOOST_VERSION_1_40_TRUE = #
ROSE_USING_BOOST_VERSION_1_41_FALSE = 
ROSE_USING_BOOST_VERSION_1_41_TRUE = #
ROSE_USING_BOOST_VERSION_1_42_FALSE = 
ROSE_USING_BOOST_VERSION_1_42_TRUE = #
ROSE_USING_BOOST_VERSION_1_43_FALSE = 
ROSE_USING_BOOST_VERSION_1_43_TRUE = #
ROSE_USING_BOOST_VERSION_1_44_FALSE = 
ROSE_USING_BOOST_VERSION_1_44_TRUE = #
ROSE_USING_BOOST_VERSION_1_45_FALSE = 
ROSE_USING_BOOST_VERSION_1_45_TRUE = #
ROSE_USING_BOOST_VERSION_1_46_FALSE = 
ROSE_USING_BOOST_VERSION_1_46_TRUE = #
ROSE_USING_BOOST_VERSION_1_47_FALSE = 
ROSE_USING_BOOST_VERSION_1_47_TRUE = #
ROSE_USING_BOOST_VERSION_1_48_FALSE = 
ROSE_USING_BOOST_VERSION_1_48_TRUE = #
ROSE_USING_GFORTRAN_VERSION_4_0_FALSE = 
ROSE_USING_GFORTRAN_VERSION_4_0_TRUE = #
ROSE_USING_GFORTRAN_VERSION_4_1_FALSE = 
ROSE_USING_GFORTRAN_VERSION_4_1_TRUE = #
ROSE_USING_GFORTRAN_VERSION_4_2_FALSE = 
ROSE_USING_GFORTRAN_VERSION_4_2_TRUE = #
ROSE_USING_GFORTRAN_VERSION_4_4_FALSE = #
ROSE_USING_GFORTRAN_VERSION_4_4_TRUE = 
ROSE_USING_GFORTRAN_VERSION_4_5_FALSE = 
ROSE_USING_GFORTRAN_VERSION_4_5_TRUE = #
ROSE_USING_GFORTRAN_VERSION_4_6_FALSE = 
ROSE_USING_GFORTRAN_VERSION_4_6_TRUE = #
ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_FALSE = 
ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_TRUE = #
ROSE_USING_ROSE_ANALYSIS_FALSE = 
ROSE_USING_ROSE_ANALYSIS_TRUE = #
ROSE_USING_ROSE_AST_FILE_IO_FALSE = 
ROSE_USING_ROSE_AST_FILE_IO_TRUE = #
ROSE_USING_ROSE_CODE_GENERATION_FALSE = 
ROSE_USING_ROSE_CODE_GENERATION_TRUE = #
ROSE_USING_ROSE_FALSE = 
ROSE_USING_ROSE_TRANSLATOR_FALSE = 
ROSE_USING_ROSE_TRANSLATOR_TRUE = #
ROSE_USING_ROSE_TRUE = #
ROSE_WGET_PATH = wget
ROSE_WITH_GMP_FALSE = 
ROSE_WITH_GMP_INCLUDE_FALSE = 
ROSE_WITH_GMP_INCLUDE_TRUE = #
ROSE_WITH_GMP_TRUE = #
ROSE_WITH_ISL_FALSE = 
ROSE_WITH_ISL_INCLUDE_FALSE = 
ROSE_WITH_ISL_INCLUDE_TRUE = #
ROSE_WITH_ISL_TRUE = #
ROSE_WITH_ROSEQT_FALSE = 
ROSE_WITH_ROSEQT_TRUE = #
ROSE_WITH_UPC_FALSE = 
ROSE_WITH_UPC_TRUE = #
ROSE_YICES = 
ROSE_YICES_PREFIX = 
RT_LIBS = -lrt -ldl -ldl 
SCOPLIB_PATH = 
SED = sed
SET_MAKE = 
SHELL = /bin/sh
SQLITE3_CFLAGS = 
SQLITE3_LDFLAGS = 
SQLITE3_VERSION = 
STRIP = strip
SWIG = /usr/bin/swig -c++
SWIG_LIB = /usr/share/swig/1.3.40
TCLSH = 
TEST_SMT_SOLVER = 
UIC = NONE/uic
UPC = 
UPCDEPMODE = 
UPCFLAGS = 
USE_BINARY_ANALYSIS_TESTS_FALSE = #
USE_BINARY_ANALYSIS_TESTS_TRUE = 
USE_GCJ_FALSE = 
USE_GCJ_TRUE = #
USE_HASKELL_FALSE = 
USE_HASKELL_TRUE = #
USE_ROSE_GLUT_SUPPORT_FALSE = 
USE_ROSE_GLUT_SUPPORT_TRUE = #
USE_ROSE_IN_BUILD_TREE_VAR_FALSE = 
USE_ROSE_IN_BUILD_TREE_VAR_TRUE = #
USE_VALGRIND_FALSE = 
USE_VALGRIND_TRUE = #
USING_GCC_3_4_4_BACKEND_COMPILER_FALSE = 
USING_GCC_3_4_4_BACKEND_COMPILER_TRUE = #
USING_GCC_4_0_4_BACKEND_COMPILER_FALSE = 
USING_GCC_4_0_4_BACKEND_COMPILER_TRUE = #
USING_GNU_COMPILER_FALSE = #
USING_GNU_COMPILER_TRUE = 
USING_INTEL_COMPILER_FALSE = 
USING_INTEL_COMPILER_TRUE = #
USING_WINDOWS = 0
USING_XTENSA_BACKEND_COMPILER_FALSE = 
USING_XTENSA_BACKEND_COMPILER_TRUE = #
VALGRIND_BINARY = 
VERSION = 0.9.5a
WITH_GOMP_OPENMP_LIB_FALSE = 
WITH_GOMP_OPENMP_LIB_TRUE = #
XERCES_CPPFLAGS = 
XERCES_LDFLAGS = 
XERCES_LIBS = 
XERCES_VERSION = 
XMKMF = 
XML2_CONFIG = no
XML_CPPFLAGS = 
XML_LIBS = 
X_CFLAGS =  -INONE
X_EXTRA_LIBS = 
X_LIBS =  -LNONE
X_PRE_LIBS = 
YACC = bison -y
YFLAGS = 
absolute_path_srcdir = /home/bronevet/Downloads/rose
ac_boost_path = /home/bronevet/apps/boost
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
ac_ct_MPICXX = 
ac_ct_UPC = 
am__fastdepCC_FALSE = 
am__fastdepCC_TRUE = #
am__fastdepCXX_FALSE = 
am__fastdepCXX_TRUE = #
am__fastdepUPC_FALSE = 
am__fastdepUPC_TRUE = #
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
backstroke_ross_path = 
backstroke_speedes_path = 
bddbddb_path = 
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_triplet_without_redhat = x86_64-pc-linux-gnu
build_vendor = unknown
configure_date = Friday July 27 15:54:01 2012
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
dwarf_path = 
edg_union_struct_debugging_value = union
exec_prefix = ${prefix}
glut_path = 
gomp_omp_runtime_library_path = 
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
ida_path = 
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /home/bronevet/Downloads/rose/config/install-sh
insure_BIN = 
insure_LIBS = 
insure_PREFIX = 
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
llvm_path = 
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
ltdl_LIBOBJS =  lt__strl.o
ltdl_LTLIBOBJS =  lt__strl.lo
mandir = ${datarootdir}/man
maple_path = 
mkdir_p = mkdir -p --
oldincludedir = /usr/include
omni_omp_runtime_support_path = 
optional_Visualization_subdirs = 
parallel_ast_traversal_omp_path = 
pdfdir = ${docdir}
php_path = 
poet_dir = /src/3rdPartyLibraries/POET
prefix = /home/bronevet/apps/rose
program_transform_name = s,x,x,
psdir = ${docdir}
purify_BIN = 
purify_INCLUDES = 
purify_LIBS = 
purify_PREFIX = 
rted_path = 
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
subdirs =  libltdl src/3rdPartyLibraries/libharu-2.1.0
sys_symbol_underscore = no
sysconfdir = ${prefix}/etc
target_alias = 
top_pwd = /home/bronevet/Downloads/rose/compile
wine_path = 

# SQLite is a simpler database to use than MySQL
#ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
#SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
#SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
#ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
#ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
#ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
#ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library 
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
#ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
#ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
#ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
#ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
#ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
#ROSE_ROSEHPCT_LIBS = -lrosehpct
#ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
#ROSE_YICES_INCLUDES = -I/include
#ROSE_YICES_LIBS = -lyices
#ROSE_YICES_LIBS_WITH_PATH = /lib/libyices.a
GLUT_LIBS = ${glut_path}

# ROSE-DWARF libdwarf support
#ROSE_DWARF_INCLUDES = -I$(dwarf_path)
# DQ (3/15/2009): Use the usual static linking when not using Intel Pin (what we used to do).
# DQ (3/13/2009): Fixup libdwarf support in ROSE to always use the dynamic (shared) library.
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(dwarf_path) -L$(dwarf_path) -ldwarf -lelf
# DQ (6/5/2010): Fixed to use the value set in the configure step (requires the dynamic library).
# ROSE_DWARF_LIBS_WITH_PATH = $(dwarf_path)/libdwarf.a -lelf
#ROSE_DWARF_LIBS_WITH_PATH = 

# DQ (3/13/2009): These do not appear to be used anywhere.
# ROSE_DWARF_LIBS = -ldwarf
# ROSE_DWARF_LIB_FILE = libdwarf.a

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for 
# dwarf when used with Intel Pin.
# ROSE_DWARF_LIBS_WITH_PATH = $(INTEL_PIN_PATH)/intel64/lib-ext/libdwarf.a -lelf
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(INTEL_PIN_PATH)/intel64/lib-ext -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
##ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
##INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
#ROSE_WINE_INCLUDES = -I$(wine_path)/include
#ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
#ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
#ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
#ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
#ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
#	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
#	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
#	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
#	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
#	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
#	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
#	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
#	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
#	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
#	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
#	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
#	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
#	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
#	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
#	-lLLVMInstrumentation -lLLVMJIT \
#	-lLLVMExecutionEngine -lLLVMCppBackend \
#	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
#	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
#	-lLLVMCBackend -lLLVMCBackendInfo \
#	-lLLVMBlackfinCodeGen \
#	-lLLVMBlackfinAsmPrinter \
#	-lLLVMBlackfinInfo -lLLVMBitWriter \
#	-lLLVMX86Disassembler -lLLVMX86AsmParser \
#	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
#	-lLLVMX86Info -lLLVMAsmParser \
#	-lLLVMARMAsmParser -lLLVMMCParser \
#	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
#	-lLLVMARMInfo -lLLVMArchive \
#	-lLLVMBitReader -lLLVMAlphaCodeGen \
#	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
#	-lLLVMAsmPrinter -lLLVMCodeGen \
#	-lLLVMScalarOpts -lLLVMInstCombine \
#	-lLLVMTransformUtils -lLLVMipa \
#	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
#	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
#	-lLLVMSystem

# adding all libraries for now

# SSL support permits use of MD5 checksums internally for binary library identification.
#ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
#ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
#INTEL_PIN_PATH = 
#INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
#INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
#INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_USE_DWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
#ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
#ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
#ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm
ROSE_INCLUDES = \
     $(ROSE_BOOST_PREINCLUDE_PATH) \
     -I$(top_builddir)/src/roseSupport \
     -I$(top_builddir)/src/frontend/SageIII \
     -I$(top_srcdir)/src \
     -I$(top_srcdir)/src/frontend/SageIII \
     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
     -I$(top_srcdir)/src/frontend/PHPFrontend \
     -I$(top_srcdir)/src/frontend/CxxFrontend/ClangFrontend \
     -I$(top_srcdir)/src/frontend/PythonFrontend \
     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
     -I$(top_srcdir)/src/frontend/BinaryFormats \
     -I$(top_srcdir)/src/frontend/BinaryLoader \
     -I$(top_srcdir)/src/frontend/Disassemblers \
     -I$(top_srcdir)/src/frontend/CxxFrontend/Clang \
     -I$(top_srcdir)/src/backend/unparser \
     -I$(top_srcdir)/src/backend/unparser/formatSupport \
     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
     -I$(top_srcdir)/src/backend/asmUnparser \
     -I$(top_srcdir)/src/util \
     -I$(top_srcdir)/src/util/support \
     -I$(top_srcdir)/src/util/graphs  \
     -I$(top_srcdir)/src/util/stringSupport \
     -I$(top_srcdir)/src/util/commandlineProcessing \
     -I$(top_srcdir)/src/midend/abstractHandle \
     -I$(top_srcdir)/src/midend/abstractMemoryObject \
     -I$(top_srcdir)/src/midend/astDiagnostics \
     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
     -I$(top_srcdir)/src/midend/astProcessing \
     -I$(top_srcdir)/src/midend/astQuery \
     -I$(top_srcdir)/src/midend/astRewriteMechanism \
     -I$(top_srcdir)/src/midend/astUtil/annotation \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/src/midend/astUtil/astSupport \
     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
     -I$(top_srcdir)/src/midend/binaryAnalyses \
     -I$(top_srcdir)/src/midend/binaryAnalyses/dataflowanalyses \
     -I$(top_srcdir)/src/midend/binaryAnalyses/instructionSemantics \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
     -I$(top_srcdir)/src/midend/programTransformation/extractFunctionArgumentsNormalization \
     -I$(top_srcdir)/src/midend/programAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
     -I$(top_srcdir)/src/midend/programAnalysis/ssaUnfilteredCfg \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
     -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow \
     -I$(top_srcdir)/src/midend/programAnalysis/VirtualFunctionAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/graphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
      $(ROSE_SIDEEFFECTS_INCLUDE) \
      $(ROSE_DATABASE_INCLUDE) \
      $(ROSE_GUI_INCLUDE) \
      $(ROSE_QT_INCLUDE) \
      $(ROSE_SQLITE_DATABASE_INCLUDE) \
			$(ROSE_SIDEEFFECT_INCLUDE) \
      $(SQLITE_DATABASE_INCLUDE) \
     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
     -I$(top_srcdir)/src/roseSupport \
     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
     -I$(top_srcdir)/src/util/graphs \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/libltdl \
     $(ROSE_PHP_INCLUDES) \
     $(ROSE_PYTHON_INCLUDES) \
     $(ROSE_YICES_INCLUDES) \
     $(ROSE_DWARF_INCLUDES) \
     $(ROSE_WINE_INCLUDES) \
     $(VALGRIND_CFLAGS) \
     $(SQLITE3_CFLAGS) \
     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) -DBOOST_REGEX_MATCH_EXTRA \
     $(ROSE_PCH_INCLUDE) \
     $(INTEL_PIN_INCLUDE_PATHS) \
     $(ROSE_ETHER_INCLUDE)


# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the 
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
#ROSE_INCLUDES = \
#     $(ROSE_BOOST_PREINCLUDE_PATH) \
#     -I$(top_builddir)/src/roseSupport \
#     -I$(top_builddir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src \
#     -I$(top_srcdir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
#     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
#     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
#     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
#     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
#     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
#     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
#     -I$(top_srcdir)/src/frontend/BinaryFormats \
#     -I$(top_srcdir)/src/frontend/BinaryLoader \
#     -I$(top_srcdir)/src/frontend/Disassemblers \
#     -I$(top_srcdir)/src/backend/unparser \
#     -I$(top_srcdir)/src/backend/unparser/formatSupport \
#     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
#     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
#     -I$(top_srcdir)/src/backend/asmUnparser \
#     -I$(top_srcdir)/src/util \
#     -I$(top_srcdir)/src/util/support \
#     -I$(top_srcdir)/src/util/graphs  \
#     -I$(top_srcdir)/src/util/stringSupport \
#     -I$(top_srcdir)/src/util/commandlineProcessing \
#     -I$(top_srcdir)/src/midend/astDiagnostics \
#     -I$(top_srcdir)/src/midend/astProcessing \
#     -I$(top_srcdir)/src/midend/astQuery \
#     -I$(top_srcdir)/src/midend/binaryAnalyses \
#     -I$(top_srcdir)/src/midend/programAnalysis \
#     -I$(top_srcdir)/src/roseSupport \
#     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
#     -I$(top_srcdir)/src/util/graphs \
#     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) -DBOOST_REGEX_MATCH_EXTRA 


# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph 
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer 
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they 
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently 
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)
ROSE_LIBS = $(top_builddir)/src/librose.la -lm  $(JAVA_JVM_LINK) \
  $(SQLITE_DATABASE_LIBS) $(QT_LIBS)  $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(SQLITE3_LDFLAGS)  $(RT_LIBS) \
  $(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
  $(ROSE_GUI_LIBS_WITH_PATH) $(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
  $(ROSE_INTEL_COMPILER_MATH_LIBS)


# DQ (3/13/2009): Removed this from ROSE_LIBS because libtool warnings say it should be in AM_LDFLAGS
# (this is because it has been moved from being linked statically to being linked dynamically).
# $(ROSE_DWARF_LIBS_WITH_PATH)
# AM_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext
# DQ (3/14/2009): Need to add rpath to LDFLAGS instead of LDADD (to follow libtool rules).
# LDFLAGS += $(ROSE_DWARF_LIBS_WITH_PATH)

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)
#   $(LIB_QT) $(JAVA_JVM_LIB) 

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS 

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly 
# with make distcheck rule 
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Location of sample binary files (executables, libraries, etc) that serve as input to
# some of the binary analysis tests.
BINARY_SAMPLES = $(top_srcdir)/binaries/samples

# Test harness variables. See "rth_run.pl --help" for more info.
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl \
	srcdir=$(srcdir) top_srcdir=$(top_srcdir) \
	VALGRIND=$(VALGRIND) BINARY_SAMPLES=$(BINARY_SAMPLES)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl
compass_srcdir = $(top_srcdir)/projects/compass/src
compass_tooldir = $(top_srcdir)/projects/compass/tools
compass_extdir = $(top_srcdir)/projects/compass/extensions
compass_build_srcdir = $(top_builddir)/projects/compass/src
compass_build_tooldir = $(top_builddir)/projects/compass/tools
compass_build_extdir = $(top_builddir)/projects/compass/extensions
compass_prereqs_dir = $(compass_extdir)/prerequisites
compass_checker_dir = $(compass_extdir)/checkers
compass_checker_repository = $(compass_checker_dir)/repository
compass_support_dir = $(compass_srcdir)/compassSupport
compass_scripts_dir = $(compass_srcdir)/compass_scripts
compass_input_dir = $(compass_srcdir)/in
compass_test_dir = $(compass_srcdir)/tests
compass_checker_bdir = $(compass_build_extdir)/checkers
compass_support_bdir = $(compass_build_srcdir)/compassSupport

# DQ (1/18/2009): Added demo directory to support showoffs :-).
# DQ "config" and "src" must preceed any other directories, and 
# "tutorial" and "exampleTranslators" must preceed "docs" since 
# they generate data that is subsequently used in the generated 
# ROSE documentation (examples, input codes, and generated output).
# SUBDIRS = config src projects tests tutorial exampleTranslators docs developersScratchSpace tools proposals scripts
# SUBDIRS = libltdl config src projects tests tutorial exampleTranslators docs tools scripts demo binaries

# DQ (2/6/2010): changed the order of tests, the projects directory now follows the tests directory.
# This was something that was discussed in email previously with the group.  Thei point is to have the
# first tests run by make check be the most relevant tests (e.g. can we compile C++ code).
# SUBDIRS = libltdl config src tests projects tutorial exampleTranslators docs tools scripts demo binaries

# DQ (4/17/2010): Support for minimal configuration of ROSE (e.g. "--enable-only-fortran").
SUBDIRS = libltdl config src $(am__append_1) $(am__append_2) \
	$(am__append_3) $(am__append_4) $(am__append_5) \
	$(am__append_6)
# endif for controling Insure++ usage.
ACLOCAL_AMFLAGS = -I ./config -I ./acmacros -I ./libltdl -I /usr/share/aclocal

# DQ (6/29/2004): I don't think we need this!
# LIBS =  ${SAGE_LIBS}

# It seems that it is better to handle the config directory with its own Makefile.am
# This allows us to hide autoconf accessory files (config.guess, etc.)
# Copy the config directory to the distribution: why?
# (because it has the file: config/Makefile.for.ROSE.includes.and.libs)
# EXTRA_DIST = stamp-h.in stamp-h1.in GNU_HEADERS config
# EXTRA_DIST = stamp-h.in stamp-h1.in rose.docs.in GNU_HEADERS COPYWRITE ROSE_ResearchPapers
# EXTRA_DIST = cmake CMakeLists.txt rose_config.h.in.cmake stamp-h.in stamp-h1.in rose.docs.in COPYRIGHT \
#              LicenseInformation ROSE_ResearchPapers README.OSX README.Cygwin build ChangeLog2 bincompat-sig
EXTRA_DIST = cmake CMakeLists.txt rose_config.h.in.cmake stamp-h.in stamp-h1.in rose.docs.in COPYRIGHT \
             LicenseInformation ROSE_ResearchPapers build ChangeLog2 bincompat-sig


# DQ (10/14/2010): We want to make sure that this does not go out to the install tree
# it also should not be in the distribution (since we want rose_config.h.in to be put 
# into the distribution instead; from which then rose_config.h is generated).
# However, the public version should be installed and distributed.
noinst_HEADERS = rose_config.h
include_HEADERS = rosePublicConfig.h

# DQ (4/22/2005): Set this so that make distcheck will use the same 
# --with-edg_source_code=true/false option as were used at configure.
# JJW (5/14/2008): Add the Boost flag the same way, using an internal
# variable from AX_BOOST_* to find the argument to --with-boost when
# this copy of ROSE was originally configured.
DISTCHECK_CONFIGURE_FLAGS = --with-boost=$(ac_boost_path) \
	$(am__append_7) $(am__append_8) $(am__append_9) \
	$(am__append_10) $(am__append_11)

# We reset distdir as shown on
# http://jcalcote.wordpress.com/2008/02/23/autoconf-macros-exposed-at3/ to add the SVN
# revision number
# The final distribution package should be
# rose-0.9.5a-8286.tar.gz
#
# Liao 12/14/2009
# We don't use subversion anymore
# We convert the number of git commits to a pseudo revision number instead
distdir = $(PACKAGE)-$(VERSION)$(DOT_SVNREV)

# CLEANFILES = rose_binary_compatibility_signature rose_binary_compatibility_signature_src
CLEANFILES = rose_binary_compatibility_signature bincompat-sig
FILTER_MAKEFILES = grep "Makefile\.am" | grep -v "Makefile\.am~"

# ***********************************************************
#      Display Which Automake Conditionals Are Defined
# ***********************************************************
# DQ (10/18/2010): Added test for names used in automake conditional macros
# (eventually we want tests for consistancy).  This rule generates a makefile
# containing a makefile rule. The makefile rule can be run to see what automake
# conditionals were defined in the last run of configure. It might be that 
# this mechanism should be in a script generated by the build script, but we 
# need an initial version of the generated script to be checked into git so that 
# the build script can find it.  Note that we grep the Makefile.in instead of
# the Makefile.am (which would be more difficult, I think). So we need the
# Makefile.in from runing the build script first.  Thus having the generated
# file checked into git avoids a dependence on a file that we would not have.
FILTER_AUTOMAKE_CONDITONALS = egrep -v "autom4te" | grep -v "~" | grep AM_CONDITIONAL
TEST_FILE = $(top_srcdir)/config/automake_conditional_display_makefile

# Include this file (generated first by the rule down below and checked into our git repository).
# This could be generated by our build script.
# ***********************************************************

# DQ (10/18/2010): These are used all over within a line (so don't use start of line anchor).
# (eventually we want tests for consistancy)
FILTER_AUTOCONF_DEFINE = egrep -v "autom4te" | grep -v "~" | grep -v "configure:" | grep AC_DEFINE
release_binary_compatibility_signature = $(shell ${top_srcdir}/scripts/bincompat-sig)
DISTCLEANFILES = rosePublicConfig.h
all: rose_config.h
	$(MAKE) $(AM_MAKEFLAGS) all-recursive

.SUFFIXES:
am--refresh:
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(top_srcdir)/projects/compass/src/compassSupport/compass_dirs.inc $(top_srcdir)/config/build_rose_paths.Makefile $(top_srcdir)/config/automake_conditional_display_makefile $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign  --ignore-deps'; \
	      cd $(srcdir) && $(AUTOMAKE) --foreign  --ignore-deps \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  --ignore-deps Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  --ignore-deps Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)

rose_config.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/rose_config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status rose_config.h
$(srcdir)/rose_config.h.in:  $(am__configure_deps) 
	cd $(top_srcdir) && $(AUTOHEADER)
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f rose_config.h stamp-h1
src/frontend/CxxFrontend/EDG/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_3.3/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.3/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_3.3/misc/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.3/misc/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_3.3/src/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.3/src/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_3.10/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_3.10/misc/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/misc/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_3.10/src/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/src/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_3.10/src/disp/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/src/disp/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_3.10/lib/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/lib/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_4.0/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_4.0/misc/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/misc/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_4.0/src/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/src/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_4.0/src/disp/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/src/disp/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_4.0/lib/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/lib/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_4.3/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_4.3/misc/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/misc/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_4.3/src/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/src/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_4.3/src/disp/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/src/disp/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_4.3/lib/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/lib/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/EDG_SAGE_Connection/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_SAGE_Connection/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/edgRose/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/edgRose/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
src/frontend/CxxFrontend/EDG/edg43Rose/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/edg43Rose/Makefile.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
stamp-h: $(top_builddir)/config.status $(srcdir)/stamp-h.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
rose.docs: $(top_builddir)/config.status $(srcdir)/rose.docs.in
	cd $(top_builddir) && $(SHELL) ./config.status $@

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(includedir)" || $(mkdir_p) "$(DESTDIR)$(includedir)"
	@list='$(include_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(includeHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(includedir)/$$f'"; \
	  $(includeHEADERS_INSTALL) "$$d$$p" "$(DESTDIR)$(includedir)/$$f"; \
	done

uninstall-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(includedir)/$$f'"; \
	  rm -f "$(DESTDIR)$(includedir)/$$f"; \
	done

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES) rose_config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS) rose_config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES) rose_config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) rose_config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(am__remove_distdir)
	mkdir $(distdir)
	$(mkdir_p) $(distdir)/. $(distdir)/acmacros $(distdir)/config $(distdir)/docs/Rose $(distdir)/docs/Rose/Tutorial $(distdir)/docs/testDoxygen $(distdir)/exampleTranslators/documentedExamples/simpleTranslatorExamples $(distdir)/projects/bugSeeding $(distdir)/projects/compass/src/compassSupport $(distdir)/projects/compass/tools/compass/doc $(distdir)/projects/compass2/docs/doxygen $(distdir)/projects/compass2/tests/checkers/function_pointer $(distdir)/projects/compass2/tests/checkers/keyword_macro $(distdir)/projects/compass2/tests/core $(distdir)/projects/haskellport $(distdir)/src/frontend/CxxFrontend/EDG $(distdir)/src/frontend/CxxFrontend/EDG/EDG_3.10 $(distdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/lib $(distdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/misc $(distdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/src $(distdir)/src/frontend/CxxFrontend/EDG/EDG_3.10/src/disp $(distdir)/src/frontend/CxxFrontend/EDG/EDG_3.3 $(distdir)/src/frontend/CxxFrontend/EDG/EDG_3.3/misc $(distdir)/src/frontend/CxxFrontend/EDG/EDG_3.3/src $(distdir)/src/frontend/CxxFrontend/EDG/EDG_4.0 $(distdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/lib $(distdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/misc $(distdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/src $(distdir)/src/frontend/CxxFrontend/EDG/EDG_4.0/src/disp $(distdir)/src/frontend/CxxFrontend/EDG/EDG_4.3 $(distdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/lib $(distdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/misc $(distdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/src $(distdir)/src/frontend/CxxFrontend/EDG/EDG_4.3/src/disp $(distdir)/src/frontend/CxxFrontend/EDG/EDG_SAGE_Connection $(distdir)/src/frontend/CxxFrontend/EDG/edg43Rose $(distdir)/src/frontend/CxxFrontend/EDG/edgRose $(distdir)/src/frontend/SageIII $(distdir)/tutorial
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(mkdir_p) "$(distdir)/$$subdir" \
	    || exit 1; \
	    distdir=`$(am__cd) $(distdir) && pwd`; \
	    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$top_distdir" \
	        distdir="$$distdir/$$subdir" \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
	$(MAKE) $(AM_MAKEFLAGS) \
	  top_distdir="$(top_distdir)" distdir="$(distdir)" \
	  dist-hook
	-find $(distdir) -type d ! -perm -777 -exec chmod a+rwx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(SHELL) $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r $(distdir)
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bunzip2 -c $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod a+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && cd $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e '1{h;s/./=/g;p;x;}' -e '$${p;x;}'
distuninstallcheck:
	@cd $(distuninstallcheck_dir) \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-recursive
all-am: Makefile $(HEADERS) rose_config.h all-local
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(includedir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-generic clean-libtool clean-local mostlyclean-am

distclean: distclean-recursive
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-hdr \
	distclean-libtool distclean-local distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

info: info-recursive

info-am:

install-data-am: install-data-local install-includeHEADERS

install-exec-am: install-exec-local

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-generic mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-includeHEADERS uninstall-info-am \
	uninstall-local

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am all-local \
	am--refresh check check-am check-local clean clean-generic \
	clean-libtool clean-local clean-recursive ctags \
	ctags-recursive dist dist-all dist-bzip2 dist-gzip dist-hook \
	dist-shar dist-tarZ dist-zip distcheck distclean \
	distclean-generic distclean-hdr distclean-libtool \
	distclean-local distclean-recursive distclean-tags \
	distcleancheck distdir distuninstallcheck dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-data-local install-exec \
	install-exec-am install-exec-local install-includeHEADERS \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs installdirs-am \
	maintainer-clean maintainer-clean-generic \
	maintainer-clean-recursive mostlyclean mostlyclean-generic \
	mostlyclean-libtool mostlyclean-recursive pdf pdf-am ps ps-am \
	tags tags-recursive uninstall uninstall-am \
	uninstall-includeHEADERS uninstall-info-am uninstall-local


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
#export ROSE_IN_BUILD_TREE=$(top_builddir)
 # If we can't process the tutorial directory then we can't generate example translators or the documentation
 # If we can't process the tutorial directory then we can't run demos

# Force rose.docs to be make by default 
# (if rose.docs.in is modified)
all-local: rose.docs 

all: enforce_policies remove_sage3basic_h_pch

core:
	$(MAKE) -C $(top_builddir)/src
	$(MAKE) -C $(top_builddir)/exampleTranslators
	$(MAKE) -C $(top_builddir)/tutorial

install-core: core rosePublicConfig.h
	$(MAKE) install-data-local
	$(MAKE) install -C $(top_builddir)/src
	$(MAKE) install -C $(top_builddir)/exampleTranslators
	$(MAKE) install -C $(top_builddir)/tutorial
	cp rosePublicConfig.h $(DESTDIR)$(includedir)/

install-compass: install-core
	$(MAKE) -C $(top_builddir)/projects/compass
	$(MAKE) install -C $(top_builddir)/projects/compass

# DQ (10/2/10): Of course this will over-rise the "make install" rule, so we can't 
# allow exactly this (what was I thinking?). Commented out until I get a better fix.
# DQ (9/29/2010): Next three lines are a modification suggested by Scott Warren to 
# support Eclipse.  Supports Eclipse feature called "makefile project with existing code" 
# which wants to have a single target to force the build.
#.PHONY: all-install

#all-install: all install

#install: all

remove_sage3basic_h_pch:
	touch $(top_builddir)/src/frontend/SageIII/sage3basic.h.pch
	rm    $(top_builddir)/src/frontend/SageIII/sage3basic.h.pch

# These are policies that we'd like to enforce for ROSE developers.  Things like:
#    1. source files should not use CR+LF line termination common on Windows platforms
#    2. header files should not include certain ROSE headers like "rose.h"
#    3. file names must be unique on a case-insensitive file system
#    4. header files must not have names that conflict with headers in other directories
#    5. etc.
# DO NOT DISABLE without first checking with a ROSE core developer
export prefix	# for use by policy scripts
enforce_policies:
	(cd $(top_srcdir) && ./scripts/policies-checker.sh)

# Liao, 12/11/2009. we should force this rule to run every time we want to make a distribution
# otherwise the stale one can go into the distribution package
cleanSig:
	rm -rf bincompat-sig
bincompat-sig: cleanSig
	$(srcdir)/scripts/bincompat-sig > $@

# At some point we want to put tals into the distribution (likely just PDF files, but not yet).
# ROSE_Talks

# clean-local explanation:
# Remove template repositories.  No source code is compiled, but configuration
#   tests may have created template repositories here.
clean-local:
	rm -rf Templates.DB ii_files ti_files *.csv

# Not sure if this should be part of the clean-local rule.
# chmod -R +rwx rose-0.9.5a; rm -rf rose-0.9.5a

# DQ (9/8/2006): Modified to remove backend specific header files
uninstall-local:
#	rm -rf $(DESTDIR)$(includedir)/*_HEADERS
	rm -rf `find $(DESTDIR)$(includedir)/ -iname "*_HEADERS"`

distclean-local:
	-rm -rf $(top_builddir)/include-staging/

# This file supports the generation of rose_paths.C
# DQ (4/5/2009): Changed the generated file from a C file to a C++ file, so that it
# would be more consistant with the rest of C++ and work better with MSVC.
src/util/rose_paths.C: Makefile
	@@true > src/util/rose_paths.C
	@@echo "#include <string>" >> src/util/rose_paths.C
	@@echo "" >> src/util/rose_paths.C
	@@echo "/* Use the same header file to declare these variables as is used to reference them so that they will be globally available (and not local). */" >> src/util/rose_paths.C
	@@echo "#include \"rose_paths.h\"" >> src/util/rose_paths.C
	@@echo "" >> src/util/rose_paths.C
	@@echo "/* These paths will be absolute or relative depending on how the configure script is called (called with an absolute or relative path). */" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_GFORTRAN_PATH          = \"/usr/bin/gfortran\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_TOP_SRCDIR    = \"`cd ..; pwd`\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_TOP_BUILDDIR  = \"/home/bronevet/Downloads/rose/compile\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_PREFIX        = \"/home/bronevet/apps/rose\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_DATADIR       = \"${datarootdir}\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_BINDIR        = \"${exec_prefix}/bin\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_INCLUDEDIR    = \"${prefix}/include\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_INFODIR       = \"${datarootdir}/info\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_LIBDIR        = \"${exec_prefix}/lib\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_LIBEXECDIR    = \"${exec_prefix}/libexec\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_LOCALSTATEDIR = \"${prefix}/var\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_MANDIR        = \"${datarootdir}/man\";" >> src/util/rose_paths.C
	@@echo "" >> src/util/rose_paths.C
	@@echo "/* This will always be an absolute path, while paths above are dependent on how the configure script is called (called with an absolute or relative path). */" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_ABSOLUTE_PATH_TOP_SRCDIR = \"/home/bronevet/Downloads/rose\";" >> src/util/rose_paths.C
	@@echo "" >> src/util/rose_paths.C
	@@echo "/* Additional interesting data to provide. */" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_CONFIGURE_DATE     = \"Friday July 27 15:54:01 2012\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_BUILD_OS  = \"linux-gnu\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_BUILD_CPU = \"x86_64\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_OFP_VERSION_STRING = \"20111001\";" >> src/util/rose_paths.C

	@@echo "" >> src/util/rose_paths.C
#	@@echo "/* Define the location of the Compass tool within ROSE */" >> src/util/rose_paths.C
#	@@echo "const char COMPASS_SOURCE_DIRECTORY = \"/home/bronevet/Downloads/rose/projects/compass\";" >> src/util/rose_paths.C
#	@@echo "" >> src/util/rose_paths.C
	@@echo "/* Numeric form of ROSE version -- assuming ROSE version x.y.zL (where */" >> src/util/rose_paths.C
	@@echo "/* x, y, and z are numbers, and L is a single lowercase letter from a to j), */" >> src/util/rose_paths.C
	@@echo "/* the numeric value is x * 1000000 + y * 10000 + z * 100 + (L - 'a'). */" >> src/util/rose_paths.C
	@@echo "0.9.5a" | sed 's/\([0-9]\)\([a-z]\)/\1_\2/g' | tr .a-j _0-9 | awk -F_ '{printf "%02d%02d%02d%02d\n", $$1, $$2, $$3, $$4}' | sed 's/^0*//' | sed 's/.*/const int ROSE_NUMERIC_VERSION = \0;/' >> src/util/rose_paths.C

# DQ (4/5/2009): This rule is not called when compiling this directory, it is only
# called when compiling the /src/util directory (perhaps it should be located in 
# that directory's Makefile.am.
# DQ (12/3/2007): Added rose_paths.h so that it would be copied to the install tree.
# JJW (8/25/2008): Changed to a .c file

check-local: enforce_policies
	@echo '************************************************************'
	@echo '****** make check rule complete (terminated normally) ******'
	@echo '************************************************************'

install-exec-local:
	@echo '*****************************************************************'
	@echo '***** make install-exec rule complete (terminated normally) *****'
	@echo '*****************************************************************'

install-data-local: uninstall-local
	-mkdir $(DESTDIR)$(includedir)
#	DQ (11/1/2011): The EDG 4.x support does not require a separate include-staging directory.
#	if !ROSE_USE_NEW_EDG_INTERFACE
	cp -R $(top_builddir)/include-staging/* $(DESTDIR)$(includedir)/
#	endif
	@echo '*****************************************************************'
	@echo '***** make install-data rule complete (terminated normally) *****'
	@echo '*****************************************************************'

# DQ (4/22/2005): To make clear when binaries are in the distribution as 
# opposed to EDG source code we rename the final generated distribution.
# JJW (8/3/2008): This is only used for source distributions now --
# source_with_binary_edg_dist does its own renaming
rename_distribution:
	new_name="$(distdir)-source-with-EDG-source.tar.gz"; \
	cp $(distdir).tar.gz $$new_name

dist-hook:
	builddir="$$(pwd)" &&                                                      \
  (                                                                          \
  [ -e "$(srcdir)"/.git ] &&                                                 \
  cd $(srcdir) &&                                                            \
      git_head="$$(git rev-parse HEAD)" &&                                   \
      git_head_date="$$(git log -1 --format=%at $$(git rev-parse HEAD))" &&  \
          echo "$$git_head $$git_head_date" > $${builddir}/VERSION &&        \
          cp $${builddir}/VERSION $${builddir}/$(distdir)/VERSION            \
  ) ||                                                                       \
  (                                                                          \
  VERSION_FILE="$(srcdir)/VERSION" &&                                        \
  [ -e "$$VERSION_FILE" ] &&                                                 \
      cp "$$VERSION_FILE" $${builddir}/$(distdir)/VERSION                    \
  ) ||                                                                       \
  (                                                                          \
      echo "Error: could not determine SCM version information." &&          \
      exit 1                                                                 \
  ) ||                                                                       \
  exit 1

# Automake hook-ish rule to be run after dist rule (but hook runs before gzip so we can't use hook)
# We could build our own ROSE specific wrapper for dist and distcheck.
dist-after:
	@echo "Running dist hook rule ..."
	@$(MAKE) rename_distribution

# hook rule to be run after distcheck rule
distcheck-after:
	@echo "Running distcheck hook rule ..."
	@$(MAKE) rename_distribution

find_rose_lock_files:
#	du -a | grep rose_performance_report_lockfile
	find . -name rose_performance_report_lockfile -print

# New rule to simplify generation of documentation (we want to avoid using the
# automake generated "docs" rule because the generation of documentation is
# dependent upon separate tools which the user might not have available
# (true for bothe the LaTeX and html documentation).
# DQ (7/23/2004): Since there is a "docs" subdirectory we need to force the build!
FORCE_DOCS_TO_BE_MADE:

# DQ (7/25/2008): Running "make docs" introduces dependences that are inappropriate
# for a distribution.
docs: FORCE_DOCS_TO_BE_MADE
	@if [ -f $(top_srcdir)/src/midend/midend.docs ]; then \
	   echo "    Generate all possible documentation cd docs; make documentation;"; \
	   $(MAKE) -Ctutorial docs && \
	   $(MAKE) -Cprojects/haskellport docs && \
	   $(MAKE) -Ctests/roseTests/astInterfaceTests check && \
	   $(MAKE) -Ctests/roseTests/ompLoweringTests check && \
	   $(MAKE) -Ctests/CompileTests/UPC_tests check && \
	   $(MAKE) -Cprojects/UpcTranslation/tests check && \
	   $(MAKE) -Cprojects/autoParallelization/tests check && \
	   $(MAKE) -Cdocs docs && \
	   $(MAKE) -C$(compass_build_tooldir)/compass docs; \
	else \
	   echo "Please look at the ROSE web site for documentation (www.roseCompiler.org)"; \
	fi

# 1
# This rule generates the simple binary tarball for the directories: EDG and EDG_SAGE_Connection
#binary_edg_tarball: 
#	$(MAKE) -C src/frontend/CxxFrontend binary_edg_tarball

#upload_edg_binary:
#	$(MAKE) -C src/frontend/CxxFrontend upload_edg_binary

# Makefile rule to test the Hudson runTest script (used for all Hudson tests).
# Note that empty ROSE_TEST_BUILD_STYLE maps to a minimal build.
testHudsonRunScript:
	export ROSE_TEST_BUILD_SKIP_BUILD_SCRIPT=yes; \
   export ROSE_TEST_GCC_VERSION=4.2.4; \
   export ROSE_TEST_BUILD_STYLE=; \
   export ROSE_TEST_BOOST_PATH=${MY_BOOST_ROOT}; \
   export ROSE_TEST_JAVA_PATH=${JAVA_PATH}; \
   cd $(top_srcdir); \
   $(top_srcdir)/scripts/hudson/runTest

# This will cause the Hudson environment to be dumped to a file so that
# it can be sourced to reproduce the environment required to run tests
# in the hudson tmp directories as part of debugging.
dumpHudsonEnv:
	export ROSE_DUMP_HUDSON_ENV=yes; $(MAKE) testHudsonRunScript

# $(top_srcdir)/scripts/hudson/testHudsonRunScript.sh;

# DQ (12/16/2009): Added interesting "git" feature by Liao.
# It is unclear if it is very meaningful since it represents 
# individual work style more than anything else (but it's fun).
CheckinCounts:
	@echo "*****************************************************"
	@echo "Generated list of checkins to ROSE sumarized by user."
	@echo "*****************************************************"
	cd $(top_srcdir); git shortlog -s -n
	@echo "*****************************************************"

# This rule is useful for identifing source files where "rose_config.h" should be included.
FindFileRequiringRoseConfigHeaderShort:
#	grep "#define" rose_config.h | cut --delimiter=" " -f 2 
#	@list=`grep \"\#define\" rose_config.h | cut --delimiter=" " -f 2`; for f in $$list; do 
#	list=`ls -l | cut --delimiter=" " -f 2`; for f in $$list; do
	list=`egrep "#define|\/* #undef" rose_config.h | sed 's/\/\* //g' | egrep -v "const|error_t|inline|off_t|size_t" | cut --delimiter=" " -f 2`; \
   for f in $$list; do \
        echo "Searching for -->$$f<-- macro"; \
        grep -r $$f $(top_srcdir)/src/* | grep "\.h:" | cut --delimiter=":" -f 1; \
   done

# This rule is useful for identifing header files where "rose_config.h" is required and 
# thus should be fixed to not require this file. In the case of #undef it is represented 
# as "/* #undef" so we have to detect and remove the "/* " using sed.
# And ignore the macro definitions for "const|error_t|inline|off_t|size_t".
FindFileRequiringRoseConfigHeaderLong:
	list=`egrep "#define|\/* #undef" rose_config.h | sed 's/\/\* //g' | egrep -v "const|error_t|inline|off_t|size_t" | cut --delimiter=" " -f 2`; \
   for f in $$list; do \
        echo "Searching for -->$$f<-- macro"; \
        grep -r $$f $(top_srcdir)/* | grep "\.h:"; \
   done

FindFileRequiringRoseConfigSourceLong:
	list=`egrep "#define|\/* #undef" rose_config.h | sed 's/\/\* //g' | egrep -v "const|error_t|inline|off_t|size_t" | cut --delimiter=" " -f 2`; \
   for f in $$list; do \
        echo "Searching for -->$$f<-- macro"; \
        grep -r $$f $(top_srcdir)/* | grep "\.C:"; \
   done

FindFileRequiringRoseConfigSourceAndHeadersLong:
	list=`egrep "#define|\/* #undef" rose_config.h | sed 's/\/\* //g' | egrep -v "const|error_t|inline|off_t|size_t" | cut --delimiter=" " -f 2`; \
   for f in $$list; do \
        echo "Searching for -->$$f<-- macro"; \
        grep -r $$f $(top_srcdir)/src/* | egrep "\.C:|\.h:"; \
   done
NumberOfMakefiles:
	@echo "Number of Makefile.am files in root directory: "
	@du -a $(srcdir) | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in src directory: "
	@du -a $(srcdir)/src | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in projects directory: "
	@du -a $(srcdir)/projects | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in tests directory: "
	@du -a $(srcdir)/tests | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in exampleTranslators directory: "
	@du -a $(srcdir)/exampleTranslators | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in tutorial directory: "
	@du -a $(srcdir)/tutorial | $(FILTER_MAKEFILES)| wc -l
	@echo "Number of Makefile.am files in docs directory: "
	@du -a $(srcdir)/docs | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in demo directory: "
	@du -a $(srcdir)/demo | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in binaries directory: "
	@du -a $(srcdir)/binaries | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in tools directory: "
	@du -a $(srcdir)/tools | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in config directory: "
	@du -a $(srcdir)/config | $(FILTER_MAKEFILES) | wc -l
NameOfAutomakeConditionals:
#	grep -r "^AM_CONDITIONAL" $(top_srcdir) | $(FILTER_AUTOMAKE_CONDITONALS)
#	grep "_TRUE@" $(top_srcdir)/Makefile.in | grep "@" | cut --delimiter="@" -f 2 | sed s/_TRUE//g | sort --unique | grep -v "top_srcdir"
	list=`grep "_TRUE@" $(top_srcdir)/Makefile.in | grep "@" | cut --delimiter="@" -f 2 | sed 's/_TRUE//g' | sort --unique | grep -v "top_srcdir"`; \
   rm -f $(TEST_FILE); \
   touch $(TEST_FILE); \
   echo "automake_conditional_display:" >> $(TEST_FILE); \
   for f in $$list; do \
        echo "Processing -->$$f<-- macro"; \
        echo "if $$f" >> $(TEST_FILE); \
        echo -e "\t@echo \"Automake conditional $$f: DEFINED\"" >> $(TEST_FILE); \
        echo "else" >> $(TEST_FILE); \
        echo -e "\t@echo \"Automake conditional $$f: NOT defined\"" >> $(TEST_FILE); \
        echo "endif" >> $(TEST_FILE); \
   done
#	This can't be run since it can't be processed through automake and autoconf.
#	$(MAKE) -f $(TEST_FILE) automake_conditional_display

# This is a test of the new make rule added in the file $(TEST_FILE).
testNameOfAutomakeConditionals:
	@echo "*************************************************************************"
	@echo "Testing makefile rule automake_conditional_display in file: $(TEST_FILE)."
	@echo "*************************************************************************"
	$(MAKE) automake_conditional_display
automake_conditional_display:
	@echo "Automake conditional AMDEP: DEFINED"
#	@echo "Automake conditional AMDEP: NOT defined"
#	@echo "Automake conditional am__fastdepCC: DEFINED"
	@echo "Automake conditional am__fastdepCC: NOT defined"
#	@echo "Automake conditional am__fastdepCXX: DEFINED"
	@echo "Automake conditional am__fastdepCXX: NOT defined"
#	@echo "Automake conditional AXXPXX_SPECIFIC_TESTS: DEFINED"
	@echo "Automake conditional AXXPXX_SPECIFIC_TESTS: NOT defined"
#	@echo "Automake conditional BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING: DEFINED"
	@echo "Automake conditional BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING: NOT defined"
#	@echo "Automake conditional BINARY_EDG_TARBALL_ENABLED: DEFINED"
	@echo "Automake conditional BINARY_EDG_TARBALL_ENABLED: NOT defined"
	@echo "Automake conditional CONVENIENCE_LTDL: DEFINED"
#	@echo "Automake conditional CONVENIENCE_LTDL: NOT defined"
#	@echo "Automake conditional DOT_TO_GML_TRANSLATOR: DEFINED"
	@echo "Automake conditional DOT_TO_GML_TRANSLATOR: NOT defined"
#	@echo "Automake conditional ENABLE_JAVAPORT: DEFINED"
	@echo "Automake conditional ENABLE_JAVAPORT: NOT defined"
#	@echo "Automake conditional ROSE_HAVE_LIBYICES: DEFINED"
	@echo "Automake conditional ROSE_HAVE_LIBYICES: NOT defined"
#	@echo "Automake conditional ROSE_HAVE_YICES: DEFINED"
	@echo "Automake conditional ROSE_HAVE_YICES: NOT defined"
#	@echo "Automake conditional INSTALL_LTDL: DEFINED"
	@echo "Automake conditional INSTALL_LTDL: NOT defined"
#	@echo "Automake conditional OLD_COMPILER_VERSION: DEFINED"
	@echo "Automake conditional OLD_COMPILER_VERSION: NOT defined"
#	@echo "Automake conditional OS_32BIT: DEFINED"
	@echo "Automake conditional OS_32BIT: NOT defined"
	@echo "Automake conditional OS_64BIT: DEFINED"
#	@echo "Automake conditional OS_64BIT: NOT defined"
	@echo "Automake conditional OS_LINUX: DEFINED"
#	@echo "Automake conditional OS_LINUX: NOT defined"
#	@echo "Automake conditional OS_MACOSX: DEFINED"
	@echo "Automake conditional OS_MACOSX: NOT defined"
#	@echo "Automake conditional OS_MINGW: DEFINED"
	@echo "Automake conditional OS_MINGW: NOT defined"
#	@echo "Automake conditional OS_MSDOS: DEFINED"
	@echo "Automake conditional OS_MSDOS: NOT defined"
#	@echo "Automake conditional OS_VENDOR_APPLE: DEFINED"
	@echo "Automake conditional OS_VENDOR_APPLE: NOT defined"
	@echo "Automake conditional OS_VENDOR_CENTOS: DEFINED"
#	@echo "Automake conditional OS_VENDOR_CENTOS: NOT defined"
#	@echo "Automake conditional OS_VENDOR_DEBIAN: DEFINED"
	@echo "Automake conditional OS_VENDOR_DEBIAN: NOT defined"
#	@echo "Automake conditional OS_VENDOR_REDHAT: DEFINED"
	@echo "Automake conditional OS_VENDOR_REDHAT: NOT defined"
#	@echo "Automake conditional OS_VENDOR_REDHAT_32BIT: DEFINED"
	@echo "Automake conditional OS_VENDOR_REDHAT_32BIT: NOT defined"
#	@echo "Automake conditional OS_VENDOR_UBUNTU: DEFINED"
	@echo "Automake conditional OS_VENDOR_UBUNTU: NOT defined"
#	@echo "Automake conditional QROSE_USE_MINGW32: DEFINED"
	@echo "Automake conditional QROSE_USE_MINGW32: NOT defined"
#	@echo "Automake conditional QROSE_USE_WINDOWS: DEFINED"
	@echo "Automake conditional QROSE_USE_WINDOWS: NOT defined"
	@echo "Automake conditional ROSE_BUILD_BINARY_ANALYSIS_SUPPORT: DEFINED"
#	@echo "Automake conditional ROSE_BUILD_BINARY_ANALYSIS_SUPPORT: NOT defined"
	@echo "Automake conditional ROSE_BUILD_C_LANGUAGE_SUPPORT: DEFINED"
#	@echo "Automake conditional ROSE_BUILD_C_LANGUAGE_SUPPORT: NOT defined"
	@echo "Automake conditional ROSE_BUILD_CUDA_LANGUAGE_SUPPORT: DEFINED"
#	@echo "Automake conditional ROSE_BUILD_CUDA_LANGUAGE_SUPPORT: NOT defined"
	@echo "Automake conditional ROSE_BUILD_CXX_LANGUAGE_SUPPORT: DEFINED"
#	@echo "Automake conditional ROSE_BUILD_CXX_LANGUAGE_SUPPORT: NOT defined"
	@echo "Automake conditional ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT: DEFINED"
#	@echo "Automake conditional ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT: NOT defined"
	@echo "Automake conditional ROSE_BUILD_JAVA_LANGUAGE_SUPPORT: DEFINED"
#	@echo "Automake conditional ROSE_BUILD_JAVA_LANGUAGE_SUPPORT: NOT defined"
	@echo "Automake conditional ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT: DEFINED"
#	@echo "Automake conditional ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT: NOT defined"
#	@echo "Automake conditional ROSE_BUILD_OS_IS_CYGWIN: DEFINED"
	@echo "Automake conditional ROSE_BUILD_OS_IS_CYGWIN: NOT defined"
#	@echo "Automake conditional ROSE_BUILD_OS_IS_OSX: DEFINED"
	@echo "Automake conditional ROSE_BUILD_OS_IS_OSX: NOT defined"
	@echo "Automake conditional ROSE_BUILD_PHP_LANGUAGE_SUPPORT: DEFINED"
#	@echo "Automake conditional ROSE_BUILD_PHP_LANGUAGE_SUPPORT: NOT defined"
#	@echo "Automake conditional ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT: DEFINED"
	@echo "Automake conditional ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT: NOT defined"
	@echo "Automake conditional ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT: DEFINED"
#	@echo "Automake conditional ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT: NOT defined"
#	@echo "Automake conditional ROSE_BUILD_ROSEHPCT: DEFINED"
	@echo "Automake conditional ROSE_BUILD_ROSEHPCT: NOT defined"
	@echo "Automake conditional ROSE_BUILD_TESTS_DIRECTORY_SUPPORT: DEFINED"
#	@echo "Automake conditional ROSE_BUILD_TESTS_DIRECTORY_SUPPORT: NOT defined"
	@echo "Automake conditional ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT: DEFINED"
#	@echo "Automake conditional ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT: NOT defined"
#	@echo "Automake conditional ROSE_HAS_EDG_SOURCE: DEFINED"
	@echo "Automake conditional ROSE_HAS_EDG_SOURCE: NOT defined"
#	@echo "Automake conditional ROSE_MPI: DEFINED"
	@echo "Automake conditional ROSE_MPI: NOT defined"
#	@echo "Automake conditional ROSE_OFP_CONTAINS_JAVA_FILE: DEFINED"
	@echo "Automake conditional ROSE_OFP_CONTAINS_JAVA_FILE: NOT defined"
#	@echo "Automake conditional ROSE_PCH: DEFINED"
	@echo "Automake conditional ROSE_PCH: NOT defined"
#	@echo "Automake conditional ROSE_USE_ASSEMBLY_SEMANTICS: DEFINED"
	@echo "Automake conditional ROSE_USE_ASSEMBLY_SEMANTICS: NOT defined"
#	@echo "Automake conditional ROSE_USE_BDDBDDB: DEFINED"
	@echo "Automake conditional ROSE_USE_BDDBDDB: NOT defined"
#	@echo "Automake conditional ROSE_USE_BINARYCONTEXTLOOKUP: DEFINED"
	@echo "Automake conditional ROSE_USE_BINARYCONTEXTLOOKUP: NOT defined"
	@echo "Automake conditional ROSE_USE_BOOST_WAVE: DEFINED"
#	@echo "Automake conditional ROSE_USE_BOOST_WAVE: NOT defined"
#	@echo "Automake conditional ROSE_USE_CUDA_SUPPORT: DEFINED"
	@echo "Automake conditional ROSE_USE_CUDA_SUPPORT: NOT defined"
#	@echo "Automake conditional ROSE_USE_DWARF: DEFINED"
	@echo "Automake conditional ROSE_USE_DWARF: NOT defined"
#	@echo "Automake conditional ROSE_USE_ETHER: DEFINED"
	@echo "Automake conditional ROSE_USE_ETHER: NOT defined"
#	@echo "Automake conditional ROSE_USE_GCC_OMP: DEFINED"
	@echo "Automake conditional ROSE_USE_GCC_OMP: NOT defined"
#	@echo "Automake conditional ROSE_USE_GRAPHVIZ_DOT: DEFINED"
	@echo "Automake conditional ROSE_USE_GRAPHVIZ_DOT: NOT defined"
#	@echo "Automake conditional ROSE_USE_IDA: DEFINED"
	@echo "Automake conditional ROSE_USE_IDA: NOT defined"
	@echo "Automake conditional ROSE_USE_INDENT: DEFINED"
#	@echo "Automake conditional ROSE_USE_INDENT: NOT defined"
#	@echo "Automake conditional ROSE_USE_INTEL_PIN: DEFINED"
	@echo "Automake conditional ROSE_USE_INTEL_PIN: NOT defined"
	@echo "Automake conditional ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL: DEFINED"
#	@echo "Automake conditional ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL: NOT defined"
#	@echo "Automake conditional ROSE_USE_LIBFFI: DEFINED"
	@echo "Automake conditional ROSE_USE_LIBFFI: NOT defined"
#	@echo "Automake conditional ROSE_USE_LLVM: DEFINED"
	@echo "Automake conditional ROSE_USE_LLVM: NOT defined"
#	@echo "Automake conditional ROSE_USE_LONG_MAKE_CHECK_RULE: DEFINED"
	@echo "Automake conditional ROSE_USE_LONG_MAKE_CHECK_RULE: NOT defined"
#	@echo "Automake conditional ROSE_USE_MAPLE: DEFINED"
	@echo "Automake conditional ROSE_USE_MAPLE: NOT defined"
#	@echo "Automake conditional ROSE_USE_MYSQL: DEFINED"
	@echo "Automake conditional ROSE_USE_MYSQL: NOT defined"
#	@echo "Automake conditional ROSE_USE_NEW_EDG_INTERFACE: DEFINED"
	@echo "Automake conditional ROSE_USE_NEW_EDG_INTERFACE: NOT defined"
	@echo "Automake conditional ROSE_USE_OBJDUMP: DEFINED"
#	@echo "Automake conditional ROSE_USE_OBJDUMP: NOT defined"
#	@echo "Automake conditional ROSE_USE_OMNI_OPENMP: DEFINED"
	@echo "Automake conditional ROSE_USE_OMNI_OPENMP: NOT defined"
#	@echo "Automake conditional ROSE_USE_OPENCL_SUPPORT: DEFINED"
	@echo "Automake conditional ROSE_USE_OPENCL_SUPPORT: NOT defined"
#if ROSE_USE_OPEN_FORTRAN_PARSER
#	@echo "Automake conditional ROSE_USE_OPEN_FORTRAN_PARSER: DEFINED"
#else
#	@echo "Automake conditional ROSE_USE_OPEN_FORTRAN_PARSER: NOT defined"
#endif
#	@echo "Automake conditional ROSE_USE_OPENGL: DEFINED"
	@echo "Automake conditional ROSE_USE_OPENGL: NOT defined"
#	@echo "Automake conditional ROSE_USE_PHP: DEFINED"
	@echo "Automake conditional ROSE_USE_PHP: NOT defined"
	@echo "Automake conditional ROSE_USE_PYTHON: DEFINED"
#	@echo "Automake conditional ROSE_USE_PYTHON: NOT defined"
#	@echo "Automake conditional ROSE_USE_PPL: DEFINED"
	@echo "Automake conditional ROSE_USE_PPL: NOT defined"
#	@echo "Automake conditional ROSE_USE_QROSE: DEFINED"
	@echo "Automake conditional ROSE_USE_QROSE: NOT defined"
#	@echo "Automake conditional ROSE_USE_QT: DEFINED"
	@echo "Automake conditional ROSE_USE_QT: NOT defined"
#	@echo "Automake conditional ROSE_USE_RTED: DEFINED"
	@echo "Automake conditional ROSE_USE_RTED: NOT defined"
#	@echo "Automake conditional ROSE_USE_SAT: DEFINED"
	@echo "Automake conditional ROSE_USE_SAT: NOT defined"
#	@echo "Automake conditional ROSE_USE_SMALLER_GENERATED_FILES: DEFINED"
	@echo "Automake conditional ROSE_USE_SMALLER_GENERATED_FILES: NOT defined"
#	@echo "Automake conditional ROSE_USE_SQLITE_DATABASE: DEFINED"
	@echo "Automake conditional ROSE_USE_SQLITE_DATABASE: NOT defined"
#	@echo "Automake conditional ROSE_USE_SSL_SUPPORT: DEFINED"
	@echo "Automake conditional ROSE_USE_SSL_SUPPORT: NOT defined"
#	@echo "Automake conditional ROSE_USE_TCLSH: DEFINED"
	@echo "Automake conditional ROSE_USE_TCLSH: NOT defined"
#	@echo "Automake conditional ROSE_USE_TEST_SMT_SOLVER: DEFINED"
	@echo "Automake conditional ROSE_USE_TEST_SMT_SOLVER: NOT defined"
#	@echo "Automake conditional ROSE_USE_TRACE_ANALYSIS: DEFINED"
	@echo "Automake conditional ROSE_USE_TRACE_ANALYSIS: NOT defined"
#	@echo "Automake conditional ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT: DEFINED"
	@echo "Automake conditional ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT: NOT defined"
#	@echo "Automake conditional ROSE_USE_VISUALIZATION: DEFINED"
	@echo "Automake conditional ROSE_USE_VISUALIZATION: NOT defined"
	@echo "Automake conditional ROSE_USE_WGET: DEFINED"
#	@echo "Automake conditional ROSE_USE_WGET: NOT defined"
#	@echo "Automake conditional ROSE_USE_WINDOWS_ANALYSIS_SUPPORT: DEFINED"
	@echo "Automake conditional ROSE_USE_WINDOWS_ANALYSIS_SUPPORT: NOT defined"
#	@echo "Automake conditional ROSE_USE_XML: DEFINED"
	@echo "Automake conditional ROSE_USE_XML: NOT defined"
#	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_35: DEFINED"
	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_35: NOT defined"
#	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_36: DEFINED"
	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_36: NOT defined"
#	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_37: DEFINED"
	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_37: NOT defined"
#	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_38: DEFINED"
	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_38: NOT defined"
#	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_39: DEFINED"
	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_39: NOT defined"
#	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_40: DEFINED"
	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_40: NOT defined"
#	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_41: DEFINED"
	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_41: NOT defined"
#	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_42: DEFINED"
	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_42: NOT defined"
#	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_43: DEFINED"
	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_43: NOT defined"
#	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_44: DEFINED"
	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_44: NOT defined"
#	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_45: DEFINED"
	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_45: NOT defined"
#	@echo "Automake conditional ROSE_USING_GFORTRAN_VERSION_4_0: DEFINED"
	@echo "Automake conditional ROSE_USING_GFORTRAN_VERSION_4_0: NOT defined"
#	@echo "Automake conditional ROSE_USING_GFORTRAN_VERSION_4_1: DEFINED"
	@echo "Automake conditional ROSE_USING_GFORTRAN_VERSION_4_1: NOT defined"
#	@echo "Automake conditional ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY: DEFINED"
	@echo "Automake conditional ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY: NOT defined"
#	@echo "Automake conditional ROSE_USING_ROSE: DEFINED"
	@echo "Automake conditional ROSE_USING_ROSE: NOT defined"
#	@echo "Automake conditional ROSE_USING_ROSE_ANALYSIS: DEFINED"
	@echo "Automake conditional ROSE_USING_ROSE_ANALYSIS: NOT defined"
#	@echo "Automake conditional ROSE_USING_ROSE_AST_FILE_IO: DEFINED"
	@echo "Automake conditional ROSE_USING_ROSE_AST_FILE_IO: NOT defined"
#	@echo "Automake conditional ROSE_USING_ROSE_CODE_GENERATION: DEFINED"
	@echo "Automake conditional ROSE_USING_ROSE_CODE_GENERATION: NOT defined"
#	@echo "Automake conditional ROSE_USING_ROSE_TRANSLATOR: DEFINED"
	@echo "Automake conditional ROSE_USING_ROSE_TRANSLATOR: NOT defined"
#	@echo "Automake conditional ROSE_WITH_ROSEQT: DEFINED"
	@echo "Automake conditional ROSE_WITH_ROSEQT: NOT defined"
	@echo "Automake conditional USE_BINARY_ANALYSIS_TESTS: DEFINED"
#	@echo "Automake conditional USE_BINARY_ANALYSIS_TESTS: NOT defined"
#	@echo "Automake conditional USE_GCJ: DEFINED"
	@echo "Automake conditional USE_GCJ: NOT defined"
#	@echo "Automake conditional USE_HASKELL: DEFINED"
	@echo "Automake conditional USE_HASKELL: NOT defined"
#	@echo "Automake conditional USE_ROSE_IN_BUILD_TREE_VAR: DEFINED"
	@echo "Automake conditional USE_ROSE_IN_BUILD_TREE_VAR: NOT defined"
#	@echo "Automake conditional USE_VALGRIND: DEFINED"
	@echo "Automake conditional USE_VALGRIND: NOT defined"
	@echo "Automake conditional USING_GNU_COMPILER: DEFINED"
#	@echo "Automake conditional USING_GNU_COMPILER: NOT defined"
#	@echo "Automake conditional USING_INTEL_COMPILER: DEFINED"
	@echo "Automake conditional USING_INTEL_COMPILER: NOT defined"
#	@echo "Automake conditional WITH_GOMP_OPENMP_LIB: DEFINED"
	@echo "Automake conditional WITH_GOMP_OPENMP_LIB: NOT defined"
NameOfAutoconfDefines:
	grep -r "AC_DEFINE" $(top_srcdir) | $(FILTER_AUTOCONF_DEFINE)

# DQ (2/12/2010): Report the areas of ROSE where we have skipped some tests of ROSE 
# either doing analysis, code generation, or translation of the ROSE source code.
ProblemAreas:
	echo "Directories where ROSE does not analyze code for some ROSE source files."
	grep -r ROSE_USING_ROSE_ANALYSIS $(top_srcdir) | grep Makefile.am
	echo "Directories where ROSE does not generate code for some ROSE source files."
	grep -r ROSE_USING_ROSE_CODE_GENERATION $(top_srcdir) | grep Makefile.am
	echo "Directories where ROSE does not translate (compile) code for some ROSE source files."
	grep -r ROSE_USING_ROSE_TRANSLATE $(top_srcdir) | grep Makefile.am
	echo "Directories where ROSE does not properly handled AST File I/O for at least some ROSE source files."
	grep -r ROSE_USING_ROSE_AST_FILE_IO $(top_srcdir) | grep Makefile.am
	echo "Files where ROSE does not analyze some amount of code (test of USE_ROSE in each ROSE source file)."
	grep -rl USE_ROSE $(top_srcdir) | grep "\.C"
	echo "Files where ROSE does not analyze some amount of code (test of CXX_IS_ROSE_ANALYSIS in each ROSE source file)."
	grep -rl CXX_IS_ROSE_ANALYSIS $(top_srcdir) | grep "\.C"
	echo "Files where ROSE does not analyze some amount of code (test of CXX_IS_ROSE_CODE_GENERATION"
	echo "in each ROSE source file)."
	grep -rl CXX_IS_ROSE_CODE_GENERATION $(top_srcdir) | grep "\.C"
#	echo "Files where ROSE does not analyze some amount of code (test of CXX_IS_ROSE_TRANSLATOR in each ROSE source file)."
#	grep -rl CXX_IS_ROSE_TRANSLATOR $(top_srcdir) | grep "\.C"

# Report the version number of the ROSE translator built.
PrintRoseTranslatorVersion: $(top_builddir)/tests/testAnalysis
	$(top_builddir)/tests/testAnalysis --version

PrintBinaryCompatibilitySignature:
	@echo "release_binary_compatibility_signature = ${release_binary_compatibility_signature}"

# Generate public version of rose_config.h, which is triggered by the AC_CONFIG_COMMANDS macro near the end
# of config/support-rose.m4 whenever config.status runs.
rosePublicConfig.h: rose_config.h
	@echo "  GEN     $@"
	@$(top_srcdir)/scripts/publicConfiguration.pl <$^ >$@

# This file does not exist until we run the compiler to build it.
# include $(top_builddir)/src/frontend/SageIII/astPostProcessing/.libs/astPostProcessing.d
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
